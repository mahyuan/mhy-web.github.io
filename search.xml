<?xml version="1.0" encoding="utf-8"?><search><entry><title>cssText批量修改dom的样式</title><link href="/cssText-operate-style.html"/><url>/cssText-operate-style.html</url><content type="html"><![CDATA[<p>之前用js修改dom的样式一般都是采用以下的方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="keyword">this</span>.$refs.target;</span><br><span class="line">element.style.width = <span class="string">'200px'</span>;</span><br><span class="line">element.style.height = <span class="string">'100px'</span>;</span><br><span class="line">element.style.color = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure></p><p>样式不多的话，性能还可以，但是如果样式特别多，或者涉及到动画的时候，性能会不太理想。前者每一次设置都会reflow一次，后者之后reflow一次。<br>早上阅读某开源框架的源码时发现了一种用js覆写css的方式，查阅之后发现兼容性和性能都超级棒，这里记录一下以加深记忆。</p><h2 id="功能和语法"><a href="#功能和语法" class="headerlink" title="功能和语法"></a>功能和语法</h2><p>MDN介绍:</p><blockquote><p>The cssText property of the CSSStyleDeclaration interface returns or sets the text of the element’s inline style declaration only. To be able to set a stylesheet rule dynamically, see Using dynamic styling information.</p></blockquote><p>语法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="keyword">this</span>.$refs.target;</span><br><span class="line"><span class="comment">// 获取内联样式,好像只能获取到内联样式，写在style标签和css文件中的样式需要使用 window.getComputedStyle 获取</span></span><br><span class="line">alert(element.style.cssText)</span><br><span class="line"><span class="comment">// 覆写样式</span></span><br><span class="line">element.style.cssText = <span class="string">'width:200px;height:100px;color:red;'</span>;</span><br></pre></td></tr></table></figure></p><p>使用<code>cssText</code>会覆盖之前的所有样式，所以如果要保留之前的样式，则需要先获取到已有样式，然后追加新样式。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>各浏览器目前都兼容（包括IE6,7,8）<code>cssText</code>的方式设置样式，但是在IE下，累加的时候回丢失之前的样式中最后一个<code>;</code>， 所有需要做一下兼容，可以采用正则的方式对获取到的已有样式进行匹配。<br>获取已有属性可以用<code>window.getComputedStyle</code>，IE浏览器用<code>document.currentStyle</code>，此API仅用来覆写样式即可。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取原有样式, IE 用 dom元素.currentStyle 火狐谷歌用window.getComputedStyle(dom, null)</span></span><br><span class="line"><span class="keyword">const</span> getStyle = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.document.currentStyle) &#123;</span><br><span class="line"><span class="keyword">return</span><span class="function">(<span class="params">dom, attr</span>) =&gt;</span> dom.currentStyle[attr];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span><span class="function">(<span class="params">dom, attr</span>) =&gt;</span> getComputedStyle(dom, <span class="literal">false</span>)[attr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelecter(<span class="string">'#target'</span>);</span><br><span class="line"><span class="keyword">let</span> widthExists = getStyle(element, <span class="string">'width'</span>);</span><br><span class="line"><span class="comment">// 去除px</span></span><br><span class="line"><span class="keyword">let</span> width = <span class="built_in">Number</span>(widthExists.replace(<span class="regexp">/\%/g</span>, <span class="string">''</span>));</span><br><span class="line">element.style.cssText += <span class="string">`;width: <span class="subst">$&#123;widthExists + <span class="number">200</span>&#125;</span>px;`</span></span><br></pre></td></tr></table></figure><p>这里用到了<code>getComputedStyle和currentStyle</code>，其中<code>currentStyle</code>是IE浏览器的API，<code>getComputedStyle</code>是google等主流浏览器都支持的获取已有样式的接口。<br>该方法有两个参数，第一个参数是要获取样式的dom节点，第二个参数一般可设置为 <code>null</code>或<code>fasle</code>，仅在获取伪类元素时传入伪类的值，返回值是一个只读的对象，里面包含了该dom元素的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h3</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: "rocks!";</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>generated content<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> h3 = <span class="built_in">document</span>.querySelector(<span class="string">'h3'</span>),</span></span><br><span class="line"><span class="actionscript">    result = getComputedStyle(h3, <span class="string">'::after'</span>).content;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">`the generated content is: <span class="subst">$&#123;result&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">`the generated content is: <span class="subst">$&#123;result&#125;</span>`</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// the generated content is: "rocks!"</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content><categories><category> 前端 </category></categories><tags><tag> css </tag><tag> javascript </tag></tags></entry><entry><title>vps搭建指南</title><link href="/vps-deploy-guide.html"/><url>/vps-deploy-guide.html</url><content type="html"><![CDATA[<p>上周发现我的vps又被禁了，又得重新部署。<br>每次部署vps都要google搜索相关命令，特别麻烦，这里记录一下搭建vps的简单步骤吧。</p><a id="more"></a><p>安装shadowsocks命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p><p>安装过程中根据命令行交互选择服务器类型（如Shadowsocks-libev）、端口、密码、加密方法等。<br>如Shadowsocks-libev类型的服务的配置文件在 <code>/etc/shadowsocks-libev/config.json</code>，可以编辑配置。</p><p>查看状态<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/shadowsocks-libev status</span></span><br></pre></td></tr></table></figure></p><p>重启服务<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/shadowsocks-libev restart</span></span><br></pre></td></tr></table></figure></p><p>关闭服务<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks-libev <span class="built_in">stop</span></span><br></pre></td></tr></table></figure></p><p>开启服务<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/shadowsocks-libev start</span></span><br></pre></td></tr></table></figure></p><p>参考:<br><a href="https://zoomyale.com/2016/vultr_and_ss/" target="_blank" rel="noopener">科学上网的终极姿势：在 Vultr VPS 上搭建 Shadowsocks</a><br><a href="https://www.vps234.com/hostwinds-purchase-tutorial/" target="_blank" rel="noopener">美国 VPS Hostwinds 购买流程新手教程</a><br><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">一键安装最新内核并开启 BBR 脚本</a><br><a href="https://teddysun.com/276.html" target="_blank" rel="noopener">新购VPS后的设置及网站迁移步骤</a><br><a href="https://www.10besty.com/best-vps-hosting-services/" target="_blank" rel="noopener">2019年最好的国外VPS推荐</a></p>]]></content><categories><category> vps </category></categories><tags><tag> vps </tag></tags></entry><entry><title>vue+element后台管理搜索表单缓存</title><link href="/vue-element-admin-search-query-cache.html"/><url>/vue-element-admin-search-query-cache.html</url><content type="html"><![CDATA[<p>在后台管理系统中经常会有这样的需求，从列表页跳转到详情页再返回列表后希望保持之前的查询条件，此类需求一般有以下几种处理方式可以参考。</p><a id="more"></a><h2 id="新页面打开详情页"><a href="#新页面打开详情页" class="headerlink" title="新页面打开详情页"></a>新页面打开详情页</h2><p>偷懒的做法是打开详情页时在新窗口打开，这样就可以保持列表页的搜索参数了，但是这样往往会打开很多的新页面，用户需要在多个页面直接来回切换操作繁琐，而且有个关键的问题是切换到列表页标签后数据并不是最新的，因为刚才在详情页已经编辑过数据了。我负责开发维护的后台管理系统在新建和编辑时是在不同的路由下调用同一个详情页组件来实现的，所以在编辑和新建请求完成之后详情页是否直接关闭还是让用户手动关闭是一个问题，新建页如果留给用户处理会连续创建多条相同数据的情况发生。而且连续打开多个页面标签页违背了单页面应用的初衷， 基于这些问题，我放弃了这种方式。<br>基于vue技术栈，在新标签页打开详情页主要有两种实现方式，一种是 <code>router-link</code>标签加<code>target=&quot;_blank&quot;</code>属性，其原理是<code>a</code>标签的<code>target</code>属性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span><span class="attr">:to</span>=<span class="string">"&#123;name: 'detail'&#125;"</span><span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另一种方式是js控制，其绑定的DOM元素渲染之后不再是<code>a</code>标签，而是一个<code>button</code>，页面跳转主要是基于<code>window</code>对象的功能实现的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"handleToDetail(params)"</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span><span class="keyword">default</span>&#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 参数可以自定义,一般包含主键id等性质的参数</span></span></span><br><span class="line">    handleToDetail(params) &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routerData = <span class="keyword">this</span>.$router.resolve(&#123;name: <span class="string">'detail'</span>, query: &#123;params: params&#125;&#125;)</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.open(routerData.href, <span class="string">"_blank"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中的<code>vue-router</code>特性不多说，具体可以查阅<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="query携带查询参数"><a href="#query携带查询参数" class="headerlink" title="query携带查询参数"></a>query携带查询参数</h2><p>另一种实现方式是在路由跳转时在路由的<code>query</code>中把参数携带过去，返回时再带回来，列表页在<code>mounted</code>生命周期内对<code>query</code>进行处理，如果<code>query</code>中携带了查询参数则使用该查询参对数据进行赋值然后查询即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span><span class="attr">:model</span>=<span class="string">"params"</span><span class="attr">inline</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-from-item</span><span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"params.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-from-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-from-item</span><span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"params.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-from-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-from-item</span><span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"params.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-from-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"handleToDetail"</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">      params: &#123;</span><br><span class="line"><span class="actionscript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        imgUrl: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.getSearchQueryIfExists()</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.handleSearch()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 路由跳转时把搜索表单参数转换成字符串赋值给searchQuyery携带过去 ，跳转回来时直接带回来</span></span></span><br><span class="line">    handleToDetail() &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">const</span> params = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.params)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$router.push(&#123;name: <span class="string">'detail'</span>, query: &#123; id: <span class="keyword">this</span>.params.id, searchQuyery: params &#125;&#125;)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript"><span class="comment">// 进入列表时，如果query中含有searchQuyery字段，则转换成对象赋值给查询对象参数即可</span></span></span><br><span class="line">    getSearchQueryIfExists() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> &#123; query = &#123;&#125; &#125; = <span class="keyword">this</span>.$router.query</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(query.hasOwnProperty(<span class="string">'searchQuyery'</span>)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> stashQuery = <span class="built_in">JSON</span>.parse(query.searchQuyery)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.params = stashQuery</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript"><span class="comment">// 发送查询http请求</span></span></span><br><span class="line">  handleSearch() &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 。。。。</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种实现方式可以基本满足要求，在页面较少或者项目中没有引入vuex时可以使用。缺点是需要缓存的页面较多时，需要重复进行处理，比较繁琐。</p><h2 id="使用vuex缓存查询参数"><a href="#使用vuex缓存查询参数" class="headerlink" title="使用vuex缓存查询参数"></a>使用vuex缓存查询参数</h2><p>如果需要缓存的页面较多，且系统中已经引入了<code>vuex</code>，则可以使用<code>vuex</code>缓存的方式来实现查询参数缓存。<br>首先需要把查询参数写入<code>vuex</code>中, 在<code>store</code>目录下创建一个用于缓存路由查询参数的文件，例如<code>routerCache.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routerCache.js</span></span><br><span class="line"><span class="keyword">const</span> routeCache = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    cachedRoutes: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_CACHED_ROUTES: <span class="function">(<span class="params">state, route</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; name, query &#125; = route</span><br><span class="line">      state.cachedRoutes[name] = query</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    setCachedRoutes(&#123; commit &#125;, route) &#123;</span><br><span class="line">      commit(<span class="string">'SET_CACHED_ROUTES'</span>, route)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> routeCache</span><br></pre></td></tr></table></figure></p><p>在<code>getter</code>中引入。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getter.js</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  cachedRoutes: <span class="function"><span class="params">state</span> =&gt;</span> state.routeCache.cachedRoutes,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure></p><p>其中，<code>name</code>是路由的<code>name</code>属性值，查询参数<code>query</code>保存在<code>name</code>中，当然也可以使用路由的<code>path</code>做为键，区别在于是否区分动态路由。<code>query</code>可以是对象，也可以是JSON化的字符串，建议使用JSON字符串进行保存。<br>接下来是在查询时调用<code>actions</code>中的<code>setCachedRoutes()</code>方法保存页面查询参数和进入页面后获取<code>getter</code>中缓存的值。这部分涉及<code>vuex</code>的使用方式，不太清楚可以查阅<a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">官方文档</a>。这部分我们可以使用<code>mixin</code>进行封装，暴露出两个方法来保存和获取缓存即可。如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixins/queryCache.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions, mapGetters &#125; <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">      searchKey: <span class="string">''</span><span class="comment">// 每个页面查询表单`model`绑定的值可能不一样，使用此变量来接收查询对象的 key 值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'cachedRoutes'</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'setCachedRoutes'</span>]),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路由缓存相关配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: queryKey 页面搜索表单对象的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    setSearchQuery(queryKey) &#123;</span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">this</span>.$route.name</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span><span class="keyword">this</span>.setCachedRoutes === <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.setCachedRoutes(&#123; <span class="attr">name</span>: name, <span class="attr">query</span>: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>[queryKey]) &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取路由缓存相关配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: queryKey 页面搜索表单对象的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getSearchQuery(queryKey) &#123;</span><br><span class="line"><span class="comment">// 如果使用 路由 的 name属性缓存的话，这里就取当前页面路由的 name值，如果使用了 path 缓存替换即可</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">this</span>.$route.name</span><br><span class="line"><span class="keyword">const</span> cachedRoutes = <span class="keyword">this</span>.cachedRoutes || &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (cachedRoutes.hasOwnProperty(name)) &#123;</span><br><span class="line"><span class="keyword">const</span> target = <span class="built_in">JSON</span>.parse(cachedRoutes[name])</span><br><span class="line"><span class="keyword">this</span>[queryKey] = <span class="built_in">Object</span>.assign(&#123;&#125;, target）</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果需要缓存查询参数对象之外的方法，则需要在<code>getSearchQuery</code>和<code>setSearchQuery</code>中添加特殊情况下的判断逻辑即可。其中<code>setSearchQuery</code>可以在点击搜索按钮或发送查询请求时进行调用，区别在是否需要缓存分页查询相关参数。<code>getSearchQuery</code>必须在<code>created</code>或<code>mounted</code>生命周期中掉用，将缓存的数据赋值给查询对象之后调用页面的查询请求，这样就实现了路由跳转的查询数据缓存。<br>页面中调用方法代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CacheQuery <span class="keyword">from</span><span class="string">'../mixins/queryCache'</span><span class="comment">// 具体路径按项目实际路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    reutrn &#123;</span><br><span class="line"><span class="comment">// 查询表单数据对象</span></span><br><span class="line">      params: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="comment">// 获取vuex中的缓存，赋值</span></span><br><span class="line"><span class="keyword">this</span>.getSearchQuery(<span class="string">'params'</span>)</span><br><span class="line"><span class="comment">// 然后按缓存的参数查询</span></span><br><span class="line"><span class="keyword">this</span>.getList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="comment">// 搜索点击事件监听</span></span><br><span class="line">    handleSearch() &#123;</span><br><span class="line"><span class="comment">// 缓存搜索参数</span></span><br><span class="line"><span class="keyword">this</span>.setSearchQuery(<span class="string">'params'</span>)</span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="keyword">this</span>.getList()</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="keyword">async</span> getList() &#123;</span><br><span class="line"><span class="comment">// 获取数据发送请求</span></span><br><span class="line"><span class="keyword">let</span> resp = <span class="keyword">await</span> axios.get(<span class="string">'/api/get/list'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果要缓存分页参数，可能会发现一个问题。示例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询参数对象:</span></span><br><span class="line">searchParams: &#123;</span><br><span class="line">  id: <span class="string">''</span>,</span><br><span class="line">  title: <span class="string">''</span>,</span><br><span class="line">  status: <span class="string">''</span>,</span><br><span class="line">  current_page: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">  page_size: <span class="number">10</span>， <span class="comment">// 每页多少数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分页组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag"><span class="attr">:total</span>=<span class="string">"page.total"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:current-page</span>=<span class="string">"searchParams.page_index"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">"handleCurrentChange"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果查询参数中包含了分页组件中的两个参数，在调用了<code>getSearchQuery</code>方法对其进行赋值之后，即便发送请求时的<code>current_page</code>是2，<code>el-pagination</code>组件中显示的仍然是在页面的<code>data</code>中初始化时的默认值，研究了element分页组件的源码，发现其改变<code>current-page</code>只能通过监听<code>current-change</code>来实现，而在上文中缓存了数据之后直接赋值是无法实现响应的, 如下图:</p><p><img style="height: 200px; text-align: left" src="https://camo.githubusercontent.com/4374fd8950b1b788fe9642b70b36e9e9ef2b7627/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f363731393838352d373435666433626362366637306337302e706e673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430"></p><p>分享告一段落啦，如果您有其他的实现方式可以留言交流啊，感谢！</p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> vue </tag><tag> element </tag></tags></entry><entry><title>pynongo使用笔记</title><link href="/pynongo-notes.html"/><url>/pynongo-notes.html</url><content type="html"><![CDATA[<p>前段时间学习了python爬虫，然后爬取了必应壁纸、拉钩、小红唇视频和评论等，其中也使用了mongodb数据库存储数据。</p><p>工作电脑和家里电脑都实现了壁纸每分钟实时更新，海量的背景图片，基本不重复，每天中午休息时喜欢盯着屏幕发呆，哈哈😁。其中除了用到的除了基本的爬虫至少，还有pymongo将爬取的数据存储到数据库，不会因为官方更新而丢失早期的图片信息，也用到了shell脚本和crontab定时任务，每周一中午定时爬取，然后下载图片，非常nice啊。<br><a id="more"></a><br>更多脚本可以去<a href="https://github.com/mhy-web/python_demo" target="_blank" rel="noopener">github</a>看到，自动执行的shell脚本为项目目录下的 <code>wallpaper.sh</code>文件。</p><p>这里记录一下pymongo使用笔记，避免下次使用时再去找文档。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入pymongo</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">client = pymongo.Conection(<span class="string">'127.0.0.1'</span>, <span class="number">27017</span>)</span><br><span class="line">client = pymongo.Conection(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">db = client.bing</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">db = client[<span class="string">'bing'</span>]</span><br><span class="line"><span class="comment"># 其中的`bing`是所创建的数据库的名称。</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">dbName = <span class="string">'xhc'</span></span><br><span class="line">db = client[dbName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接集合</span></span><br><span class="line">collection = db.video</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">collection = db[<span class="string">'video'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全部集合名称</span></span><br><span class="line">db.collection_names()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找集合的记录</span></span><br><span class="line">db.bing.find()</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> db.test.find():</span><br><span class="line">  print(doc)</span><br><span class="line">db.bing.find_one(&#123;x: <span class="number">1</span>&#125;)</span><br><span class="line">db.bing.find_mangy(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.bing.count_document(&#123;x: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.bing.insert_one(&#123;x: <span class="number">1</span>&#125;)</span><br><span class="line">db.bing.insert_many([&#123;<span class="string">'x'</span>: i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">db.bing.replace_one(&#123;x: <span class="number">1</span>&#125;, &#123;y: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line"><span class="comment"># update 后面的操作符同 mongodb 原生的操作符</span></span><br><span class="line">db.bing.update_one(&#123;x: <span class="number">1</span>&#125;, &#123;<span class="string">'$inc'</span>: &#123;x: <span class="number">3</span>&#125;&#125;)</span><br><span class="line">db.bing.find_one_and_update(&#123;<span class="string">'_id'</span>: <span class="number">665</span>&#125;, &#123;<span class="string">'$inc'</span>: &#123;<span class="string">'count'</span>: <span class="number">1</span>&#125;, <span class="string">'$set'</span>: &#123;<span class="string">'done'</span>: <span class="literal">True</span>&#125;&#125;)</span><br><span class="line">db.bing.find_one_and_update(&#123;<span class="string">'_exists'</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">'$inc'</span>: &#123;<span class="string">'count'</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">db.bing.find_one_and_update(</span><br><span class="line">  &#123; <span class="string">'_id'</span>: <span class="string">'userid'</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'$inc'</span>: &#123;<span class="string">'seq'</span>: <span class="number">1</span>&#125;&#125;,</span><br><span class="line">  projection=&#123;<span class="string">'seq'</span>: <span class="literal">True</span>, <span class="string">'_id'</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">  upsert=<span class="literal">True</span>,</span><br><span class="line">  return_document=ReturnDocument.AFTER</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">db.bing.delete_one(&#123;x: <span class="number">1</span>&#125;)</span><br><span class="line">db.bing.delete_many(&#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">db.bing.find_one_and_delete(&#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">db.bing.find_one_and_delete(&#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;, sort=[(<span class="string">'_id'</span>, pymongo.DESCENDING)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建索引</span></span><br><span class="line">db.bing.create_index(<span class="string">"mike"</span>)</span><br></pre></td></tr></table></figure></p><p>更多内容可以参考官方文档。<br>参考文档： <a href="http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_one" target="_blank" rel="noopener">http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_one</a></p>]]></content><categories><category> 后端 </category></categories><tags><tag> python </tag><tag> mongodb </tag></tags></entry><entry><title>elementUI表单使用自定义组件并获取子组件验证</title><link href="/elementUI-component-validate.html"/><url>/elementUI-component-validate.html</url><content type="html"><![CDATA[<p>最近工作中很多次遇到一种情况，表单元素中某个字段是对象组成的数组，需要使用自定义组件来遍历数组，每个数组元素对象中的许多字段需要单独封装成自定义组件，在父组件中使用<code>v-model</code>方式来实现响应式的调用。这样做的好处是可以利于组件独立运行环境的特性，有效的区分了父组件表单中数组字段下各个对象的独立。<br><a id="more"></a></p><p>假如父组件中的表单数据是这种格式的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">      info: &#123;</span><br><span class="line"><span class="actionscript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        start_time: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        end_time: <span class="string">''</span>,</span></span><br><span class="line">        items: [&#123;</span><br><span class="line"><span class="actionscript">          title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          img_url: <span class="string">''</span></span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line"><span class="actionscript">          title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          img_url: <span class="string">''</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>要使用elementUI的 <code>form</code>组件来实现表单的数据渲染，其中items部分最合理的方式是抽离出单独的组件，在父组件中遍历该数组字段，每一项单独渲染该子组件。</p><h2 id="子组件定义"><a href="#子组件定义" class="headerlink" title="子组件定义"></a>子组件定义</h2><p>假设子组件这样定义：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span><span class="attr">ref</span>=<span class="string">"item"</span><span class="attr">:model</span>=<span class="string">"content"</span><span class="attr">:rules</span>=<span class="string">"rules"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"title"</span><span class="attr">label</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"content.title"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"desc"</span><span class="attr">label</span>=<span class="string">"desc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"content.desc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"type"</span><span class="attr">label</span>=<span class="string">"type"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"content.type"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"img_url"</span><span class="attr">label</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"content.img_url"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'Child'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript"><span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            img_url: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    index: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript"><span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">      content: &#123; ...this.value &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line"><span class="actionscript">        title: [&#123;required: <span class="literal">true</span>, trigger: <span class="string">'blur'</span>&#125;],</span></span><br><span class="line"><span class="actionscript">        desc: [&#123;required: <span class="literal">true</span>, trigger: <span class="string">'blur'</span>&#125;],</span></span><br><span class="line"><span class="actionscript">        type: [&#123;required: <span class="literal">true</span>, trigger: <span class="string">'blur'</span>&#125;],</span></span><br><span class="line"><span class="actionscript">        img_url: [&#123;required: <span class="literal">true</span>, trigger: <span class="string">'blur'</span>&#125;],</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 定义该变量是为了便于监听对象的变化，特别是多层嵌套的对象非常有效</span></span></span><br><span class="line">    contentStr() &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">return</span><span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.content)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 监听对象每个字段的改变，另一种方法是使用deep属性，具体可以查阅vue文档</span></span></span><br><span class="line">    contentStr(value) &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.update()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    update() &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// input 事件父组件可以监听到，具体下文会介绍，这里是把子组件的变更通过事件告诉父组件，实现子组件向父组件的数据传递</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.content)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    formValidate() &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">let</span> flag = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$refs[<span class="string">'item'</span>].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span></span><br><span class="line">        flag = valid</span><br><span class="line"><span class="actionscript"><span class="comment">// 如果需要进行信息提示</span></span></span><br><span class="line">        if (!valid) &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$message(<span class="string">`第<span class="subst">$&#123;index&#125;</span>条数据未填写完!`</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> flag</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>自定义组件中props中的value属性是vue默认的，可以接收调用时绑定在<code>v-model</code>上的属性，子组件中给<code>value</code>设置默认值可以避免一些初始化时缺少字段的报错。<br>为了让<code>v-model</code>正常工作，这个组件内必须：</p><ul><li>将其<code>value</code>特性绑定到一个名为<code>value</code>的prop上</li><li>将其<code>input</code>事件触发时，将新的值通过自定义的<code>input</code>事件抛出<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">v-bind:value</span>=<span class="string">"title"</span><span class="attr">v-on:input</span>=<span class="string">"title = $event.target.value"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>子组件需要实时的把数据的变化告诉父组件，所以需要wath数据的变化，如果传给子组件的数据只是简单的对象类型，即对象的字段都是简单类型，可以直接使用vue中watch的高级用法，<br>定义handler方法，使用immediaate和deep属性，具体可以参考<a href="https://juejin.im/post/5ae91fa76fb9a07aa7677543" target="_blank" rel="noopener">Vue.js中 watch 的高级用法</a>,更标准的使用方式可以查阅官方文档。在本文例子中可以这样使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    content:&#123;</span><br><span class="line">      handler(newVal, oldVal) &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.content)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span><span class="comment">// deep属性默认为false, 表示十分深度监听</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>介绍完了子组件中数据的处理，接下来说一下父组件中如何使用。</p><h2 id="父组件调用自定义组件"><a href="#父组件调用自定义组件" class="headerlink" title="父组件调用自定义组件"></a>父组件调用自定义组件</h2><p>前面已经定义了自定义组件，可以支持数据的双向绑定，父组件调用自定义子组件时可以像elementUI中的表单组件一样使用，示例如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span><span class="attr">:model</span>=<span class="string">"info"</span><span class="attr">ref</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为简化类型，这里无关的字段都使用el-input --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"start_time"</span><span class="attr">lable</span>=<span class="string">"start time"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"info.start_time"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"end_time"</span><span class="attr">lable</span>=<span class="string">"end time"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span><span class="attr">v-model</span>=<span class="string">"info.end_time"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组，循环调用自定义子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">v-for</span>=<span class="string">"(content, index) in info.items"</span><span class="attr">v-show</span>=<span class="string">"(currentIndex - 1) === index"</span><span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span><span class="attr">prop</span>=<span class="string">"item"</span><span class="attr">lable</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">st-item</span><span class="attr">v-model</span>=<span class="string">"info.items[index]"</span><span class="attr">:index</span>=<span class="string">"index"</span><span class="attr">:ref</span>=<span class="string">"index + '_item'"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Item <span class="keyword">from</span><span class="string">'./item.vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'Parents'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript"><span class="string">'st-item'</span>: Item</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      currentIndex: <span class="number">0</span>, <span class="comment">// 控制显示当前的是哪个item</span></span></span><br><span class="line">      info: &#123;</span><br><span class="line"><span class="actionscript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        start_time: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        end_time: <span class="string">''</span>,</span></span><br><span class="line">        items: [&#123;</span><br><span class="line"><span class="actionscript">          title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          img_url: <span class="string">''</span></span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line"><span class="actionscript">          title: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          desc: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          img_url: <span class="string">''</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="子组件表单验证"><a href="#子组件表单验证" class="headerlink" title="子组件表单验证"></a>子组件表单验证</h3><p>接下来说如何在父组件提交数据时验证子组件的是否已通过验证。<br>刚才子组件中定义了一个方法 <code>formValidate</code>, 该方法会将子组件的验证结果返回，在父组件中调用该方法即可获得子组件的验证结果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  submit() &#123;</span><br><span class="line"><span class="comment">// 调用子组件验证，验证结果赋值给isValid变量</span></span><br><span class="line"><span class="keyword">let</span> isValid = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.info.item).every(<span class="function"><span class="params">key</span> =&gt;</span><span class="keyword">this</span>.$refs[key + <span class="string">'_item'</span>].formValidate())</span><br><span class="line"><span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line"><span class="keyword">return</span><span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考文献： <a href="https://blog.csdn.net/ligang2585116/article/details/79475652" target="_blank" rel="noopener">https://blog.csdn.net/ligang2585116/article/details/79475652</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> vue </tag><tag> element </tag></tags></entry><entry><title>linux学习笔记(5)</title><link href="/linux-note-5.html"/><url>/linux-note-5.html</url><content type="html"><![CDATA[<h2 id="at-一次性定时任务"><a href="#at-一次性定时任务" class="headerlink" title="at 一次性定时任务"></a>at 一次性定时任务</h2><p>at服务是否安装</p><blockquote><p>chkconfig –list | grep atd</p></blockquote><p>at服务重启</p><blockquote><p>service atd restart</p></blockquote><p>at的访问控制</p><blockquote><p>/etc/at.allow 白名单<br>/etc/at.deny 黑名单 （对root不起作用）</p></blockquote><p>白名单比黑名单优先级高。<br>如果这两个文件都不存在，那么只有root用户可以使用at命令<br><a id="more"></a></p><p>at使用方法:</p><blockquote><p>at [选项] 时间</p></blockquote><p>选项：</p><ul><li>-m: 当at工作完成后，无论是否命令有输出，都用email通知执行at命令的用户</li><li>-c：工作号：显示该at工作的实际内容</li></ul><p>时间：<br>HH:MM  03:23<br>HH:MM: YYYY-MM=DD 02:32 2018-09-21<br>…</p><p>eg:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在2分钟后执行脚本hello.sh</span></span><br><span class="line">at now +2 minutes</span><br><span class="line">at &gt; /home/mhy/work/hello.sh &gt;&gt; /home/mhy/work/log_hello.log</span><br></pre></td></tr></table></figure></p><blockquote><p>atq #查询当前服务器上的at工作、</p></blockquote><blockquote><p>atrm [工作号] # 删除指定的at任务</p></blockquote><h2 id="crontab-循环定时任务"><a href="#crontab-循环定时任务" class="headerlink" title="crontab 循环定时任务"></a>crontab 循环定时任务</h2><h3 id="crond服务"><a href="#crond服务" class="headerlink" title="crond服务"></a>crond服务</h3><ul><li>操作crond服务<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /sbin/service</span></span><br><span class="line">service crond start <span class="comment">#启动服务</span></span><br><span class="line">service crond stop <span class="comment">#关闭服务</span></span><br><span class="line">service crond restart <span class="comment">#重启服务</span></span><br><span class="line">service crond reload <span class="comment">#重新载入配置</span></span><br><span class="line">service crond stats <span class="comment"># 查看crontab服务状态</span></span><br></pre></td></tr></table></figure></li></ul><p>操作crond服务需要root权限</p><ul><li><p>查看crond服务是否在运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep cron</span><br></pre></td></tr></table></figure></li><li><p>加入开机自动启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看crond服务是否已设置为开机启动</span></span><br><span class="line">ntsysv</span><br><span class="line"><span class="comment"># 加入开机自动启动</span></span><br><span class="line">chkconfig --level 35 crond on</span><br></pre></td></tr></table></figure></li></ul><h3 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a>crontab 命令</h3><blockquote><p>crontab [选项] (参数)</p></blockquote><p>选项：</p><ul><li>-e: 编辑当前用户crontab定时任务</li><li>-l: 查询当前用户crontab定时任务</li><li>-r: 删除当前用户所有的crontab定时任务</li><li>-u&lt;用户名&gt;: 指定要设定时任务的用户名称</li></ul><p>参数：</p><ul><li>crontab文件： 指定包含待执行任务的crontab文件</li></ul><p>绑定当前登录用户，要确保没有超出当前用户权限。</p><p>linux下的任务调度分为两类：系统任务调度和用户任务调度。<br><strong>注意</strong>: 因为用户的定时任务是和用户绑定的，所有使用<code>crontab -e</code>来设置，系统定时任务(root权限)是编辑<code>/etc/crontab</code>来设置的， 而且必须指定用户。</p><h3 id="系统任务调度"><a href="#系统任务调度" class="headerlink" title="系统任务调度"></a>系统任务调度</h3><p>系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在<code>/etc</code>目录下有个crontab文件，这个就是系统任务调度的配置文件。<br><code>/etc/crontab</code>默认有以下内容：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure></p><p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。<br>通过/etc/crontab配置文件来设置定时任务是比较好的方式。</p><ul><li>执行系统的定时任务的方法有两种：</li></ul><ol><li>把需要定时执行的脚步复制到<code>/etc/cron.{daily,weekly,montyly}</code>目录的任意一个</li><li>修改<code>/etc/crontab</code>配置文件</li></ol><h3 id="用户任务调度"><a href="#用户任务调度" class="headerlink" title="用户任务调度"></a>用户任务调度</h3><p>用户定期执行的工作，比如数据备份、定时邮件提醒等。 用户可以使用crontab工具来定制自己的计划任务。所有永不定义crontab文件都保存在<code>/var/spool/cron</code>目录中。其文件名与用户名一致，使用者权限文件如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>cron.deny 该文件中所有用户不允许使用crontab命令（黑名单）</span><br><span class="line"><span class="regexp">/etc/</span>cron.allow 该文件中所列用户允许使用crontab命令 （白名单）</span><br><span class="line"><span class="regexp">/etc/</span>spool<span class="regexp">/cron/</span> 所有用户crontab文件存放的目录，以用户名命名</span><br></pre></td></tr></table></figure></p><p><strong>白名单比黑名单优先级高</strong>， 白名单的用户一定有权限，黑名单的用户如果在白名单，则有权限；如果黑名单的用户不在白名单，则没有权限。<br>所以只需要把需要限制权限的用户加入到黑名单就可以了，白名单不需要单独添加用户，除了优先级外，有权限的用户一般都比限制权限的用户多，加黑名单比较方便。</p><h3 id="crontab文件的含义"><a href="#crontab文件的含义" class="headerlink" title="crontab文件的含义"></a>crontab文件的含义</h3><p>用户所建立的crontab文件中，每一行都代表一条任务，每行的每个字段代表一项设置，它的格式一共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * [执行的任务]</span><br></pre></td></tr></table></figure></p><p>顺序： <code>miniute hour day month week command</code><br>其中：</p><ul><li>minute:  一小时当中的第几分钟, 范围0-59之间的任意整数</li><li>hour: 一天当中的第几个小时, 范围是0-23之间的任意整数</li><li>day: 一个月当中的第几天, 范围是1-31之间的任意整数</li><li>month: 一年当中的第几个月, 范围是1-12之间的任意整数</li><li>week: 一周当中的星期几, 范围是0-7(0和7都代表星期日)之间的任意整数</li><li>command: 要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</li></ul><p>以上各个字段中， 还可以使用以下特殊字符：</p><ul><li>星号<code>*</code>: 代表所有可能的值，比如minute字段为<code>*</code>代表每分钟执行一次</li><li>逗号<code>,</code>: 逗号隔开的值指定一个列表范围，比如: <code>1,2,3,5,6</code>,列表中的每个时间点执行一次</li><li>中杠<code>-</code>: 可以用整数之间的中杠表示一个整数范围，如：<code>2-5</code>表示<code>2,3,4,5</code></li><li>正斜线<code>/</code>: 正斜线指定时间的间隔频率， 如<code>0-23/2</code>表示每两个小时执行一次，minute字段的<code>*/10</code>表示每十分钟执行一次</li></ul><p><strong>使用以下命令设置定时任务:</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment">#进入crontab编辑界面。会打开vim编辑，按刚才的格式设置定时任务</span></span><br></pre></td></tr></table></figure></p><p>crontab定时任务实例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">command</span><span class="comment"># 每一分钟执行一次</span></span><br><span class="line">3,15 * * * * <span class="built_in">command</span><span class="comment"># 每小时内在第3和第5分钟执行</span></span><br><span class="line">3,15 8-11 * * * <span class="built_in">command</span><span class="comment"># 上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">3，15 8-11 */2 * * <span class="built_in">command</span><span class="comment">#每隔两天的上午8点到11点的第3和第5分钟执行</span></span><br><span class="line">3，15 8-11 * * 1 <span class="built_in">command</span><span class="comment">#每个星期一的上午8点到11点的第3和第5分钟执行</span></span><br><span class="line">30 21 * * * service /etc/init.d/smb restart <span class="comment">#每晚的21:30重启smb</span></span><br><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart  <span class="comment">#每月的1、10、22日重启smb</span></span><br><span class="line">30 4 * * 6,7 /etc/init.d/nginx restart <span class="comment">#没周六日的4:30重启nginx</span></span><br><span class="line">0,30 18-23 * * *  /etc/init.d/nginx restart  <span class="comment">#每天18:00至23:00之间每隔30分钟重启nginx, 注意，minute的范围是0-59，每隔30分钟的写法*/30和0,30的区别</span></span><br><span class="line">0 23 * * 6 /etc/init.d/nginx restart <span class="comment">#每周六晚11:00重启nginx</span></span><br><span class="line">0 */1 * * * /etc/init.d/nginx restart <span class="comment">#每一小时重启nginx</span></span><br><span class="line">0 23-7 * * * /etc /init.d/nginx restart <span class="comment">#晚上11点到早上7点之间，每隔一小时重启nginx</span></span><br><span class="line">0 11 4 * 1-3 /etc/init.d/nginx restart <span class="comment">#每月的4号与每周一到周三的11点重启nginx</span></span><br><span class="line">0 * * * * root run-parts /etc/cron.hourly <span class="comment">#每小时执行/etc/cron.hourly目录内的脚本</span></span><br></pre></td></tr></table></figure></p><p>其他命令：</p><blockquote><p>crontab -l # 查询crontab任务</p></blockquote><blockquote><p>crontab -r # 清除当前用户的所有crontab任务</p></blockquote><p>注意事项：</p><ul><li>六个选项都不能为空，必须填写，如果不确定使，用<code>*</code>代替任意时间</li><li>crontab定时任务，最小有效时间是分钟，最大时间范围是月</li><li>在定义时间时，日期和星期最好不要在一条定时任务中出现，因为他们都是以天为单位，不利于管理员管理</li><li>在定时任务中，不管是直接写命令，还是在脚本中写命令，最好都用绝对路径</li></ul><h2 id="anacron配置"><a href="#anacron配置" class="headerlink" title="anacron配置"></a>anacron配置</h2><p>anacron会自动执行因为关机等故障没有执行的定时任务，只会检测<code>/etc/cron.{daily,weekly,montyly}</code>目录，而不会检测<code>crontab -e</code>设置的定时任务</p><h3 id="anacron检测周期"><a href="#anacron检测周期" class="headerlink" title="anacron检测周期"></a>anacron检测周期</h3><ul><li>anacron会使用一天，七天，一个月作为检测周期</li><li>在系统的<code>/var/spool/anacron</code>目录中存在<code>cron.{daily,weekly,montyly}</code>文件，用于记录上次执行crontab的时间</li><li>和当前时间做比较，如果两个时间的差值超过了anacron的指定时间差值，证明有cron任务呗漏执行</li></ul><h4 id="etc-anacrontab配置文件"><a href="#etc-anacrontab配置文件" class="headerlink" title="/etc/anacrontab配置文件"></a><code>/etc/anacrontab</code>配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/anacrontab: configuration file for anacron</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See anacron(8) and anacrontab(5) for details.</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"><span class="comment"># the maximal random delay added to the base delay of the jobs</span></span><br><span class="line">RANDOM_DELAY=45</span><br><span class="line"><span class="comment"># the jobs will be started during the following hours only</span></span><br><span class="line">START_HOURS_RANGE=3-22</span><br><span class="line"></span><br><span class="line"><span class="comment">#period in days   delay in minutes   job-identifier   command</span></span><br><span class="line">1   5   cron.daily      nice run-parts /etc/cron.daily</span><br><span class="line">7   25  cron.weekly     nice run-parts /etc/cron.weekly</span><br><span class="line">@monthly 45 cron.monthly        nice run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure><h4 id="cron-daily工作执行过程"><a href="#cron-daily工作执行过程" class="headerlink" title="cron.daily工作执行过程"></a>cron.daily工作执行过程</h4><ul><li>首先读取<code>/var/spool/anacron/cron.daily</code>中的上一次anacron执行的时间</li><li>和当前时间做比较，如果两个时间的差值超过一天，就执行cron.daily工作</li><li>执行这个工作只能在03:00-22:00之间</li><li>执行工作时强制延迟时间为5分钟，再随机延迟0-45分钟时间</li><li>使用<code>nice</code>命令指定默认优先级，使用<code>run-parts</code>脚本执行<code>/etc/cron.daily</code>目录中的所有可执行文件</li></ul><h3 id="crontab实例"><a href="#crontab实例" class="headerlink" title="crontab实例"></a>crontab实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查crond服务是否安装</span></span><br><span class="line">yum list cronie &amp;&amp; systemctl status crond</span><br><span class="line"><span class="comment"># 检查crontab工具是否安装</span></span><br><span class="line">yum list crontabs &amp;&amp; <span class="built_in">which</span> crontab &amp;&amp; crontab -l</span><br></pre></td></tr></table></figure><p><em>systemctl 是类似service的一个命令，可以代替</em></p><ul><li>cron日志<br>cron日志保存在<code>/var/log/cron</code><br>查看日志：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 2 /var/<span class="built_in">log</span>/cron</span><br></pre></td></tr></table></figure></li></ul><p>清理日志系统<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定时任务清理日志</span></span><br><span class="line">/dev/null &gt; /var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure></p>]]></content><categories><category> 后端 </category></categories><tags><tag> linux </tag><tag> bash </tag><tag> crontab </tag></tags></entry><entry><title>[转载]mongodb常用查询语句</title><link href="/mongodb-searchs.html"/><url>/mongodb-searchs.html</url><content type="html"><![CDATA[<p>记录一下MongoDB常用语句，顺带与SQL做个简单的对比。</p><a id="more"></a><p>1、查询(find)</p><p>（1）查询所有结果<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article</span><br><span class="line">db.article.<span class="builtin-name">find</span>()</span><br></pre></td></tr></table></figure></p><p>（2）指定返回哪些键<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select title, author <span class="keyword">from</span> article</span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;&#125;, &#123;<span class="string">"title"</span>: 1, <span class="string">"author"</span>: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>（3）where条件<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> title = <span class="string">"mongodb"</span></span><br><span class="line">db.article.find(&#123;<span class="string">"title"</span>: <span class="string">"mongodb"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>（4）and条件<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> title = <span class="string">"mongodb"</span> and author = <span class="string">"god"</span></span><br><span class="line">db.article.find(&#123;<span class="string">"title"</span>: <span class="string">"mongodb"</span>, <span class="string">"author"</span>: <span class="string">"god"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>（5）or条件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article where title = <span class="string">"mongodb"</span><span class="keyword">or</span> author = <span class="string">"god"</span></span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"<span class="variable">$or</span>"</span>: [&#123;<span class="string">"title"</span>: <span class="string">"mongodb"</span>&#125;, &#123;<span class="string">"author"</span>: <span class="string">"god"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>（6）比较条件<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span><span class="keyword">read</span> &gt;= <span class="number">100</span>;</span><br><span class="line">db.article.find(&#123;"read": &#123;"$gt": <span class="number">100</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>$gt(&gt;)、$gte(&gt;=)、$lt(&lt;)、$lte(&lt;=)<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span><span class="keyword">read</span> &gt;= <span class="number">100</span><span class="keyword">and</span><span class="keyword">read</span> &lt;= <span class="number">200</span></span><br><span class="line">db.article.find(&#123;"read": &#123;"$gte": <span class="number">100</span>, "lte": <span class="number">200</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>（7）in条件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article where author <span class="keyword">in</span> (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"author"</span>: &#123;<span class="string">"<span class="variable">$in</span>"</span>: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>（8）like<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> title <span class="keyword">like</span> "%mongodb%"</span><br><span class="line">db.article.find(&#123;"title": /mongodb/&#125;)</span><br></pre></td></tr></table></figure></p><p>（9）count<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="built_in">count</span>(*) <span class="keyword">from</span> article</span><br><span class="line">db.article.<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure></p><p>（10）不等于<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article where author != <span class="string">"a"</span></span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123; <span class="string">"author"</span>: &#123; <span class="string">"<span class="variable">$ne</span>"</span>: <span class="string">"a"</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>（11）排序<br>升序：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article where<span class="built_in"> type </span>= <span class="string">"mongodb"</span> order by read desc</span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"type"</span>: <span class="string">"mongodb"</span>&#125;).sort(&#123;<span class="string">"read"</span>: -1&#125;)</span><br></pre></td></tr></table></figure></p><p>降序：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article where<span class="built_in"> type </span>= <span class="string">"mongodb"</span> order by read asc</span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"type"</span>: <span class="string">"mongodb"</span>&#125;).sort(&#123;<span class="string">"read"</span>: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>findOne()：除了只返回一个查询结果外，使用方法与find()一样。<br>2、创建（insert）<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span><span class="keyword">into</span> article(title, author, content) <span class="keyword">values</span>("mongodb", "tg", "haha")</span><br><span class="line">db.article.<span class="keyword">insert</span>(&#123;"title": "mongodb", "author": "tg", "content": "haha"&#125;)</span><br></pre></td></tr></table></figure></p><p>3、更新（update）</p><p>（1）update()</p><p>语法：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.collecion.<span class="keyword">update</span>(<span class="keyword">query</span>, <span class="keyword">update</span>[, options] )</span><br></pre></td></tr></table></figure></p><p>query : 必选，查询条件，类似find中的查询条件。<br>update : 必选，update的对象和一些更新的操作符（如$,$inc…）等<br>options：可选，一些更新配置的对象。<br>upsert：可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。<br>multi：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。<br>writeConcern：可选，抛出异常的级别。</p><p>简单更新：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update article <span class="built_in">set</span> title = <span class="string">"mongodb"</span><span class="built_in">where</span><span class="built_in">read</span> &gt; 100</span><br><span class="line">db.article.update(&#123;<span class="string">"read"</span>: &#123;<span class="string">"<span class="variable">$gt</span>"</span>: 100&#125;&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>: &#123; <span class="string">"title"</span>: <span class="string">"mongodb"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>（2）save()<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.save</span>(&#123;<span class="attribute">_id</span>: <span class="number">123</span>, title: <span class="string">"mongodb"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>执行上面的语句，如果集合中已经存在一个_id为123的文档，则更新对应字段;否则插入。</p><p>注：如果更新对象不存在_id，系统会自动生成并作为新的文档插入。</p><p>（3）更新操作符</p><p>MongoDB提供一些强大的更新操作符。</p><p>更新特定字段（$set）：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> game <span class="built_in">set</span><span class="built_in">count</span> = <span class="number">10000</span><span class="built_in">where</span> _id = <span class="number">123</span></span><br><span class="line">db.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: <span class="number">123</span>&#125;, &#123; <span class="string">"$set"</span>: &#123;<span class="string">"count"</span>: <span class="number">10000</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>删除特定字段（$unset）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>:123&#125;, &#123;<span class="string">"$unset"</span>: &#123;<span class="string">"author"</span>:1&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>注：$unset指定字段的值只需是任意合法值即可。</p><p>递增或递减（$inc）<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123; <span class="string">"$inc"</span>: &#123;<span class="string">"count"</span>: 10&#125;&#125;) <span class="comment">// 每次count都加10</span></span><br></pre></td></tr></table></figure></p><p>注意：$inc对应的字段必须是数字，而且递增或递减的值也必须是数字。</p><p>数组追加（$push）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123; <span class="string">"$push"</span>: &#123;<span class="string">"score"</span>: 123&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>还可以一次追加多个元素：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$push"</span>: &#123;<span class="string">"score"</span>: [12,123]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>注：追加字段必须是数组。如果数组字段不存在，则自动新增，然后追加。</p><p>一次追加多个元素（$pushAll）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$pushAll"</span>: &#123;<span class="string">"score"</span>: [12,123]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>追加不重复元素（$addToSet）：<br>$addToSet类似集合Set，只有当这个值不在元素内时才增加：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$addToSet"</span>: &#123;<span class="string">"score"</span>: 123&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>删除元素（$pop）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$pop"</span>: &#123;<span class="string">"score"</span>: 1&#125;&#125;)  <span class="comment">// 删除最后一个元素</span></span><br><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$pop"</span>: &#123;<span class="string">"score"</span>: -1&#125;&#125;)  <span class="comment">// 删除第一个元素</span></span><br></pre></td></tr></table></figure></p><p>注：$pop每次只能删除数组中的一个元素，1表示删除最后一个，-1表示删除第一个。</p><p>删除特定元素（$pull）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$pull"</span>: &#123;<span class="string">"score"</span>: 123&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>上面的语句表示删除数组score内值等于123的元素。</p><p>删除多个特定元素（$pullAll）：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: 123&#125;, &#123;<span class="string">"$pullAll"</span>: &#123;<span class="keyword">score</span>: [123,12]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>上面的语句表示删除数组内值等于123或12的元素。</p><p>更新嵌套数组的值：</p><p>使用数组下标（从0开始）：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  addres<span class="variable">s:</span> [&#123;place: <span class="string">"nanji"</span>, <span class="keyword">te</span><span class="variable">l:</span><span class="number">123</span>&#125;, &#123;place: <span class="string">"dongbei"</span>, <span class="keyword">te</span><span class="variable">l:</span><span class="number">321</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line">db.game.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span>: <span class="number">123</span>&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"address.0.tel"</span>: <span class="number">213</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>如果你不知道要更新数组哪项，我们可以使用$操作符（ $表示自身，也就是按查询条件找出的数组里面的项自身，而且只会应用找到的第一条数组项）：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.game.update(&#123;<span class="string">"address.place"</span>: <span class="string">"nanji"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>: &#123;<span class="string">"address.<span class="variable">$</span>.tel"</span>: <span class="number">123</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>在上面的语句中，$就是查询条件<code>{&quot;address.place&quot;: &quot;nanji&quot;}</code>的查询结果，也就是<code>{place: &quot;nanji&quot;, tel: 123}</code>，所以<code>{&quot;address.$.tel&quot;: 123}</code>也就是<code>{&quot;address.{place: &quot;nanji&quot;, tel: 123}.tel&quot;: 123}</code></p><p>4、删除（remove）<br>删除所有文档：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete <span class="keyword">from</span> article</span><br><span class="line">db.article.<span class="builtin-name">remove</span>()</span><br></pre></td></tr></table></figure></p><p>删除指定文档：<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">delete</span><span class="meta">from</span> article <span class="meta">where</span><span class="meta">title</span> = <span class="string">"mongodb"</span></span><br><span class="line">db.article.<span class="meta">remove</span>(&#123;<span class="meta">title</span>: <span class="string">"mongodb"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>MongoDB特有的语句</p><ol><li>数组查询<br>（1）数组的普通查询<br>假如type是[“mongodb”, “javascript”]：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"type"</span>: <span class="string">"mongodb"</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>上面的语句可以匹配成功。</p><p>（2）多个元素的查询<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"type"</span>: &#123;<span class="string">"<span class="variable">$all</span>"</span>: [<span class="string">"mongodb"</span>, <span class="string">"javascript"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>只有type数组同时存在mongodb和javascript才会匹配。</p><p>（3）限制数组长度查询<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"type"</span>: &#123;<span class="string">"<span class="variable">$size</span>"</span>: 2&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>只有数组的长度是2才会匹配</p><p>注：type必须是数组</p><p>（4）返回特定数量</p><p>当$slice的参数是一个时，表示返回的数量;当是一个数组时，第一个参数表示偏移量，第二个表示返回的数量：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="built_in">find</span>(&#123;<span class="string">"type"</span>: &#123;<span class="string">"$slice"</span>: <span class="number">1</span>&#125;&#125;) <span class="comment">// 返回第1个</span></span><br><span class="line">db.article.<span class="built_in">find</span>(&#123;<span class="string">"type"</span>: &#123;<span class="string">"$slice"</span>: <span class="number">-1</span>&#125;&#125;)  <span class="comment">// 返回最后一个</span></span><br><span class="line">db.article.<span class="built_in">find</span>(&#123;<span class="string">"type"</span>: &#123;<span class="string">"$slice"</span>: [<span class="number">20</span>, <span class="number">10</span>]&#125;&#125;)  <span class="comment">// 从第21个开始，返回10个，也就是21～30</span></span><br></pre></td></tr></table></figure></p><p>注：$slice针对的是数组</p><p>（5）元素匹配</p><p>如果文档中有一个字段的值是数组，可以使用$elemMatch来匹配数组内的元素：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">kown:</span><span class="string">[&#123;</span><span class="attr">a:</span><span class="number">2</span><span class="string">,</span><span class="attr">b:</span><span class="number">4</span><span class="string">&#125;,</span><span class="number">10</span><span class="string">,</span><span class="string">&#123;</span><span class="attr">a:</span><span class="number">4</span><span class="string">&#125;,</span><span class="string">&#123;b:10&#125;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">db.article.find(&#123;"kown":</span><span class="string">&#123;</span><span class="string">"$elemMatch"</span><span class="string">:</span><span class="string">&#123;a:</span><span class="number">1</span><span class="string">,</span><span class="attr">b:</span><span class="string">&#123;"$gt":</span><span class="number">2</span><span class="string">&#125;&#125;&#125;&#125;)</span></span><br></pre></td></tr></table></figure></p><p>只有a=1且b&gt;2才会匹配。</p><ol start="2"><li><p>取模（$mod）<br>比如我们要匹配 read % 5 == 1：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"read"</span>: &#123;<span class="variable">$mod</span>: [5, 1]&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>是否存在（$exists)<br>如果我们要判断love字段是否存在，可以这样：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="built_in">find</span>(&#123;<span class="string">"love"</span>: &#123;<span class="string">"$exists"</span>: <span class="literal">true</span>&#125;&#125;)  <span class="comment">// 如果存在字段love，就返回</span></span><br></pre></td></tr></table></figure></li></ol><p>我们也可以判断不存在：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="built_in">find</span>(&#123;<span class="string">"love"</span>: &#123;<span class="string">"$exists"</span>: <span class="literal">false</span>&#125;&#125;) <span class="comment">// 如果不存在字段love，就返回</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li>正则表达式</li></ol><p>mongodb支持正则表达式，使用方法与正则字面量一样：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="keyword">find</span>(&#123;<span class="string">"title"</span>: <span class="regexp">/mongodb/i</span>&#125;)  <span class="comment">// i是忽略大小写</span></span><br></pre></td></tr></table></figure></p><ol start="5"><li>类型查询<br>我们可以根据字段类型来返回数据：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"comments"</span>: &#123;<span class="string">"<span class="variable">$type</span>"</span>: 4&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>只有当comments的类型是数组才匹配</p><p>注：更多类型的数值可以参考这里：mongodb $type</p><ol start="6"><li>内嵌文档<br>mongodb是允许内嵌文档的，而且要查询内嵌文档也很简单（使用点语法）：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  address: &#123; name: <span class="string">"nanji"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"address.name"</span>: <span class="string">"nanji"</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>上面的语句是查询comments中的author。</p><p>数组也可以采取点语法:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">  comments:</span> [&#123;<span class="string">title:</span><span class="string">"mongodb"</span>&#125;, &#123;<span class="string">title:</span><span class="string">"javascript"</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line">db.article.find(&#123;<span class="string">"comments.title"</span>: <span class="string">"mongodb"</span>&#125;)</span><br></pre></td></tr></table></figure></p><ol start="7"><li>取反<br>$not是元语句，即可以用在任何其他条件之上：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.<span class="builtin-name">find</span>(&#123;<span class="string">"author"</span>: &#123;<span class="string">"<span class="variable">$not</span>"</span>: /mongodb/i&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>只要使用$not操作符，就表示取反。</p><p>MongoDB常用方法</p><ol><li>控制返回数量（limit）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.find</span>()<span class="selector-class">.limit</span>(10)</span><br></pre></td></tr></table></figure></li></ol><p>返回10条数据</p><ol start="2"><li>略过数量<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.find</span>()<span class="selector-class">.skip</span>(5)</span><br></pre></td></tr></table></figure></li></ol><p>略过前5条数据，也就是从第6条开始返回。</p><p>可以结合limit()和skip()来达到分页效果：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> article limit <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">db.article.find().skip(<span class="number">10</span>).limit(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><ol start="3"><li>统计</li></ol><p>返回匹配数据的长度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.find</span>()<span class="selector-class">.count</span>()</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>格式化<br>pretty()方法可以以格式化的方式显示所有文档：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure></li><li><p>删除集合<br>当你要删除一个集合中的所有文档时，直接删除一个集合效率会更高：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.article</span><span class="selector-class">.drop</span>()</span><br></pre></td></tr></table></figure></li></ol><p>原文: <a href="http://ghmagical.com/article/page/id/Bj7qgmJ3CJUE" target="_blank" rel="noopener">http://ghmagical.com/article/page/id/Bj7qgmJ3CJUE</a></p>]]></content><categories><category> 数据库 </category></categories><tags><tag> mongodb </tag><tag> 数据库 </tag></tags></entry><entry><title>express之request和response对象</title><link href="/express_request_and_response.html"/><url>/express_request_and_response.html</url><content type="html"><![CDATA[<p>express是基于Node搭建web应用的框架，使用express可以快速搭建一个网站，express的和核心功能有以下三点：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><a id="more"></a><h2 id="request-和-response-对象的具体介绍："><a href="#request-和-response-对象的具体介绍：" class="headerlink" title="request 和 response 对象的具体介绍："></a>request 和 response 对象的具体介绍：</h2><h3 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h3><ul><li>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。</li></ul><p>常见属性有：</p><ul><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型<br>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第- 一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ul><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><ul><li>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。</li></ul><p>常见属性有：</p><ul><li>res.app：同req.app一样</li><li>res.append()：追加指定HTTP头</li><li>res.set()在res.append()后将重置之前设置的头</li><li>res.cookie(name，value [，option])：设置Cookie</li><li>opition: domain / expires / httpOnly / maxAge / path / secure / signed</li><li>res.clearCookie()：清除Cookie</li><li>res.download()：传送指定路径的文件</li><li>res.get()：返回指定的HTTP头</li><li>res.json()：传送JSON响应</li><li>res.jsonp()：传送JSONP响应</li><li>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</li><li>res.redirect()：设置响应的Location HTTP头，并且设置状态码302</li><li>res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的- 页面，这样就不会自动输出了。</li><li>res.send()：传送HTTP响应</li><li>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定- Content-Type</li><li>res.set()：设置HTTP头，传入object可以一次设置多个头</li><li>res.status()：设置HTTP状态码</li><li>res.type()：设置Content-Type的MIME类型</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  主页输出 "Hello World"</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"主页 GET 请求"</span>);</span><br><span class="line">   res.send(<span class="string">'Hello GET'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  POST 请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</span><br><span class="line">   res.send(<span class="string">'Hello POST'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /del_user 页面响应</span></span><br><span class="line">app.get(<span class="string">'/del_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"/del_user 响应 DELETE 请求"</span>);</span><br><span class="line">   res.send(<span class="string">'删除页面'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /list_user 页面 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/list_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"/list_user GET 请求"</span>);</span><br><span class="line">   res.send(<span class="string">'用户列表页面'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"/ab*cd GET 请求"</span>);</span><br><span class="line">   res.send(<span class="string">'正则匹配'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = server.address().address</span><br><span class="line"><span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。</p><p>你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure></p><p>假设有一张图片/public/images/logo.png，应用添加处理静态文件的功能实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = server.address().address</span><br><span class="line"><span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>用node启动该文件后，在浏览器中访问 <a href="http://127.0.0.1:8081/images/logo.png，" target="_blank" rel="noopener">http://127.0.0.1:8081/images/logo.png，</a> 即可看到/public/images/logo图片</p><p>使用post请求的实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendFile( __dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span> );</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 JSON 格式</span></span><br><span class="line"><span class="keyword">var</span> response = &#123;</span><br><span class="line"><span class="string">"first_name"</span>:req.body.first_name,</span><br><span class="line"><span class="string">"last_name"</span>:req.body.last_name</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(response);</span><br><span class="line">   res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = server.address().address</span><br><span class="line"><span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用中间件向node服务器发送cookie的实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express_cookie.js 文件</span></span><br><span class="line"><span class="keyword">var</span> express      = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Cookies: "</span> + util.inspect(req.cookies));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8081</span>)</span><br></pre></td></tr></table></figure></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>express是基于node快速搭建网站的框架，底层实现使用了promise + callback的方式，功能全面。但是比较推荐的是koa2，koa2是koa2.0版本之后的称呼，koa1.0版本使用了generator函数实现，2.0使用了async/await函数实现，非常精简，但是功能并不比Express少，express能做的koa都能做，而且做得更好。不同的是，koa把express的部分功能拆分出去了，使用的时候可以根据需求合理引入中间件，比如koa-router。在上一家公司的时候使用过koa1.0多页面的电商网站，前端项目集成了部分node代码实现页面路由和服务的渲染，体验非常棒，也阅读过公司内部使用koa2.0的后台项目，感觉更友好一些。<br>本篇博客大部分内容都是摘自<a href="http://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="noopener">runoob</a>，不是原创，算是一篇介绍express的笔记吧。</p>]]></content><categories><category> 后端 </category></categories><tags><tag> javascript </tag><tag> node </tag></tags></entry><entry><title>hexo+github博客多设备同步</title><link href="/hexo-mutl-device-sync.html"/><url>/hexo-mutl-device-sync.html</url><content type="html"><![CDATA[<p>为什么hexo博客需要多设备同步呢？</p><p>很多基于hexo的博客的主题都是引用的第三方的主题项目啊，作为一个第三方的项目，导入到自己博客项目的themes目录下之后，作为一个subproject 是无法commit到自己的项目下的，删除原项目的.git文件把整个主题包嵌入自己项目也行，但是也需要尊重一下主题的开发者呀。<br><a id="more"></a></p><p>这样一来，在一个新设备上<code>git pull</code>了自己的项目后还要去<code>git pull</code>主题目录，直接拉下来的主题包的配置文件<code>_config.yml</code>文件一般都需要修改下吧，如果有google、百度统计相关的代码需要添加到主题中的相关文件中的，就需要改下原来的主题文件了，这些改的第一次改动之后，下一次你还记得怎么改不? 不记得啦！那只好在相关文件里面记录下来，下次直接参考该记录来重新配置下吧，手动配置感觉很麻烦，那就写一个shell脚本，下次直接执行以下该脚本就自动配置好啦！</p><p>这里贴一下我的自动化配置shell脚本：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">localRepo=<span class="string">"<span class="variable">$HOME</span>/hexo-theme-BlueLake"</span></span><br><span class="line">floader=<span class="string">"themes/BlueLake"</span></span><br><span class="line">subGitFloader=<span class="string">"themes/BlueLake/.git"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$localRepo</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">"1. local BlueLake theme repostory not exist and start clone from remote......"</span></span><br><span class="line"><span class="built_in">echo</span> $( git <span class="built_in">clone</span> git@github.com:chaooo/hexo-theme-BlueLake.git &amp;&amp; mv <span class="string">"hexo-theme-BlueLake"</span><span class="string">"<span class="variable">$HOME</span>/"</span> )</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">"1. local BlueLake theme repostory exist!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$floader</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">     rm -rf <span class="string">"<span class="variable">$floader</span>"</span> &amp;&amp; <span class="built_in">echo</span><span class="string">"2.remove themes/BlueLake success!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cp -Rf <span class="string">"<span class="variable">$HOME</span>/hexo-theme-BlueLake"</span><span class="string">"themes/BlueLake"</span> &amp;&amp; <span class="built_in">echo</span><span class="string">"3. copy thems successed!"</span> || <span class="built_in">echo</span><span class="string">"3. copy thems failed!"</span></span><br><span class="line"></span><br><span class="line">cat <span class="string">"source/_data/BlueLake_theme_config.yml"</span> &gt; <span class="string">"<span class="variable">$floader</span>/_config.yml"</span> &amp;&amp; <span class="built_in">echo</span><span class="string">"4. move _config.yml successed!"</span></span><br><span class="line"></span><br><span class="line">cat <span class="string">"source/_data/baidu_config_script.jade"</span> &gt;&gt; <span class="string">"themes/BlueLake/layout/_partial/after_footer.jade"</span> &amp;&amp; <span class="built_in">echo</span><span class="string">"5. add baidu_config_script success!"</span> || <span class="built_in">echo</span><span class="string">"5. add baidu_config_script failed!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$subGitFloader</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> $( rm -rf <span class="variable">$&#123;subGitFloader&#125;</span> ) &amp;&amp; <span class="built_in">echo</span><span class="string">"6.remove <span class="variable">$&#123;subGitFloader&#125;</span> succsssful!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>自从写好这段脚本后再也不用担心更换新设备后重新部署hexo博客的问题啦。</p><p>为什么需要经常部署博客呢？我爱折腾啊，电脑经常换系统啊，虚拟机ubuntu，Windows，Mac OS X双系统，近一年来重装了好多次系统啊，每次都重新部署开发环境好麻烦，而且换工作之后也会更换电脑啊。</p><p>如果担心主题开发者后续更新了主题导致在新设备上部署时环境不一致，可以把原主题fork到自己的github，然后把仓库URL改成fork过来的URL即可。</p><blockquote><p>注：后续补充，现在我已不再使用以上方案同步博客配置，百度站长和google站长验证使用 html 标签验证方式，相应的识别码已写入配置文件，而且可以把主题中的部分配置项配置到项目的配置下。主题同步采用了 git modules，把原作者的主题fork到自己的github，然后自己维护主题仓库，这样可以在原主题的基础上进行功能和样式的调整和优化。</p></blockquote>]]></content><categories><category> 博客 </category></categories><tags><tag> hexo </tag><tag> github </tag><tag> github pages </tag><tag> 博客 </tag></tags></entry><entry><title>linux学习笔记(4)</title><link href="/linux-note-4.html"/><url>/linux-note-4.html</url><content type="html"><![CDATA[<p>这里记录下linux系统下用户和用户组的管理方面的学习笔记。<br><a id="more"></a><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">用户: 使用操作系统的人</span></span><br><span class="line"><span class="section">用户组: 具有相同系统权限的一组用户</span></span><br></pre></td></tr></table></figure></p><p><code>/etc/group</code> 存储当前系统中所有用户组信息</p><p>格式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">group</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:123</span><span class="selector-pseudo">:ABC</span>,<span class="selector-tag">def</span>,<span class="selector-tag">xyz</span></span><br><span class="line">组名称:组密码占位符:组编号:组中用户列表</span><br></pre></td></tr></table></figure></p><p>组只有一个用户，用户组合和用户名相同，用户组列表为空,<br>root用户组的组号为0,<br>编号1~499全部是分配给系统的，越早安装的应用组编号越靠前,<br>个人用户编号从500开始计数,<br>组密码占位符全部都是x</p><p><code>/etc/gshadow</code> 存储当前系统中用户组的密码信息<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">group:*: :abc</span></span><br><span class="line"><span class="section">组名称:组密码:组管理者:组中用户列表</span></span><br></pre></td></tr></table></figure></p><p>组密码为*或!或空表示没有组密码</p><p><code>/etc/paswd</code> 存储当前系统所有用户的信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user:x:123:456:xxxx:/home/user:/bin/bash</span><br><span class="line">用户名:密码占位符:用户编号:用户组编号:用户注释信息:用户主目录:shell类型</span><br></pre></td></tr></table></figure></p><p><code>/etc/shadow</code> 存储当前系统中所有用户的密码信息。<br><br>用户和用户组的密码保存在单独的文件/etc/gshadow 和/etc/shadow中， 需要的权限要比保存用户和用户组的文件高很多</p><p>管理用户组的命令：</p><ul><li>添加用户组：<br><code>groupadd [用户组名]</code></li><li>修改用户组名：<br><code>groupmod -n [newGroupName] [oldGroupName]</code></li><li>修改用户组编号：<br><code>groupmid -g 666 [groupName]</code></li><li>创建用户组的时候指定编号：<br><code>groupadd -g 888 [groupName]</code></li><li><p>删除用户组(删除用户组之前必须先清空组内用户， 否则这些用户的组信息丢失， 有权限方面的影响)：<br><code>groupdel [groupName]</code></p></li><li><p>组内添加用户(用户目录默认在/home下，默认创建一个和用户名相同的用户组)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd userName</span><br><span class="line">useradd -g groupName -d /home/userName userName</span><br></pre></td></tr></table></figure></li><li><p>给用户添加备注：<br><code>useradd -c 备注内容 userName</code></p></li><li>改用户名：<br><code>usermod -l 新用户名 旧用户名</code></li><li>指定新的用户文件夹：<br><code>usermod -d /home/mhy mhy</code></li><li>修改所属用户组：<br><code>usermod -g 组名 用户名</code></li><li>删除账号：<br><code>userdel 用户名</code></li><li>删除的同时删除用户目录:<br><code>userdel -r 用户名</code></li><li><p>禁止root以外的用户登录服务器（空文件就可以）：<br><code>touch /etc/nologin</code></p></li><li><p>锁定用户账户：<br><code>passwd -l 用户名</code></p></li><li>解锁用户<br><code>passwd -u 用户名</code></li><li>清除用户的密码，无密码登录：<br><code>passwd -d 用户名</code></li></ul><h3 id="主要组和附属组："><a href="#主要组和附属组：" class="headerlink" title="主要组和附属组："></a>主要组和附属组：</h3><p>一个用户可以属于多个组，一个主要组，若干个个附属组, 添加多个，用逗号连接多个附属组名:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a 用户名  附属组名</span><br></pre></td></tr></table></figure></p><ul><li>创建用户时指定主要组和附属组：<br>`useradd -g 主要组 -G 附属组1,负数组2  用户名</li><li><p>用户组设置密码：<br><code>gpasswd 用户组名</code></p></li><li><p>切换用户身份:<br><code>su 用户名</code></p></li><li><p>我是谁:<br><code>whoami</code></p></li><li>用户信息：<br><code>id 用户名</code></li><li>所属组：<br><code>groups 用户名</code></li></ul>]]></content><categories><category> 后端 </category></categories><tags><tag> linux </tag><tag> bash </tag></tags></entry><entry><title>linux学习笔记(3)</title><link href="/linux-note-3.html"/><url>/linux-note-3.html</url><content type="html"><![CDATA[<p>linux中常用的命令使用笔记。</p><h2 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h2><blockquote><p>echo [选项] [输出内容]</p></blockquote><p>选项：</p><ul><li>-e 支持反斜杠控制的字符转换</li></ul><a id="more"></a><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>输出警告音</td></tr><tr><td>\b</td><td>退格键，即左删除键</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车键</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\0n</td><td>nn 按八进制ASCII码表输出字符，其中0是数字零，nnn是三位八进制数</td></tr><tr><td>\xh</td><td>h 按照十六进制ASCII码表输出z福。其中hh是两位十六进制数</td></tr></tbody></table><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>eg:<br><code>alias la=&quot;ls -la&quot;</code><br>查看系统中的别名：<br><code>alias</code><br>1.临时设置别名：</p><p>命令行输入 <code>alias la=&quot;ls -al --color=auto&quot;</code></p><p>2.永久设置：</p><p>写入环境变量配置文件:<br><code>~/.bashrc</code></p><p>3.删除别名：<br>临时删除可以直接输入: <code>unalias la</code>,<br>永久删除需要修改配置文件</p><ul><li><p>命令生效顺序</p><ol><li>第一顺位执行用绝对路径活泼相对路径执行的命令</li><li>第二顺位执行别名</li><li>第三执行bash的内部命令</li><li>第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令</li></ol></li><li><p>命令快捷键</p></li></ul><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>强行终止</td></tr><tr><td>cmd  + l</td><td>清屏(清除一行)</td></tr><tr><td>ctrl + l</td><td>清屏(屏幕中所有行), 效果同clear</td></tr><tr><td>ctrl + a</td><td>光标移动到命令行行首</td></tr><tr><td>ctrl + e</td><td>光标移动到命令行行尾</td></tr><tr><td>ctrl + u</td><td>从光标位置删除到行首</td></tr><tr><td>ctrl + z</td><td>把命令放入后台(命令无法使用ctrl + c z终止的时候使用，不建议 )</td></tr><tr><td>ctrl + r</td><td>在历史命令中搜索</td></tr><tr><td>ctrl + 左右方向键</td><td>按单词左右移动光标</td></tr></tbody></table><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p>上下箭头读取历史命令</p><ul><li>读取所有历史命令</li></ul><p><code>history [选项] [历史命令保存文件]</code></p><p>选项：</p><ul><li>-c 清空历史命令</li><li>-w 把缓存中的历史命令写入历史命令保存文件 <code>~/.bash_history</code></li></ul><p>注意: history命令中的命令包括文件保存的和当前登录输入的所有命令， 文件只会在登出的时候才会主动保存到文件，但是可以通过<code>-w</code>选项把当前登录后的历史命令手动保存在文件中</p><p>历史命令默认保存1000条，可以在<code>/etc/profile</code>中的<code>HISTSIZE=1000</code>字段中设置</p><ol><li><em>使用<code>!n</code>重复执行第n条历史命令</em></li><li><em>使用<code>!字串</code>重复执行最后一条以该字串开头的命令</em></li><li>使用<code>!!</code>重复执行上一条命令</li></ol><ul><li>命令和文件补全</li></ul><p>在bash中，按tab键自动补全命令、文件路径， 对提高输入速度和排错非常有用</p><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标准的输入输出设备:</span><br><span class="line">键盘    /dev.stdin  <span class="number">0</span> 标准输入</span><br><span class="line">显示器  /dev/sdtout <span class="number">1</span> 标准输出</span><br><span class="line">显示器  /dev/sdterr <span class="number">2</span> 标准错误输出</span><br></pre></td></tr></table></figure><h3 id="标准输出重定向："><a href="#标准输出重定向：" class="headerlink" title="标准输出重定向："></a>标准输出重定向：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令 &gt; 文件 ： 以覆盖方式，把命令的正确输出输出到指定文件或设备中</span><br><span class="line">命令 &gt;&gt; 文件 ： 以追加的方式，把命令的正确输出输出到指定文件或设备中</span><br></pre></td></tr></table></figure><p><strong>文件不存在， 先创建后写入， <code>&gt;</code>覆盖 <code>&gt;&gt;</code>追加</strong></p><h3 id="命令的错误输出："><a href="#命令的错误输出：" class="headerlink" title="命令的错误输出："></a>命令的错误输出：</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误命令 <span class="number">2</span>&gt; 文件 ： 以覆盖方式，把命令的错误输出输出到指定文件或设备中</span><br><span class="line">错误命令 <span class="number">2</span>&gt;&gt; 文件 ： 以追加的方式，把命令的错误输出输出到指定文件或设备中</span><br></pre></td></tr></table></figure><p><em>注意：正确输出大于号左右有空格，错误输出左右没有空格</em></p><h3 id="正确和错误输出同时保存："><a href="#正确和错误输出同时保存：" class="headerlink" title="正确和错误输出同时保存："></a>正确和错误输出同时保存：</h3><ul><li>以<em>覆盖</em>方式，把正确输出和错误输出都保存到同一个文件中：</li></ul><ol><li>命令 &amp;&gt;文件</li><li>命令 &gt; 文件 2&gt;&amp;1</li></ol><p>eg: <code>./test.sh &gt;&gt; common.log 2&gt;&amp;1</code></p><ul><li>以<em>追加</em>方式，把正确输出和错误输出都保存到同一个文件中：</li></ul><ol><li>命令 &amp;&gt;&gt;文件</li><li>命令 &gt;&gt; 文件 2&gt;&amp;1</li></ol><p>eg: <code>./test.sh &gt;&gt; common.log 2&gt;&amp;1</code></p><ul><li><em>把正确输出追加到文件1， 把错误输出追加到文件2</em>：</li></ul><ol><li>命令 &gt;&gt; 文件一 2&gt;&gt; 文件二</li></ol><p>eg: <code>./test.sh &gt;&gt; success.log 2&gt;&gt; error.log</code></p><p><strong>注意上面命令中的空格，在错误输出中<code>2&gt;</code>或者<code>2&gt;&gt;</code>之间没有空格， <code>1&gt;</code> 等同于 <code>&gt;</code>，<code>1</code>省略不写</strong><br>一般都是以追加的方式写入日志文件<br>最常用的命令：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`命令&gt;&gt;文件一 <span class="number">2</span>&gt;&gt;文件二`</span><br><span class="line">`命令 &amp;&gt;&gt; 文件`</span><br></pre></td></tr></table></figure></p><p><code>/dev/null</code>目录文件写入后丢弃，用于一些不需要过程只需要结果的命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 和 <span class="number">1</span>&gt; 相同, 标准输出重定向</span><br><span class="line"><span class="number">2</span>&gt;&amp;<span class="number">1</span> 标标准错误输出 重定向到 标准输出</span><br><span class="line">&amp;&gt; file 把标准输出和错误输出都重定向到文件file中</span><br></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p><code>wc [选项] [文件名]</code></p><p>选项：</p><ul><li>-c 统计字节数</li><li>-w 统计单词数</li><li>-l 统计行数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令 &lt; 把文件作为命令的输入</span><br><span class="line">命令 &lt;&lt; 标识符</span><br></pre></td></tr></table></figure></li></ul><p>标识符把标识符之间的内容作为命令的输入<br>eg:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wc &lt; acc.<span class="built_in">log</span><span class="meta"># 统计文件的输入</span></span><br><span class="line">&lt;&lt;很少用</span><br></pre></td></tr></table></figure></p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><h3 id="多命令顺序执行："><a href="#多命令顺序执行：" class="headerlink" title="多命令顺序执行："></a>多命令顺序执行：</h3><table><thead><tr><th>多命令执行符</th><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>;</td><td>命令1; 命令2</td><td>多个命令顺序执行，之间没有任何逻辑关系</td></tr><tr><td>&amp;&amp;</td><td>命令1 &amp;&amp; 命令2</td><td>逻辑与， 当命令1正确执行，则命令2才会执行，否则命令2不执行</td></tr><tr><td></td><td></td><td></td><td>命令1</td><td></td><td>命令2</td><td>逻辑或， 当命令1执行不正确，才会执行命令2，否则命令2不会执行</td></tr></tbody></table><p>判断命令是否正确执行:</p><p><code>./test.sh &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code></p><h3 id="管道符-1"><a href="#管道符-1" class="headerlink" title="管道符"></a>管道符</h3><p>格式：</p><p><code>命令1 | 命令2</code></p><p>命令1的正确输出作为命令2的操作对象<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep ESTABLISHED</span><br></pre></td></tr></table></figure></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>？ </td><td>匹配一个任意字符</td></tr><tr><td>*</td><td>匹配0个或任意多个字符</td></tr><tr><td>[]</td><td>匹配中括号中任意一个字符</td></tr><tr><td>[-]</td><td>匹配中括号中任意一个字符， - 代表范围</td></tr><tr><td>[^]</td><td>逻辑非， 匹配不上中括号内的一个字符</td></tr></tbody></table><p><em>通配符用于匹配文件名或目录名</em></p><h3 id="bash中其他特殊符号"><a href="#bash中其他特殊符号" class="headerlink" title="bash中其他特殊符号"></a>bash中其他特殊符号</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span></span><br><span class="line"><span class="string">""</span></span><br><span class="line"><span class="string">``</span> : 反引号，反引号括起来的是系统命令，在bash中会先执行它，和$()作用一样</span><br><span class="line">$() : 作用同反引号, 执行系统命令，然后获取到执行结果</span><br><span class="line">$ : 调用变量的值</span><br><span class="line">\ : 转义符</span><br><span class="line"><span class="comment">#  :注释</span></span><br></pre></td></tr></table></figure>]]></content><categories><category> 后端 </category></categories><tags><tag> linux </tag><tag> bash </tag></tags></entry><entry><title>linux学习笔记(2)</title><link href="/linux-note-2.html"/><url>/linux-note-2.html</url><content type="html"><![CDATA[<h3 id="1-shell-脚本"><a href="#1-shell-脚本" class="headerlink" title="1.shell 脚本"></a>1.shell 脚本</h3><p>脚本语言是用来让计算机自动化执行完成一系列工作的程序，不需要编译，通常是通过解释器运行的。</p><a id="more"></a><h3 id="2-shell环境"><a href="#2-shell环境" class="headerlink" title="2.shell环境"></a>2.shell环境</h3><p>shell文件的第一行的”#!”是一个约定的标记，告诉系统其后路径所指定的程序即是解释此脚本的shell程<br>linux的shell种类常见的有：</p><ul><li>Bourne Ageng Shell(/bin/bash)</li><li>Bourne Shell(/usr/bin/sh 或/bin/sh)</li><li>“C Shell” (/usr/bin/csh)</li><li>Shell for Root(/sbin/sh)</li></ul><h3 id="3-运行shell脚本"><a href="#3-运行shell脚本" class="headerlink" title="3.运行shell脚本"></a>3.运行shell脚本</h3><p>创建一个shell脚本文件,保存为test.sh<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span><span class="string">"hello"</span><span class="comment">#echo命令用于向窗口输出文本</span></span><br></pre></td></tr></table></figure></p><ol><li>作为可执行文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./text.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure></li></ol><p>执行脚本必须指定路径，可以用绝对路径或者相对路径，不指定路径会从PATH里面找。</p><ol start="2"><li>作为解释器参数</li></ol><p>直接运行解释器，其参数为shell脚本的文件名<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure></p><p>这种方式运行脚本，第一行不需要指定解释器信息，写了也不起作用</p><h3 id="4-shell变量"><a href="#4-shell变量" class="headerlink" title="4.shell变量"></a>4.shell变量</h3><h4 id="4-1-变量定义"><a href="#4-1-变量定义" class="headerlink" title="4.1 变量定义"></a>4.1 变量定义</h4><p>变量名和等号之间不能有空格，shell变量定义的规定：</p><ul><li>变量命名只能使用英文字母，数字和下划线，首字符不能以数字开头</li><li>中间不能有空格，可以使用下划线</li><li>不能使用标点符号</li><li>不能使用bash里的关键字</li></ul><p>有效的变量示例如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Room</span><br><span class="line">L_YARM</span><br><span class="line">_var</span><br><span class="line">var2</span><br></pre></td></tr></table></figure></p><p>无效的变量名：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?var=123</span><br><span class="line">user*name=runoob</span><br></pre></td></tr></table></figure></p><p>变量赋值可以显式的直接赋值也可以用语句来赋值：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Room=222</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br></pre></td></tr></table></figure></p><h4 id="4-2-变量的使用"><a href="#4-2-变量的使用" class="headerlink" title="4.2 变量的使用"></a>4.2 变量的使用</h4><p>使用一个定义过的变量，只需要在变量前面加上美元符号即可<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">'mhy'</span></span><br><span class="line"><span class="built_in">echo</span><span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span><span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure></p><p>变量名外面的花括号可选，加花括号是为了帮助解释器识别变量的边界<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">2<span class="built_in">echo</span><span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>推荐给所有变量加上$</p><p>已定义的变量可以重新被定义<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"tom"</span></span><br><span class="line"><span class="built_in">echo</span><span class="variable">$&#123;your_name&#125;</span></span><br><span class="line">your_name=<span class="string">"lily"</span></span><br><span class="line"><span class="built_in">echo</span><span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure></p><p>但是变量定义的时候不能加$符号。</p><h4 id="4-3-只读变量"><a href="#4-3-只读变量" class="headerlink" title="4.3 只读变量"></a>4.3 只读变量</h4><p>使用readonly命令可以将变量定义为只读变量，修改只读变量会报错<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line">girl_friend=<span class="string">"lily"</span></span><br><span class="line"><span class="built_in">readonly</span> girl_fiend</span><br><span class="line">gir_friend=<span class="string">"leilei"</span></span><br></pre></td></tr></table></figure></p><p>运行脚本报错了.</p><h4 id="4-4-删除变量"><a href="#4-4-删除变量" class="headerlink" title="4.4 删除变量"></a>4.4 删除变量</h4><p>使用unset 命令删除变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">girl_friend=<span class="string">"xiao mei"</span></span><br><span class="line"><span class="built_in">unset</span> girl_friend</span><br></pre></td></tr></table></figure></p><p><strong>unset 命令不能删除只读变量</strong></p><h4 id="4-5-变量类型"><a href="#4-5-变量类型" class="headerlink" title="4.5 变量类型"></a>4.5 变量类型</h4><p>shell脚本语言存在三种变量：</p><ul><li>局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效</li><li>环境变量 所有的程序包括shell启动的程序，都能访问环境变量，必要时shell脚本也能定义环境变量</li><li>shell变量 shell变量是由shell程序设置的特殊变量，shell变量中有一部分是环境变量，一部分是局部变量，这些变量保证了shell的正常运行</li></ul><h3 id="5-shell字符串"><a href="#5-shell字符串" class="headerlink" title="5.shell字符串"></a>5.shell字符串</h3><p>字符串是shell编程中最常用最有效的数据类型。<br>字符串可以用单引号或双引号或不用引号。</p><h4 id="5-1-单引号"><a href="#5-1-单引号" class="headerlink" title="5.1 单引号"></a>5.1 单引号</h4><p>单引号字符串的限制：</p><ul><li>单引号里任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字符串中不能出现单引号（对单引号使用转义符后也不行）<h4 id="5-2-双引号"><a href="#5-2-双引号" class="headerlink" title="5.2 双引号"></a>5.2 双引号</h4></li></ul><p>双引号的有点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h4 id="5-3-拼接字符串"><a href="#5-3-拼接字符串" class="headerlink" title="5.3 拼接字符串"></a>5.3 拼接字符串</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"mhy"</span></span><br><span class="line">greeting=<span class="string">"hello"</span>, <span class="string">"<span class="variable">$your_name</span>"</span>!<span class="string">"</span></span><br><span class="line"><span class="string">greeting_1="</span>hello, <span class="variable">$&#123;your_name&#125;</span>!<span class="string">"</span></span><br><span class="line"><span class="string">echo <span class="variable">$greeting</span><span class="variable">$greeting_1</span></span></span><br></pre></td></tr></table></figure><h4 id="5-4-获取字符串长度"><a href="#5-4-获取字符串长度" class="headerlink" title="5.4 获取字符串长度"></a>5.4 获取字符串长度</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string="beijing"</span></span><br><span class="line"><span class="comment"># echo $&#123;#string&#125; #输出 7</span></span><br></pre></td></tr></table></figure><h4 id="5-5-提取字符串"><a href="#5-5-提取字符串" class="headerlink" title="5.5 提取字符串"></a>5.5 提取字符串</h4><p>以下实例从字符串第2个字符开始截取4个字符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"hello beijing!"</span></span><br><span class="line"><span class="built_in">echo</span><span class="variable">$&#123;string:1:4&#125;</span><span class="comment">#输出 trin</span></span><br></pre></td></tr></table></figure></p><h4 id="5-6-查找子字符串"><a href="#5-6-查找子字符串" class="headerlink" title="5.6 查找子字符串"></a>5.6 查找子字符串</h4><p>查找子字符串的位置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"wellcome to beijing, shaonian"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> is` <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure></p><h4 id="5-7-判断读取字符串值"><a href="#5-7-判断读取字符串值" class="headerlink" title="5.7 判断读取字符串值"></a>5.7 判断读取字符串值</h4><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>${var}</td><td>定义var的值，与$var相同</td></tr><tr><td></td><td></td></tr><tr><td>$(var-DEFAULT}</td><td>如果var没有被声明，那么就以$DEFAULT作为其值</td></tr><tr><td>${var:-DEFAULT}</td><td>如果var没有被声明，或者其值为空，那么就以$DEFAULT作为其值</td></tr><tr><td></td><td></td></tr><tr><td>${var=DEFAULT}</td><td>如果var没有被声明，那么就以$DEFAULT作为其值</td></tr><tr><td>${var:=DEFAULT</td><td>如果var没有被声明，或者其值为空，那么就以$DEFAULT作为其值</td></tr><tr><td></td><td></td></tr><tr><td>${var+OTHER}</td><td>如果var声明了，那么其值就是$OTHER,否则就为null字符串</td></tr><tr><td>${var:+OTHER}</td><td>如果var被设置了，那么其值就是$OTHER，否则就为null字符串</td></tr></tbody></table><h4 id="5-8-字符串操作汇总"><a href="#5-8-字符串操作汇总" class="headerlink" title="5.8 字符串操作汇总"></a>5.8 字符串操作汇总</h4><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>${string:position</td><td>在$string中, 从位置$position开始提取子串</td></tr><tr><td>${string:position:length</td><td>在$string中, 从位置$position开始提取长度为$length的子串</td></tr><tr><td></td><td></td></tr><tr><td>${string#substring</td><td>从变量$string的开头, 删除最短匹配$substring的子串</td></tr><tr><td>${string##substring</td><td>从变量$string的开头, 删除最长匹配$substring的子串</td></tr><tr><td>${string%substring</td><td>从变量$string的结尾, 删除最短匹配$substring的子串</td></tr><tr><td>${string%%substring</td><td>从变量$string的结尾, 删除最长匹配$substring的子串</td></tr><tr><td></td><td></td></tr><tr><td>${string/substring/replacement</td><td>使用$replacement, 来代替第一个匹配的$substring</td></tr><tr><td>${string//substring/replacement</td><td>使用$replacement, 代替所有匹配的$substring</td></tr><tr><td>${string/#substring/replacement</td><td>如果$string的前缀匹配$substring, 那么就用$replacement来代替匹配到的$substring</td></tr><tr><td>${string/%substring/replacement</td><td>如果$string的后缀匹配$substring, 那么就用$replacement来代替匹配到的$substring</td></tr></tbody></table><h3 id="6-shell数组"><a href="#6-shell数组" class="headerlink" title="6.shell数组"></a>6.shell数组</h3><p>bash支持一维数组不支持多维数组，没有限定数组的大小<br>数组下标从0开始编号，下便可以是整数或算数表达式，其值应该大于或等于0。</p><h4 id="6-1-定义数组"><a href="#6-1-定义数组" class="headerlink" title="6.1 定义数组"></a>6.1 定义数组</h4><p>在shell中用括号来表示数组，元素用空格符号隔开：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 值3 ... 值n)</span><br></pre></td></tr></table></figure></p><p>eg：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array_name=(</span><br><span class="line">  value0</span><br><span class="line">  value1</span><br><span class="line">  value2</span><br><span class="line">  value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>还可以单独定义数组的各个分量：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[100]=value100</span><br></pre></td></tr></table></figure></p><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h4 id="6-2-数组的操作"><a href="#6-2-数组的操作" class="headerlink" title="6.2 数组的操作"></a>6.2 数组的操作</h4><ul><li>读取数组</li></ul><p>读取数组的语法：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(array_name[index])</span><br></pre></td></tr></table></figure></p><p>使用@符号可以获取数组中所有元素：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(array_name[@])</span><br></pre></td></tr></table></figure></p><ul><li>获取数组的长度</li></ul><p>获取数组的长度的方法与获取字符串长度的方法相同。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数组元素的个数</span></span><br><span class="line">length=$(<span class="comment">#array_name[@])</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=$(<span class="comment">#array_name[*])</span></span><br><span class="line"><span class="comment"># 获取数组单个元素的长度</span></span><br><span class="line">lengthn=$(<span class="comment">#array_name[n])</span></span><br></pre></td></tr></table></figure></p><h3 id="7-注释"><a href="#7-注释" class="headerlink" title="7 注释"></a>7 注释</h3><p>shell中只有单行注释， 在每一行的开头加入#即可</p><p>多行代码可以用花括号括起来定义成一个函数，不调用它这块代码不会执行，和多行注释的效果一样</p>]]></content><categories><category> 后端 </category></categories><tags><tag> linux </tag><tag> bash </tag></tags></entry><entry><title>linux学习笔记(1)</title><link href="/linux-note-1.html"/><url>/linux-note-1.html</url><content type="html"><![CDATA[<p>最近给家里的PC的虚拟机上搭建开发环境，经常用到文件或目录权限的问题， 发现对这一块的了解还不够，所以抽时间恶补了一下，这里记录一下。<br><a id="more"></a></p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>文件权限区分的文件类型有三种，分别是：</p><blockquote><p>-: 文件;<br>d: 目录;<br>l: 软连接文件<br>rw-  r– r–<br>u 所有者  g所属组  o其他人<br>r read  w write x 执行(excute)</p></blockquote><h2 id="权限范围的表示"><a href="#权限范围的表示" class="headerlink" title="权限范围的表示"></a>权限范围的表示</h2><p>使用ls -la 命令查看文件权限范围：</p><blockquote><p>ls 命令的选项详解:</p><ul><li>-a</li><li>-l (lang) (ll)</li><li>-d 查看目录属性</li><li>-h  人性化显示文件大小</li><li>-i 显示inode</li></ul></blockquote><p>执行<code>ls -la</code>后显示出来的内容从左到右依次为：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   <span class="number">1</span>         root       wheel    <span class="number">515</span>B  <span class="number">7</span><span class="number">13</span><span class="number">2015</span> afpovertcp.cfg</span><br><span class="line">  权限  <span class="number">1</span>引用计数 所有者root 所属组sheel 文件大小 最后修改时间  文件名</span><br></pre></td></tr></table></figure></p><h2 id="文件权限控制"><a href="#文件权限控制" class="headerlink" title="文件权限控制"></a>文件权限控制</h2><p>文件格式：<br><code>-rw-r-r--</code></p><p>liniux文件权限格式一共有10位，第一位是文件类型，后面没三位代表一组，每三位一组， 相同权限的为一组，依次为：u 所有者, g所属组, o其他人</p><blockquote><p>u: User, 文件或目录的拥有者<br>g: Group，文件或目录的所属群组<br>o: Other, 除了文件或目录的拥有者或所属群组之外，其他用户皆属于这个范围<br>a: All, 全部用户，包含拥有者、所属群组以及其他用户<br>r: read， 读取权限， 数字代号为 ‘4’<br>w: write, 写入权限，数字代号为’2’<br>x: 执行或切换的权限，数字代号为’1’<br>-: 不具备任何权限， 数字代号为’0’<br>s: 特殊功能说明，变更文件或目录的权限</p></blockquote><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><ul><li><p>格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-cfvR] [--<span class="built_in">help</span>] [--version] mode file...</span><br></pre></td></tr></table></figure></li><li><p>选项</p><blockquote><p>-c或–change: 效果类似’-v’参数，但仅返回更改的部分<br>-f或–quiet或–silent: 不显示错误信息<br>-R或–recursive: 递归处理， 将指令目录下的所有文件及字母里一并处理<br>-v或–verbose： 显示指令执行过程<br>–reference=&lt;参考文件或目录&gt;： 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同<br>&lt;权限范围&gt;+&lt;权限设置&gt;： 开启权限范围的文件或目录的该选项权限设置<br>&lt;权限范围&gt;-&lt;权限设置&gt;： 关闭权限范围的文件或目录的该选项权限设置<br>&lt;权限范围&gt;=&lt;权限设置&gt;： 指定权限范围的文件或目录的该选项权限设置</p></blockquote></li><li><p>参数<br>权限模式： 指定文件的权限模式<br>文件： 要改变权限的文件</p></li></ul><blockquote><p>chmod 722 ./shell.sh</p></blockquote><p>chmod 777 shell.sh # 统一授权方式，使用三位数字代表权限，每一位代表一个组，三个组授权均为7（rwx）<br>chmod u+x shell.sh # 给u组增加权限x</p><h1 id="数字0-7代表含义"><a href="#数字0-7代表含义" class="headerlink" title="数字0 ~ 7代表含义"></a>数字0 ~ 7代表含义</h1><blockquote><p>0: —   000<br>1: –x   001<br>2: -w-   010<br>3: -wx   011<br>4: r–   100<br>5: r-x   101<br>6: rw-   110<br>7: rwx   111</p></blockquote><p>可以看出规律，每一组的权限按照从左到右的排序依次是rwx,按三个二进制位排序，哪一位为1就代表该位有权限</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>改变文件所有者命令格式：</p><blockquote><p>chown [选项] 参数<br>chown [选项]… [所有者][:[组]] 文件…</p></blockquote><p>eg:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mhy:mhy ~/.ssh</span><br></pre></td></tr></table></figure></p><p>同时把<code>.ssh</code>的所有者和组都改成了mhy</p><p>选项：</p><ul><li>-R 或 –recursive 递归处理</li><li>–reference=&lt;参考文件或目录&gt;   把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录拥有者与所属群组相同</li></ul><p>参数：</p><ul><li>用户：组   指定所有者和所属组， 当省略组，仅改变所有者</li><li>文件      文件列表，可使用shell通配符改变多个<br>eg：<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mhy /<span class="built_in">home</span>/mhy<span class="comment">/*</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user</span><br><span class="line">./file.js</span><br></pre></td></tr></table></figure><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><blockquote><p>cd ~ (当前用户的家目录，如果是root用户，则是在/root， 其他用户家目录在/home/username)<br>cd . 当前<br>cd .. 上一级<br>cd - 进入上一次目录</p></blockquote><h2 id="文件和文件夹处理命令"><a href="#文件和文件夹处理命令" class="headerlink" title="文件和文件夹处理命令"></a>文件和文件夹处理命令</h2><p>创建文件夹格式：</p><blockquote><p>mkdir -p [目录名]</p></blockquote><p>选项：</p><ul><li>-p 递归创建（先建立上一级目录）</li></ul><p>其他命令：</p><ul><li>pwd</li><li>rmdir 删除空白目录，如果有子文件则无法删除，不常用</li><li>rm 删文件或目录</li><li>rm -rf  强制删除目录</li><li>rm -r 删除目录， 会有确认提示</li><li>rm -f 强制删除，不会提示</li><li>cp 复制文件或目录</li><li>cp [选项] 需要复制的路径  目标位置</li><li>cp -r 复制目录</li><li>cp -p 连带文件属性复制</li><li>cp -d 若源文件是链接文件则复制链接属性</li><li>cp -a 相当于 -pdr</li><li>mv [源文件位置] [目标位置]</li></ul><h3 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h3><p>系统命令目录<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/bin</span></span><br><span class="line"><span class="string">/sbin</span></span><br><span class="line"><span class="string">/usr/bin</span></span><br><span class="line"><span class="string">/usr/sbin</span></span><br><span class="line">sbin下只有root权限可以执行， 其他两个所有不需要root</span><br><span class="line"></span><br><span class="line"><span class="string">/boot</span> 启动目录</span><br><span class="line"><span class="string">/etc</span> 默认配置文件目录</span><br><span class="line"><span class="string">/lib</span> 函数库</span><br><span class="line"><span class="string">/media</span> 挂载移动盘</span><br><span class="line"><span class="string">/mnt</span> 挂载磁盘</span><br><span class="line"><span class="string">/sys</span><span class="string">/proc</span>  内存相关的目录</span><br><span class="line"><span class="string">/tmp</span> 临时目录</span><br><span class="line"><span class="string">/usr</span> 系统软件资源目录</span><br><span class="line">2<span class="string">/usr/bin</span> 系统命令<span class="params">(普通用户)</span></span><br><span class="line">2<span class="string">/usr/sbin</span> 系统命令<span class="params">(root)</span></span><br><span class="line"><span class="string">/var</span> 系统相关的文档内容</span><br></pre></td></tr></table></figure></p><h2 id="链接命令-link"><a href="#链接命令-link" class="headerlink" title="链接命令(link)"></a>链接命令(link)</h2><blockquote><p>ln -s [原文件]] [目标文件]</p></blockquote><p>选项：</p><ul><li>-s 生成软连接 不带s则生成 硬链接</li></ul><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>特点：</p><blockquote><p>1.拥有相同的i节点和存储block块，可以看成是同一个文件<br>2.可通过i节点识别<br>3.不能跨分区<br>4.不能针对目录使用<br>5.删除一个，另一个还在（通过i节点识别）</p></blockquote><h3 id="软链接："><a href="#软链接：" class="headerlink" title="软链接："></a>软链接：</h3><p>特点：</p><blockquote><p>1.类似windows的快捷方式<br>2.软链接有自己的i节点和block块，数据只保存在原文件的文件名和i节点，并没有实际的文件数据<br>3.lrwx—–  第一个l表示软链接<br>4.修改原文件，改任何一个的都会改变，<br>5.删除原文件，软链接不能使用（硬链接不影响使用）<br>6.删除软链接可以使用原文件<br>7.软链接的权限777，但是实际权限是原文件的权限<br>8.创建软链接时原文件必须写绝对路径</p></blockquote><p>查看i节点：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ls -i</span></span><br></pre></td></tr></table></figure></p><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><blockquote><p>1.文件搜索命令: locate<br>2.文件搜索命令: find<br>3.命令搜索命令: whereis, which<br>4.字符串搜索命令: grep</p></blockquote><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><blockquote><p>locate 文件名</p></blockquote><p>在后台数据库按文件名搜索，速度快, locate命令搜索的数据库是 <code>/var/lib/locate</code><br>每天更新一次，所有新建文件后可以强制更新该数据库：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br></pre></td></tr></table></figure></p><p>locate使用特点：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只能按文件名搜索</span><br><span class="line">配置文件: /etc/updatedb.conf</span><br><span class="line">配置里面的选项是不搜索的文件系统</span><br><span class="line">MAC系统和linux系统的locate有差异</span><br></pre></td></tr></table></figure></p><h3 id="whereis-where-which"><a href="#whereis-where-which" class="headerlink" title="whereis (where), which"></a>whereis (where), which</h3><blockquote><p>whereis 查看执行位置和帮助文档位置</p></blockquote><p>选项：</p><ul><li>-b 只查找可执行文件</li><li>-m 之查找帮助文件</li></ul><p>which 查看命令的可执行位置和别名</p><blockquote><p>which</p></blockquote><p><strong>只能查外部安装的命令，即只能查需要执行脚本文件的命令</strong><br>搜索依赖于环境变量 $PATH</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>文件搜索命令, 很强大</p><blockquote><p>find [搜索范围] [搜索条件]</p></blockquote><p>eg:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name nginx.conf</span><br><span class="line"><span class="builtin-name">find</span> ~/.ssh -name config</span><br></pre></td></tr></table></figure></p><p><strong>避免大范围搜索，很消耗系统资源</strong>。<br>find是在系统中搜索符合条件的文件名，如果需要匹配，使用通配符匹配，通配符是完全匹配.</p><h3 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>匹配任意内容</span><br><span class="line">? 匹配任意一个字符</span><br><span class="line">[] 匹配任意一个中括号内的字符</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-name  按名称</li><li>-iname 不区分大小写按名称</li><li>-user  按所有者搜索</li><li>-nouser 查找没有所有者的文件（内核文件没有所有者，u盘的数据可能没有所有者，windows文件没有所有者）</li><li>-mtime 查找限定时间前修改的文件 默认是天</li></ul><p>eg：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">find /var/log/ -mtime +<span class="number">10</span> #查找<span class="number">10</span>天前修改的文件</span><br><span class="line"><span class="number">-10</span><span class="number">10</span>天内</span><br><span class="line"><span class="number">10</span><span class="number">10</span>天当天</span><br><span class="line">+<span class="number">10</span><span class="number">10</span>天前</span><br><span class="line">-atime 文件访问时间</span><br><span class="line">-ctime 改变文件属性</span><br><span class="line">-mtime 修改文件内容</span><br><span class="line"></span><br><span class="line">find / -size <span class="number">25</span>k #查找文件大小是<span class="number">25</span>kb的文件</span><br><span class="line">—<span class="number">25</span> 小于<span class="number">25</span>kb</span><br><span class="line"><span class="number">25</span>kb 等于<span class="number">25</span>kb</span><br><span class="line">+<span class="number">25</span>kb 大于<span class="number">25</span>kb</span><br><span class="line"></span><br><span class="line">find / -size +<span class="number">25</span>k -a <span class="number">-50</span>k # 大于<span class="number">25</span>k 且 小于<span class="number">50</span>k</span><br><span class="line">find / -size <span class="number">-25</span>k -o +<span class="number">50</span>k # 小于<span class="number">25</span>k 或 大于<span class="number">50</span>k</span><br><span class="line"></span><br><span class="line">find / -size <span class="number">25</span>k -exec ls -lh &#123;&#125; \; #查找，并显示详细信息</span><br></pre></td></tr></table></figure></p><p>查找到的文件执行后面的操作 -exec:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-exec <span class="string">...</span> &#123;&#125; \;  <span class="comment">#标准格式</span></span><br><span class="line">find . -inum 262422 <span class="comment">#查找i节点是262422的文件</span></span><br><span class="line"><span class="comment"># k字节小写， M字节大写</span></span><br><span class="line"><span class="keyword">ls</span> -i 文件名</span><br></pre></td></tr></table></figure></p><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>在指定文件中搜索字符串</p><blockquote><p>grep [选项] 字符串 文件名<br>选项：</p><ul><li>-i 忽略大小写</li><li>-v 排除指定字符串， 取反搜索</li></ul></blockquote><p>eg:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span><span class="string">"size"</span> file_name</span><br><span class="line"><span class="keyword">grep</span><span class="string">"size"</span> file1 file2 file3  <span class="comment">#多文件搜索</span></span><br></pre></td></tr></table></figure></p><p>标记匹配颜色 –color=auto 选项：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"size"</span><span class="built_in">file_name</span> --<span class="built_in">color</span>=auto</span><br></pre></td></tr></table></figure></p><p>使用正则表达式 -E 选项：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -E <span class="string">"[1-9]+"</span></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">egrep <span class="string">"[1-9]+"</span></span><br></pre></td></tr></table></figure></p><p>只输出文件中匹配到的部分 -o 选项：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> this <span class="keyword">is</span><span class="keyword">a</span> test <span class="built_in">line</span>. | <span class="keyword">grep</span> -<span class="keyword">o</span> -E <span class="string">"[a-z]+\."</span></span><br></pre></td></tr></table></figure></p><h3 id="grep-和-find-区别"><a href="#grep-和-find-区别" class="headerlink" title="grep 和 find 区别"></a>grep 和 find 区别</h3><ul><li>find 在系统中搜索文件名，通配符匹配， 通配符是<em>完全匹配</em></li><li>grep 在文件中搜索字符串，可以使用正则匹配，正则是<em>包含匹配</em></li></ul><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p> man 命令</p><ul><li>查看有哪些级别:<blockquote><p>man -f 命令  == whatis 命令</p></blockquote></li><li><p>查看指定级别:</p><blockquote><p>man -5 passwd<br>man -4 null<br>man -8 ifconfig</p></blockquote></li><li><p>查看所有含有命令关键词的信息:</p><blockquote><p>man -k 命令</p></blockquote></li></ul><h3 id="其他帮助命令"><a href="#其他帮助命令" class="headerlink" title="其他帮助命令"></a>其他帮助命令</h3><ul><li>选项帮助: –help</li></ul><p>命令帮助选项</p><ul><li>shell内部命令： help</li></ul><p>获取shell内部的帮助，shell有自带的一些命令，比如cd,help<br>可以通过whereis cd 确定是否是shell内部命令，看可执行文件</p><blockquote><p>help cd #command not found: help</p></blockquote><ul><li>info</li></ul><h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><ul><li>常营压缩格式：<blockquote><p>.zip  .gz  .bz2<br>.tar.gz  .tar.bz2</p></blockquote></li></ul><p><strong>linux文件不区分后缀名，但是压缩文件为了区分文件类型和压缩类型，必须要在后缀中写清楚格式</strong><br>按压缩格式来记命令笔记方便</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul><li>压缩文件：<blockquote><p>zip 压缩文件名  源文件</p></blockquote></li><li>压缩目录“<blockquote><p>zip -r 压缩文件名  源目录</p></blockquote></li><li>解压缩：<blockquote><p>unzip 压缩文件</p></blockquote></li></ul><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><ul><li>压缩为.gz格式文件，源文件会消失：<blockquote><p>gzip 源文件</p></blockquote></li><li>压缩为.gz格式，源文件保留：<blockquote><p>gzip -c 源文件 &gt; 压缩文件<br>eg：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -c <span class="selector-tag">a</span><span class="selector-class">.js</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.js</span>.gz</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>实际上是把源文件输出到新的文件</p><ul><li>压缩目录<br>压缩目录实际上是把目录内的文件全部压缩<blockquote><p>gzip -r 目录</p></blockquote></li></ul><p>压缩目录下所有子文件，但是不能压缩目录</p><ul><li><p>解压缩文件</p><blockquote><p>gzip -d 压缩文件<br>gunzip 压缩文件</p></blockquote></li><li><p>解压缩目录</p><blockquote><p>gunzip -r 压缩目录</p></blockquote></li></ul><h3 id="bz2-（不能压缩目录）"><a href="#bz2-（不能压缩目录）" class="headerlink" title=".bz2 （不能压缩目录）"></a>.bz2 （不能压缩目录）</h3><p>压缩文件：</p><blockquote><p>bzip2 文件名<br>bzip2 -k 文件名</p></blockquote><p>解压缩文件：</p><blockquote><p>-k 保留压缩文件<br>bzip2 -d 压缩文件<br>bunzip2 压缩文件</p></blockquote><p><strong>上面三个压缩命令只有zip可以压缩没有了， gzip压缩目录实际上是压缩了目录内的文件，bz2直接回报错，可以用tar命令打包，然后再压缩</strong></p><h3 id="打包命令-tar"><a href="#打包命令-tar" class="headerlink" title="打包命令 tar"></a>打包命令 tar</h3><ul><li>打包命令：<blockquote><p>tar -cvf 打包文件名 源文件</p></blockquote></li></ul><p>选项：</p><ul><li>-c 打包</li><li>-v 显示过程</li><li><p>-f 指定打包后的文件名<br>eg:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span><span class="selector-tag">-cvf</span><span class="selector-tag">longzls</span><span class="selector-class">.tar</span><span class="selector-tag">longzls</span></span><br></pre></td></tr></table></figure></li><li><p>解打包命令：</p><blockquote><p>tar -xvf 打包文件名</p></blockquote></li></ul><p>选项：</p><ul><li>-x: 解打包<br>eg:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span><span class="selector-tag">-xvf</span><span class="selector-tag">longzls</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="tar-gz"><a href="#tar-gz" class="headerlink" title=".tar.gz"></a>.tar.gz</h3><p>.tar.gz格式是先打包为.tar格式，然后压缩为.gz格式</p><blockquote><p>tar -zcvf 压缩包名.tar.gz 源文件</p></blockquote><p>选项：</p><ul><li>-z 压缩为.tar.gz格式</li></ul><blockquote><p>tar -zxvf 压缩包名.tar.gz</p></blockquote><p>选项：</p><ul><li>-x 解压缩.tar.gz格式</li></ul><h3 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title=".tar.bz2"></a>.tar.bz2</h3><blockquote><p>tar -jcvf 压缩包名.tar.bz2 源文件</p></blockquote><p>选项：</p><ul><li>-j 压缩为.tar.bz2格式</li></ul><blockquote><p>tar -jxvf 压缩包名.tar,bz2</p></blockquote><p>选项：</p><ul><li>-x 解压缩.tar.bz2格式</li></ul><p>指定解压缩位置：</p><blockquote><p>tar -jxvf 压缩包名.gz.bz2  -C 解压缩位置</p></blockquote><p>注意： 选项大写C必须写到压缩包名后面</p><p>压缩多个文件时压缩文件名用空格连接</p><p>查看包里面内容不解压，选项：</p><ul><li>-t</li></ul><p><strong>Linux最常用的压缩格式是.tar.gz和.tar.bz2</strong></p><h2 id="Linux的关机和重启命令"><a href="#Linux的关机和重启命令" class="headerlink" title="Linux的关机和重启命令"></a>Linux的关机和重启命令</h2><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><blockquote><p>shutdown [选项] 时间</p></blockquote><p>选项：</p><ul><li>-c 取消前一个挂机命令</li><li>-h 关机</li><li>-r 重启</li></ul><p>时间：</p><ul><li>now #立即执行</li><li>10 #十分钟后执行</li></ul><p>eg:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h <span class="number">2</span>:<span class="number">33</span> # <span class="number">2</span>:<span class="number">32</span> 关机</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure></p><p>shutdown 命令可以正确保持关机前的文件，比较安全.</p><p><strong>以下命令关机不安全</strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">halt</span><br><span class="line">poweroff</span><br><span class="line">init <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="重启："><a href="#重启：" class="headerlink" title="重启："></a>重启：</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br><span class="line">init <span class="number">6</span></span><br></pre></td></tr></table></figure><p>reboot 是比较安全的重启方式</p><h3 id="退出登录："><a href="#退出登录：" class="headerlink" title="退出登录："></a>退出登录：</h3><blockquote><p>logout</p></blockquote><h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><p>查询系统中挂载的点：</p><blockquote><p>mount</p></blockquote><p>依据/etc/fstab文件自动挂载：</p><blockquote><p>mount -a</p></blockquote><p>挂载命令格式：</p><blockquote><p>mount [-t 文件系统] [-o 特殊选项] 设备文件名 挂载点</p></blockquote><p>选项：</p><ul><li>-t 文件系统：eg:ext3,ext4, ios9660….</li><li>-o 特殊选项：可以指定挂载的额外选项</li></ul><p>挂载光盘(先要插入光盘或者虚拟机导入iso镜像):</p><p>1.建立挂载点：</p><blockquote><p>mkdir /mnt/cdrom/</p></blockquote><p>2.挂载光盘</p><blockquote><p>mount -t iso9660 /dev/cdrom/ /mnt/cdrom/</p></blockquote><p>3.简写（默认的文件系统）</p><blockquote><p>mount /dev/sr0 /mnt/cdrom</p></blockquote><p>4.卸载命令：</p><blockquote><p>umount 设备名或挂载点<br>umount /mnt/cdrom</p></blockquote><p>5.挂载U盘:</p><blockquote><p>fdisk -l # 查看U盘设备文件名<br>mount -t vfat /dev/sdb1 /mnt/ust/</p></blockquote><h2 id="远程登录y用户信息查看"><a href="#远程登录y用户信息查看" class="headerlink" title="远程登录y用户信息查看"></a>远程登录y用户信息查看</h2><blockquote><p>w</p></blockquote><p><code>w</code> 命令查看系统远程登录用户信息，包括系统资源</p><blockquote><p> who</p></blockquote><p><code>who</code> 命令查看系统远程登录用户信息，功能和w命令类似，不过没有系统资源信息</p><blockquote><p>last</p></blockquote><p>last命令默认是读取<code>/var/log/wtmp</code>文件的数据。命令输出：</p><blockquote><p>用户名  登录终端 登录ip 登录时间 退出时间(在线时间)</p></blockquote><blockquote><p>lastlog</p></blockquote><p>查询所有用户的最后一次登录</p><p>参考：<br><a href="http://man.linuxde.net/chmod" target="_blank" rel="noopener">chmod命令</a><br><a href="http://www.runoob.com/linux/linux-comm-chmod.html" target="_blank" rel="noopener">Linux chmod命令</a></p>]]></content><categories><category> 后端 </category></categories><tags><tag> linux </tag><tag> bash </tag></tags></entry><entry><title>mongodb学习笔记</title><link href="/mongodb-notes.html"/><url>/mongodb-notes.html</url><content type="html"><![CDATA[<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>在mac下启动mongod服务时，如果读取默认配置文件的话直接执行<code>mongod</code>就行了，如果要添加其他配置可以添加对应的配置项，但是最合理的应该是读取配置文件且后台运行服务。<br>使用 -f 或 –config 选项指定配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f  /etc/mongod.conf &amp;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">mongod --config  /etc/mongod.conf &amp;</span><br></pre></td></tr></table></figure></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>如果存在则切换，不存在则创建<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure><p>发现刚刚创建的数据库没有有显示出来，可以插入数据<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runoob.<span class="built_in">insert</span>(&#123;<span class="string">"name"</span>:<span class="string">"菜鸟教程"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>然后执行<code>show dbs</code>发现刚刚创建的数据库显示出来了</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>以下命令删除的是当前的数据库，如果要删除非当前数据库需要先使用<code>use DATABASE_NAME</code>命令切换过去，然后执行以下命令<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.dropDatabase</span>()</span><br></pre></td></tr></table></figure></p><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create<span class="constructor">Collection(<span class="params">name</span>, <span class="params">optipon</span>)</span></span><br></pre></td></tr></table></figure><ul><li>name: 集合名称</li><li>options： 可选参数对象，有以下选项<ul><li>capped: 布尔 (可选)， 如果为true则创建固定集合，是指有固定大小的集合，当达到最大值时会自动覆盖最早的数据， 当该值为true时，必须指定size参数</li><li>autoIndexId: 布尔 （可选）如果为true，则自动在_id字段创建索引，默认为false</li><li>size: 数值 （可选） 固定集合指定一个最大值， 单位是字节</li><li>max: 数值 （可选） 固定集合中包含的文档的最大数量</li></ul></li></ul><h3 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h3><p>查看当前数据库的已有集合<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">db.createCollection("my_test_coll1",</span><span class="string">&#123;</span><span class="attr">capped:</span><span class="literal">true</span><span class="string">,</span><span class="attr">autoIndexId:</span><span class="literal">true</span><span class="string">,</span><span class="attr">size:</span><span class="number">6142800</span><span class="string">,</span><span class="attr">max :</span><span class="number">10000</span><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>在mongodb中也可以通过直接插入数据创建集合<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.my_test_coll2.<span class="built_in">insert</span>(&#123;<span class="string">"name"</span>: <span class="string">"mhyuan"</span>, <span class="string">"age"</span>: <span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.drop</span>()</span><br></pre></td></tr></table></figure><p>如果删除成功返回true，否则返回false</p><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。mongodb中所有存储在集合中的数据都是BSON结构。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.insert</span>(<span class="selector-tag">document</span>)</span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">title</span>: <span class="string">'MongoDB 教程'</span>,</span><br><span class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</span><br><span class="line">    by: <span class="string">'mhy'</span>,</span><br><span class="line">    url: <span class="string">'http://www.mhynet.cn'</span>,</span><br><span class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">    likes: <span class="number">100</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>可以将数据定义成一个变量，然后插入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">document</span>=(&#123;title: <span class="string">'MongoDB 教程'</span>,</span><br><span class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</span><br><span class="line">    by: <span class="string">'mhy'</span>,</span><br><span class="line">    url: <span class="string">'http://www.mhynet.cn'</span>,</span><br><span class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col2</span><span class="selector-class">.insert</span>(<span class="selector-tag">document</span>)</span><br></pre></td></tr></table></figure></p><p>也可以执行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.save</span>(<span class="selector-tag">document</span>)</span><br></pre></td></tr></table></figure></p><p>如果不知道_id字段则效果和insert一样，如果指定了_id，则会更新该_id的数据</p><ul><li><p>db.collection.insertOne(): 向指定集合中插入一条文档数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insert<span class="constructor">One(&#123;<span class="string">"a"</span>: 3&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>db.collection.insertMany(): 向指定集合中插入多条文档数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.insertMany</span>(<span class="selector-attr">[&#123;<span class="string">"b"</span>: 3&#125;, &#123;<span class="string">'c'</span>: 4&#125;]</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>mongodb使用updata()和save()方法更新数据<br>update()方法用于更新已存在的文档<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">2<span class="params">&lt;query&gt;</span>,</span><br><span class="line">2<span class="params">&lt;update&gt;</span>,</span><br><span class="line">2&#123;</span><br><span class="line"><span class="symbol">upsert:</span><span class="params">&lt;boolean&gt;</span>,</span><br><span class="line"><span class="symbol">multi:</span><span class="params">&lt;boolean&gt;</span>,</span><br><span class="line"><span class="symbol">writeConcern:</span><span class="params">&lt;document&gt;</span></span><br><span class="line">2&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>参数说明：<ul><li>query: update的查询条件，类似于SQL update 的where后面的</li><li>update: update的对象和一些更新的操作符（如$,$inc…），也可以理解为SQL update 查询内set后面的</li><li>upsert: 可选， 如果不存在update的记录，是否插入数据， true为插入， 默认为false</li><li>multi: 可选， mongodb默认为false，只更新找到的第一条记录，如果这个参数为true，就把按条件查出来的多条记录全部更新</li><li>writeConcern: 可选，抛出异常的级别</li></ul></li></ul><ul><li><p>只更新第一条记录：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="symbol">$</span><span class="keyword">gt</span> : <span class="number">1</span> &#125; &#125; , &#123; <span class="symbol">$</span><span class="keyword">set</span> : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125; );</span><br></pre></td></tr></table></figure></li><li><p>全部更新：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="symbol">$</span><span class="keyword">gt</span> : <span class="number">3</span> &#125; &#125; , &#123; <span class="symbol">$</span><span class="keyword">set</span> : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125;,false,true <span class="comment">)</span>;</span><br></pre></td></tr></table></figure></li><li><p>只添加第一条：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="symbol">$</span><span class="keyword">gt</span> : <span class="number">4</span> &#125; &#125; , &#123; <span class="symbol">$</span><span class="keyword">set</span> : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,true,false <span class="comment">)</span>;</span><br></pre></td></tr></table></figure></li><li><p>全部添加进去:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="symbol">$</span><span class="keyword">gt</span> : <span class="number">5</span> &#125; &#125; , &#123; <span class="symbol">$</span><span class="keyword">set</span> : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,true,true <span class="comment">)</span>;</span><br></pre></td></tr></table></figure></li><li><p>全部更新：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.<span class="keyword">update</span>( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : <span class="number">15</span> &#125; &#125; , &#123; <span class="variable">$inc</span> : &#123; <span class="string">"count"</span> : <span class="number">1</span>&#125; &#125;<span class="built_in">,false</span><span class="built_in">,true</span> );</span><br></pre></td></tr></table></figure></li><li><p>只更新第一条记录：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.<span class="keyword">update</span>( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : <span class="number">10</span> &#125; &#125; , &#123; <span class="variable">$inc</span> : &#123; <span class="string">"count"</span> : <span class="number">1</span>&#125; &#125;<span class="built_in">,false</span><span class="built_in">,false</span> );</span><br></pre></td></tr></table></figure></li></ul><h3 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h3><p>save方法通过传入的文档来替换已有文档<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.save</span>(</span><br><span class="line">2&lt;<span class="selector-tag">document</span>&gt;,</span><br><span class="line">2&#123;</span><br><span class="line">22<span class="attribute">writeConcern</span>: &lt;document&gt;</span><br><span class="line">2&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>参数说明：<ul><li>document: 文档数据</li><li>writeConcern: 可选， 抛出异常的级别</li></ul></li></ul><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db<span class="built_in">.collection</span><span class="built_in">.remove</span>(</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">query</span>&gt;</span>,</span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">justOne</span>&gt;</span></span></span><br><span class="line"><span class="xml">)</span></span><br><span class="line"><span class="xml">如果你的 Mong</span></span><br></pre></td></tr></table></figure><p>如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.remove</span>(</span><br><span class="line">   &lt;<span class="selector-tag">query</span>&gt;,</span><br><span class="line">   &#123;</span><br><span class="line"><span class="attribute">justOne</span>: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><ul><li>参数说明<ul><li>query : （可选）删除的文档的条件。</li><li>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li>writeConcern :（可选）抛出异常的级别。</li></ul></li></ul><blockquote><p>remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。</p></blockquote><blockquote><p>如删除集合下全部文档：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.deleteMany</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 status 等于 A 的全部文档：</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.deleteMany</span>(&#123; <span class="attribute">status </span>: <span class="string">"A"</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 status 等于 D 的一个文档：</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.deleteOne</span>( &#123; <span class="attribute">status</span>: <span class="string">"D"</span> &#125; )</span><br></pre></td></tr></table></figure></p></blockquote><p>remove() 方法 并不会真正释放空间。<br>需要继续执行 db.repairDatabase() 来回收磁盘空间</p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.find</span>(<span class="selector-tag">query</span>, <span class="selector-tag">projection</span>)</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>query ：可选，使用查询操作符指定查询条件</li><li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li></ul></li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure></p><p>pretty() 方法以格式化的方式来显示所有文档。</p><p>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</p><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>RDBMS中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td>{\<key>:\<value>}</value></key></td><td>db.col.find({“by”:”菜鸟教程”}).pretty()</td><td>where by = ‘菜鸟教程’</td></tr><tr><td>小于</td><td>{\<key>:{$lt:\<value>}}</value></key></td><td>db.col.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>小于或等于</td><td>{\<key>:{$lte:\<value>}}</value></key></td><td>db.col.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>大于</td><td>{\<key>:{$gt:\<value>}}</value></key></td><td>db.col.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>大于或等于</td><td>{\<key>:{$gte:\<value>}}</value></key></td><td>db.col.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>不等于</td><td>{\<key>:{$ne:\<value>}}</value></key></td><td>db.col.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><ul><li>MongoDB AND 条件</li></ul><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。</p><p>语法格式如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.find</span>(&#123;<span class="attribute">key1</span>:value1, <span class="attribute">key2</span>:value2&#125;)<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.col.<span class="builtin-name">find</span>(&#123;<span class="string">"by"</span>:<span class="string">"菜鸟教程"</span>, <span class="string">"title"</span>:<span class="string">"MongoDB 教程"</span>&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</span><br><span class="line"><span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</span><br><span class="line"><span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line"><span class="string">"by"</span> : <span class="string">"菜鸟教程"</span>,</span><br><span class="line"><span class="string">"url"</span> : <span class="string">"http://www.runoob.com"</span>,</span><br><span class="line"><span class="string">"tags"</span> : [</span><br><span class="line"><span class="string">"mongodb"</span>,</span><br><span class="line"><span class="string">"database"</span>,</span><br><span class="line"><span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line"><span class="string">"likes"</span> : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上实例中类似于 WHERE 语句：WHERE by=’菜鸟教程’ AND title=’MongoDB 教程’</p><ul><li><p>MongoDB OR 条件<br>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.find</span>(</span><br><span class="line">   &#123;</span><br><span class="line">      $<span class="attribute">or</span>: [</span><br><span class="line">         &#123;<span class="attribute">key1</span>: value1&#125;, &#123;<span class="attribute">key2</span>:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">)<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure></li><li><p>AND 和 OR 联合使用<br>类似常规 SQL 语句为：<code>&#39;where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)&#39;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.col.<span class="builtin-name">find</span>(&#123;<span class="string">"likes"</span>: &#123;<span class="variable">$gt</span>:50&#125;, <span class="variable">$or</span>: [&#123;<span class="string">"by"</span>: <span class="string">"菜鸟教程"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"MongoDB 教程"</span>&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</span><br><span class="line"><span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</span><br><span class="line"><span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line"><span class="string">"by"</span> : <span class="string">"菜鸟教程"</span>,</span><br><span class="line"><span class="string">"url"</span> : <span class="string">"http://www.runoob.com"</span>,</span><br><span class="line"><span class="string">"tags"</span> : [</span><br><span class="line"><span class="string">"mongodb"</span>,</span><br><span class="line"><span class="string">"database"</span>,</span><br><span class="line"><span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line"><span class="string">"likes"</span> : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content><categories><category> 数据库 </category></categories><tags><tag> mongodb </tag><tag> 数据库 </tag></tags></entry><entry><title>vuex学习笔记</title><link href="/vuex-notes.html"/><url>/vuex-notes.html</url><content type="html"><![CDATA[<blockquote><p>vuex是为Vue应用开发的<strong>状态管理模式</strong>。<br>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p></blockquote><p>这个状态自管理应用包含以下几个部分：</p><ul><li>state，驱动应用的数据源；</li><li>view，以声明方式将 state 映射到视图；</li><li>actions，响应在 view 上的用户输入导致的状态变化。<a id="more"></a><strong>单向数据流</strong><img src="https://vuex.vuejs.org/zh-cn/images/flow.png" style="width: 400px; display: block;"></li></ul><p><strong>多个组件共享状态</strong><br><img src="https://vuex.vuejs.org/zh-cn/images/vuex.png" style="width: 400px; display: block;"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure></p><p>使用yarn安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure></p><p>在项目中使用<code>Vue.use()</code>来安装引入 Vuex<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span><span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span><span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><h4 id="在-Vue-组件中获得-Vuex-状态"><a href="#在-Vue-组件中获得-Vuex-状态" class="headerlink" title="在 Vue 组件中获得 Vuex 状态"></a>在 Vue 组件中获得 Vuex 状态</h4><p>从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Counter 组件</span></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line"><span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line"><span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h4><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line"><span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class="line">    countAlias: <span class="string">'count'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line"><span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line"><span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line"><span class="string">'count'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h4 id="对象展开运算符"><a href="#对象展开运算符" class="headerlink" title="对象展开运算符"></a>对象展开运算符</h4><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符（现处于 ECMASCript 提案 stage-3 阶段），我们可以极大地简化写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line"><span class="comment">// 使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class="line">  ...mapState(&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        todos: [</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">test</span>: <span class="string">'...'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>Getter 会暴露为 store.getters 对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneTodos <span class="comment">// -&gt; [&#123; id: 1, text: '...', done: true &#125;]</span></span><br></pre></td></tr></table></figure></p><p>我们可以很容易地在任何组件中使用它：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h4><p>mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="comment">//使用对象展开符 将 getter 混入 computed 对象中</span></span><br><span class="line">        ...mapGetters([</span><br><span class="line"><span class="string">'doneTodosCount'</span>,</span><br><span class="line"><span class="string">'anothersGetters'</span>,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapGetters([</span><br><span class="line"><span class="comment">// 映射 `this.doneCount` 为 `store.getters.doneTodosCount`</span></span><br><span class="line">    doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutation: &#123;</span><br><span class="line">        increment(state) &#123;</span><br><span class="line">            count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure></p><p>可以传入额外的参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>多数情况下为一个对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h4><p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">muations: &#123;</span><br><span class="line">    increment (state, payload) &#123;</span><br><span class="line">        state.count += payload.amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.commit(&#123;</span><br><span class="line">    type: <span class="string">'increment'</span>,</span><br><span class="line">    amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="Mutation-需遵守-Vue-的响应规则"><a href="#Mutation-需遵守-Vue-的响应规则" class="headerlink" title="Mutation 需遵守 Vue 的响应规则"></a>Mutation 需遵守 Vue 的响应规则</h4><p>Vuex 的 store 中的状态是响应式的，所以当我们变更状态时，监视状态的Vue组件也会自动更新。 意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><ul><li>最好提前在 store 中 初始化所有需要的属性</li><li>当需要在对象上添加新属性时：<ul><li>使用 Vue.set(obj, ‘newProp’, 123) 或者</li><li>以新对象替换旧对象。例如，使用 stage-3 的 对象展开运算符：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="使用常量替代-Mutation-事件类型"><a href="#使用常量替代-Mutation-事件类型" class="headerlink" title="使用常量替代 Mutation 事件类型"></a>使用常量替代 Mutation 事件类型</h4><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span><span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span><span class="string">'mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.store(&#123;</span><br><span class="line">  state: &#123;...&#125;,</span><br><span class="line">  mutation: &#123;</span><br><span class="line"><span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line"><span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用常量对于多人协作的大型项目很有帮助， 但不是必需的。</p><h4 id="Mutation-必须是同步函数"><a href="#Mutation-必须是同步函数" class="headerlink" title="Mutation 必须是同步函数"></a>Mutation 必须是同步函数</h4><p><strong>mutation必须是同步函数</strong></p><h4 id="在组件中提交-mutation"><a href="#在组件中提交-mutation" class="headerlink" title="在组件中提交 mutation"></a>在组件中提交 mutation</h4><p>在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation ，或者使用 <code>mapMutation</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations ([</span><br><span class="line"><span class="string">'increment'</span>, <span class="comment">// 将`this.increment()` 映射为`this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line"><span class="string">'incrementBy'</span><span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      add: <span class="string">'increment'</span><span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mutation都是同步事物，处理异步事物需要使用action.</p><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>让我们来注册一个简单的 action：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    motations: &#123;</span><br><span class="line">        increment(state) &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        increment (context) &#123;</span><br><span class="line">            context.commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h4><p>Action 通过 store.dispatch 方法触发：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure></p><p>可以在 action 内部进行异步操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">action: &#123;</span><br><span class="line">  incrementAsync(&#123;commit&#125;)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Actions 支持同样的载荷方式和对象方式进行分发：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">'incrementAsync'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'incrementAsync'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>来看一个官方文档上更加实际的购物车示例，涉及到调用异步 API 和分发多重 mutation：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class="line"><span class="comment">// 把当前购物车的物品备份起来</span></span><br><span class="line"><span class="keyword">const</span> savedCartItems = [...state.cart.added]</span><br><span class="line"><span class="comment">// 发出结账请求，然后乐观地清空购物车</span></span><br><span class="line">    commit(types.CHECKOUT_REQUEST)</span><br><span class="line"><span class="comment">// 购物 API 接受一个成功回调和一个失败回调</span></span><br><span class="line">    shop.buyProducts(</span><br><span class="line">      products,</span><br><span class="line"><span class="comment">// 成功操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</span><br><span class="line"><span class="comment">// 失败操作</span></span><br><span class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来一个：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span><span class="string">'axios'</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span><span class="function"><span class="keyword">function</span><span class="title">loadmore</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> details = state.details</span><br><span class="line"><span class="keyword">let</span> resp = <span class="keyword">await</span> axios.get(url)</span><br><span class="line"><span class="keyword">return</span> resp.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line"><span class="keyword">async</span> moreDetails(&#123;commit, state&#125;) &#123;</span><br><span class="line">    commit(<span class="string">'loadmore'</span>, <span class="keyword">await</span> loadmore(state))</span><br><span class="line">  &#125;,</span><br><span class="line">  changeAddress(&#123;commit, address&#125;) &#123;</span><br><span class="line">    commit(<span class="string">'CHANGEADDRESS'</span>, address)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="keyword">async</span> resetAddress(&#123;commit&#125;) &#123;</span><br><span class="line"><span class="keyword">let</span> addresses = []</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> resp = <span class="keyword">await</span> axios.get(<span class="string">`...`</span>)</span><br><span class="line">      addresses = resp.data</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    commit(<span class="string">'CHANGEADDRESS'</span>, addresses)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在组件中分发-Action"><a href="#在组件中分发-Action" class="headerlink" title="在组件中分发 Action"></a>在组件中分发 Action</h4><p>在组件中分发action有两种方式：</p><ul><li>使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code></li><li>使用 <code>mapActions</code> 辅助函数将组件的 <code>methods</code> 映射为 <code>store.dispatch</code>来调用（需要在根节点注入store）<br>来个官网的例子：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span><span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line"><span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line"><span class="string">'incrementBy'</span><span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span><span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="组合使用-Action"><a href="#组合使用-Action" class="headerlink" title="组合使用 Action"></a>组合使用 Action</h4><p>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line">actions: &#123;</span><br><span class="line"><span class="keyword">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line"><span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></p><p><a href="https://vuex.vuejs.org/zh-cn/api.html" target="_blank" rel="noopener">Vuex官方API文档</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> vue </tag><tag> vuex </tag></tags></entry><entry><title>移动端页面远程调试</title><link href="/mobile-remote-debug.html"/><url>/mobile-remote-debug.html</url><content type="html"><![CDATA[<p>本文记录一下移动端页面调试的方法，待日后有时间在详细说明相关步骤。</p><a id="more"></a><h2 id="手机连接代理"><a href="#手机连接代理" class="headerlink" title="手机连接代理"></a>手机连接代理</h2><p>手机端调试页面都需要代理，IOS和安卓都一样，连接代理的方式因手机类型不同稍有差异，但是归纳起来只有开启权限、下载证书、配置代理几部分。<br>首先需要在电脑上打开Charles应用程序，<br>Charles官网是<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">https://www.charlesproxy.com/</a>，<br>安装证书的方式都大同小异,在浏览器中打开charles官网，下载证书，然后安装。如果安装失败，很大的可能是浏览器权限或者手机设置不对。一般只需要在浏览器中打开Charles官网，连接代理后访问页面会自动下载代理。</p><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>连接完代理之后需要安装证书，否则无法解析https的数据。<br>依次点击: 电脑上charles的help菜单 =&gt; SSL Proxying =&gt; ios手机：install Charles Root ceritificate in ios simulatore; Android手机： on a mobile devices or remote browser =&gt; 弹窗中的 chls.pro/ssl 输入到手机的浏览器中下载证书 =&gt; 在手机上点击该文件进行安装 =&gt; 部分手机的可以识别.pem证书，可以直接安装，不识别该类型文件的手机需要手动安装，请继续下面的操作 =&gt; 找到该证书文件所在资源管理器中的路径，记住它，QQ浏览器下载的路径一般在: Tentcent/QQfile_recv目录下 =&gt; 接下来是手动安装, 打开手机的设置 =&gt; 找到 “安全与隐私” 菜单，点进入，不同的手机菜单不同，请根据不同手机进行实际查找，进入该菜单下 =&gt; 在当前菜单或其子菜单中找到 “从存储设备安装” 菜单(华为mate20手机，在该目录下的 更多安全设置 -&gt; 加密与凭证 下) =&gt; 然后进入了资源管理器，找到刚才的证书路径，安装证书</p><p>不同的手机找中 “从存储设备安装”功能菜单的路径有差异，基本上都可以在安全与隐私菜单下面找到，有些手机可以在设置中直接搜索，极大地方便了查找。</p><h2 id="安卓手机远程调试"><a href="#安卓手机远程调试" class="headerlink" title="安卓手机远程调试"></a>安卓手机远程调试</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3" target="_blank" rel="noopener">远程调试 Android 设备使用可以参考这本篇文章</a><br>需要注意的是该方法必须使用Chrome浏览器，浏览器需要相关权限。</p><h2 id="IOS手机远程调试"><a href="#IOS手机远程调试" class="headerlink" title="IOS手机远程调试"></a>IOS手机远程调试</h2><p>IOS手机远程调试需要使用的是原生浏览器safari，同样需要数据线连接电脑，连接代理<br>需要的相关设置</p><p>手机端：<br>依次进入：设置 &gt; Safari &gt; 高级，然后开启Javascript 和 Web检查器</p><p>电脑端：<br>打开 Safari 浏览器， 在设置里面打开： 设置 &gt; 高级 , 勾选最后面的 <em>在菜单中显示“开发”菜单</em>，在电脑用户名选项下勾选<em>自动显示JSContext的网页检查器</em>，然后在手机端的Safari浏览器中打开需要调试的页面，电脑Safari浏览器的开发菜单中会出现一个手机名称的选项卡，里面会显示出手机端在Safari中打开的所有页面，点击需要调试的页面即可。如果没有显示出来，重启电脑上的Safari浏览器即可。如果还么有，可能是数据线或者设置的问题，检查相关步骤有没有问题。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> 安卓 </tag><tag> 调试 </tag></tags></entry><entry><title>dispatchEvent的用法</title><link href="/dispatchEvent.html"/><url>/dispatchEvent.html</url><content type="html"><![CDATA[<p>浏览器事件一般被称为DOM事件，通常的用法是给某个DOM元素添加事件。浏览器中原生的DOM事件有很多，最常用的有以下几大类：鼠标事件、键盘事件、框架/对象事件、表单事件、剪切板事件、打印事件、多媒体事件、动画事件等。每一类都有若干个DOM事件。<br>前端最常用的是鼠标事件和键盘事件，比如鼠标点击、键盘键入、移动端的touch等，Web页面与用户交互是通过DOM事件来完成的。<br>最常用的事件列表这里不在罗列，可以在<a href="http://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">www.runoob.com</a>上查。之前总结过<a href="http://mhynet.cn/2017/09/04/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F/">DOM事件</a>方面的知识，本文想说的是自定义事件的使用.</p><a id="more"></a><p>创建事件的方式早期的有<code>createEvent()</code>，但是目前已经过时了，现在常用的方式是使用构造函数的方式来创建事件。</p><p>事件触发一般通过用户在页面上的操作触发，但是也可以通过事件触发器来实现。在一些特殊情况下，用事件触发器来触发事件比用户的实际操作来触发事件更方便。</p><p>触发事件每种浏览器都有原生的方式，IE支持<code>fireEvent()</code>方法触发事件，标准浏览器都支持<code>dispatchEvent()</code>方法。<br>简单介绍一下<code>fireEvent()</code>方式吧，下面是一段prototype.js的源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fireEvent = <span class="function"><span class="keyword">function</span><span class="title">fireEvent</span>(<span class="params">element,event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.createEventObject)&#123;</span><br><span class="line"><span class="comment">// IE浏览器支持fireEvent方法</span></span><br><span class="line"><span class="keyword">var</span> evt = <span class="built_in">document</span>.createEventObject();</span><br><span class="line"><span class="keyword">return</span> element.fireEvent(<span class="string">'on'</span>+event,evt)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 其他标准浏览器使用dispatchEvent方法</span></span><br><span class="line"><span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent( <span class="string">'HTMLEvents'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// initEvent接受3个参数：</span></span><br><span class="line"><span class="comment">// 事件类型，是否冒泡，是否阻止浏览器的默认行为</span></span><br><span class="line">        evt.initEvent(event, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> !element.dispatchEvent(evt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="dispatchEvent-事件触发器"><a href="#dispatchEvent-事件触发器" class="headerlink" title="dispatchEvent 事件触发器"></a>dispatchEvent 事件触发器</h2><ul><li><p>早期的创建事件的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>); <span class="comment">// 一个参数， 表示事件类型</span></span><br><span class="line">event.initEvent(<span class="string">'build'</span>, <span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">// 三个参数，eventName事件类型、canBubble是否冒泡、preventDefault是否阻止事件的默认操作</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event) <span class="comment">// 参数为事件对象</span></span><br></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'build'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="comment">// e.target matches document from above</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event);</span><br></pre></td></tr></table></figure></li></ul><p>再举个可以给事件传值的例子，可以将触发事件定义在一个方法内:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'mhy'</span>,</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> evt = <span class="keyword">new</span> Event(<span class="string">'haha'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">handler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> o = e.eventBody</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'addevt'</span>, o)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'evt'</span>, evt)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'haha'</span>, handler, <span class="literal">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">disPatchEvt</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">2evt.eventBody = obj</span><br><span class="line">2<span class="built_in">document</span>.dispatchEvent(evt, obj)</span><br><span class="line">&#125;</span><br><span class="line">disPatchEvt(obj)</span><br></pre></td></tr></table></figure></p><p>以上例子中所传的数据可以是任任意类型的数据，通过这种方法基本可以满足任意标准浏览器环境下通过自定义事件的需求。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> dispatchEvent </tag><tag> Event </tag></tags></entry><entry><title>window对象之屏幕尺寸相关的属性</title><link href="/window-screen-property.html"/><url>/window-screen-property.html</url><content type="html"><![CDATA[<h2 id="window对象中屏幕尺寸相关的属性"><a href="#window对象中屏幕尺寸相关的属性" class="headerlink" title="window对象中屏幕尺寸相关的属性"></a><code>window</code>对象中屏幕尺寸相关的属性</h2><h3 id="window-screenX-和-window-screentY"><a href="#window-screenX-和-window-screentY" class="headerlink" title="window.screenX 和 window.screentY"></a><code>window.screenX</code> 和 <code>window.screentY</code></h3><p>返回浏览器窗口左上角相对于屏幕左上角的（0,0)的水平距离和垂直距离， 单位为像素。<br><a id="more"></a></p><h3 id="window-innerWidth-和-window-innerHeight"><a href="#window-innerWidth-和-window-innerHeight" class="headerlink" title="window.innerWidth 和 window.innerHeight"></a><code>window.innerWidth</code> 和 <code>window.innerHeight</code></h3><p>返回当前浏览器窗口可视部分的宽度和高度, 即“视口”（viewport）, 单位像素。<br>这两个属性包含滚动条的尺寸。<br>当用户放大网页尺寸的时候，这两个属性的值会变小，因为这时网页的像素大小不变，只是每个像素占据的屏幕空间变大了，因为可见部分（视口）就变小了。</p><h3 id="window-outerWidth-和-window-outerHeight"><a href="#window-outerWidth-和-window-outerHeight" class="headerlink" title="window.outerWidth 和 window.outerHeight"></a><code>window.outerWidth</code> 和 <code>window.outerHeight</code></h3><p>返回浏览器窗口的高度和宽度，包括浏览器菜单栏和边框，单位为像素。</p><h3 id="window-pageXOffset-和-window-pageYOffset"><a href="#window-pageXOffset-和-window-pageYOffset" class="headerlink" title="window.pageXOffset 和 window.pageYOffset"></a><code>window.pageXOffset</code> 和 <code>window.pageYOffset</code></h3><p>返回页面的水平和垂直滚动距离， 单位为像素。</p><h2 id="window对象中屏幕滚动相关的方法"><a href="#window对象中屏幕滚动相关的方法" class="headerlink" title="window对象中屏幕滚动相关的方法"></a><code>window</code>对象中屏幕滚动相关的方法</h2><p><code>window</code>对象中屏幕滚动相关的方法最常用的有<code>window.scrollTo(x, y)</code> 和<code>window.scrollBy(x, y)</code>， 单位都是像素。</p><h3 id="window-scrollTo"><a href="#window-scrollTo" class="headerlink" title="window.scrollTo()"></a><code>window.scrollTo()</code></h3><p>该方法用于将网页的指定位置（参数坐标位置），滚动到浏览器的左上角。参数是相对于整张网页的坐标。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><h3 id="window-scrollBy"><a href="#window-scrollBy" class="headerlink" title="window.scrollBy()"></a><code>window.scrollBy()</code></h3><p>该方法用于将网页滚动指定距离。两个参数分别为向右滚动的距离和项下滚动的距离，如果为负值，则向相反的方向滚动。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scrollBy(<span class="number">0</span>, <span class="built_in">window</span>.innerHeight);</span><br></pre></td></tr></table></figure></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> window </tag></tags></entry><entry><title>ES6之Set和Map</title><link href="/ES6-Set-and-Map.html"/><url>/ES6-Set-and-Map.html</url><content type="html"><![CDATA[<p>Set和Map是ES6新增的数据结构, Set类似于数组，Map类似于对象。</p><a id="more"></a><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set的元素可以是任何类型的数据，但是都是唯一的，没有重复的值。<br>Set本身是一个构造函数，用来生成Set实例。<br>生成Set实例用new操作符。</p><h3 id="生成Set实例"><a href="#生成Set实例" class="headerlink" title="生成Set实例"></a>生成Set实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], &#123;<span class="attr">name</span>:<span class="string">'li'</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;];</span><br><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set(arr)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set();</span><br><span class="line">[1,2,2,3,4,5,5].forEach(e =&gt; <span class="keyword">set</span>.add(e));</span><br><span class="line">console.log(<span class="keyword">set</span>); //Set &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">set</span>.size); // 5</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set(obj); //Set &#123;&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">set</span>.add(obj); // Set &#123;&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">set</span>.add(obj); // Set &#123;&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">set</span>.add(&#123;&#125;); <span class="comment">// Set &#123;&#123;&#125;, &#123;&#125;&#125;</span></span><br><span class="line"><span class="keyword">set</span>.add(&#123;&#125;); <span class="comment">// Set &#123;&#123;&#125;, &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Set的属性和方法"><a href="#Set的属性和方法" class="headerlink" title="Set的属性和方法"></a>Set的属性和方法</h3><h4 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h4><p>返回Set实例的元素数量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'s'</span>,<span class="string">'s'</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set(arr); // Set &#123;<span class="string">'s'</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">set</span>.size; // 3</span><br></pre></td></tr></table></figure></p><p>#### add(value)</p><p>add() 方法用于向Set的末尾添加元素，可以添加任何类型的数据(包括Set类型)。如果set中有该元素，则不添加；<br>添加某个值，返回 Set 结构本身。<br>例子见上面。<br>链式写法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span><span class="built_in">Set</span>()</span><br><span class="line">  .add(<span class="number">3</span>)</span><br><span class="line">  .add(<span class="number">2</span>)</span><br><span class="line">  .add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h4 id="delete-value"><a href="#delete-value" class="headerlink" title="delete(value)"></a>delete(value)</h4><p>delete方法用于删除Set实例中的元素，删除的元素为传入的参数。<br>返回值为布尔值， 如果实例中有该参数值，删除并返回true，否则返回false.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'s'</span>,<span class="string">'s'</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set(arr); // Set &#123;<span class="string">'s'</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">set</span>.delete('s'); // true</span><br><span class="line"><span class="keyword">set</span>.delete('s'); // false</span><br></pre></td></tr></table></figure></p><h4 id="has-value"><a href="#has-value" class="headerlink" title="has(value)"></a>has(value)</h4><p>has方法用来检查set实例中是否包含某个值， 如果有则返回true, 否则返回false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'s'</span>,<span class="string">'s'</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set(arr); // Set &#123;<span class="string">'s'</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">set</span>.has('s'); //true</span><br><span class="line"><span class="keyword">set</span>.delete('s'); // true</span><br><span class="line"><span class="keyword">set</span>.has('s'); //false</span><br></pre></td></tr></table></figure></p><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>clear方法用于清空Set。没有返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span><span class="keyword">set</span> = new Set([1,2,3,4,5]);</span><br><span class="line"><span class="keyword">set</span>.clear();</span><br><span class="line">console.log(<span class="keyword">set</span>); // Set &#123;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Set-的遍历方法"><a href="#Set-的遍历方法" class="headerlink" title="Set 的遍历方法"></a>Set 的遍历方法</h3><p>Set有四个遍历方法。</p><h4 id="keys-、values-和-enttries"><a href="#keys-、values-和-enttries" class="headerlink" title="keys()、values()和 enttries()"></a>keys()、values()和 enttries()</h4><p>keys方法、values方法、entries方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line">for (let item of <span class="keyword">set</span>.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span><span class="keyword">set</span>.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span><span class="keyword">set</span>.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["red", "red"]</span></span><br><span class="line"><span class="comment">// ["green", "green"]</span></span><br><span class="line"><span class="comment">// ["blue", "blue"]</span></span><br></pre></td></tr></table></figure></p><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。<br>这意味着，可以省略values方法，直接用for…of循环遍历 Set。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator] === <span class="built_in">Set</span>.prototype.values</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">for (let x of <span class="keyword">set</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure></p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，<strong>没有返回值</strong>。<br>forEach方法的参数就是一个处理函数。该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。</p><p>另外，forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set([1,2,3,4,5,5,6,6]);</span><br><span class="line"><span class="keyword">set</span>.forEach(item =&gt; console.log(item) )</span><br><span class="line">console.log(<span class="keyword">set</span>)</span><br></pre></td></tr></table></figure></p><h3 id="遍历器的应用"><a href="#遍历器的应用" class="headerlink" title="遍历器的应用"></a>遍历器的应用</h3><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>数组去重的方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="string">'2'</span>,<span class="string">'s'</span>,<span class="string">'s'</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr)]);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span><span class="built_in">Set</span>(arr));</span><br></pre></td></tr></table></figure></p><h4 id="数组的map和filter方法也可以间接用于-Set"><a href="#数组的map和filter方法也可以间接用于-Set" class="headerlink" title="数组的map和filter方法也可以间接用于 Set"></a>数组的map和filter方法也可以间接用于 Set</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的map()</span></span><br><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set([1,2,3,4,5,5,6,6,7]);</span><br><span class="line"><span class="keyword">set</span> = new Set([...<span class="keyword">set</span>].map(item =&gt; `$&#123;item&#125;&lt;----&gt;$&#123;item * <span class="number">2</span>&#125;<span class="string">`))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//数组的filter</span></span><br><span class="line"><span class="string">let set = new Set([1, 2, &#123;name: 'li', age: 22&#125;, &#123;name: 'wang', age: 22&#125;, &#123;name: 'li', age: 24&#125;]);</span></span><br><span class="line"><span class="string">let s = new Set([...set].filter(item =&gt;  item instanceof Object &amp;&amp; item.age == 22 ))</span></span><br></pre></td></tr></table></figure><h4 id="实现并集（Union）、交集（Intersect）和差集（Difference"><a href="#实现并集（Union）、交集（Intersect）和差集（Difference" class="headerlink" title="实现并集（Union）、交集（Intersect）和差集（Difference)"></a>实现并集（Union）、交集（Intersect）和差集（Difference)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span><span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span><span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集 union</span></span><br><span class="line"><span class="keyword">let</span> nuion = <span class="keyword">new</span><span class="built_in">Set</span>([...a, ...b]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span><span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> b.has(item)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span><span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> !b.has(item)));</span><br></pre></td></tr></table></figure><h4 id="直接在遍历操作中改变原来的-Set-结构"><a href="#直接在遍历操作中改变原来的-Set-结构" class="headerlink" title="直接在遍历操作中改变原来的 Set 结构"></a>直接在遍历操作中改变原来的 Set 结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span><span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line"><span class="keyword">set</span> = new Set([...<span class="keyword">set</span>].map(val =&gt; val * 2));</span><br><span class="line">// <span class="keyword">set</span>的值是2, 4, 6</span><br><span class="line"></span><br><span class="line">// 方法二</span><br><span class="line">let <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line"><span class="keyword">set</span> = new Set(Array.from(<span class="keyword">set</span>, val =&gt; val * 2));</span><br><span class="line">// <span class="keyword">set</span>的值是2, 4, 6</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map和对象类似，都是存储的键值对，不同之处在于对象的键只能是字符串，而Map的键可以为任意类型的数据。</p><h3 id="生成Map实例"><a href="#生成Map实例" class="headerlink" title="生成Map实例"></a>生成Map实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span><span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'lili'</span>],</span><br><span class="line">    [<span class="string">'age'</span>, <span class="number">22</span>],</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="Map的属性和操作方法"><a href="#Map的属性和操作方法" class="headerlink" title="Map的属性和操作方法"></a>Map的属性和操作方法</h3><h4 id="Map的属性size"><a href="#Map的属性size" class="headerlink" title="Map的属性size"></a>Map的属性size</h4><p>Map的size属性和Set的size属性类似，返回Map结构的成员总数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.size; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><h4 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set(key, value)"></a>set(key, value)</h4><p>Map的set()方法用于向Map实例中添加新成员，该方法有两个参数，分别为Map实例的键和值。如果键key已存在，则更新值value。返回Map结构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span><span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">'name'</span>, <span class="string">'liu'</span>); <span class="comment">// Map &#123;'name', 'liu'&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以采用链式写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span><span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">  .set(<span class="number">2</span>, <span class="string">'b'</span>)</span><br><span class="line">  .set(<span class="number">3</span>, <span class="string">'c'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h4><p>Map的get()方法用于查询Map实例的成员， 参数为键, 返回该键key所对应的值value。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span><span class="built_in">Map</span>([<span class="string">'name'</span>, <span class="string">'lili'</span>]);</span><br><span class="line">m.get(<span class="string">'name'</span>); <span class="comment">// 'lili'</span></span><br><span class="line">m.get(<span class="string">'age'</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h4 id="has-key"><a href="#has-key" class="headerlink" title="has(key)"></a>has(key)</h4><p>Map结构的has()方法用来判断某个键是否在该Map结构中， 返回布尔值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span><span class="built_in">Map</span>(<span class="string">'name'</span>, <span class="string">'wang'</span>);</span><br><span class="line">m.has(<span class="string">'name'</span>); <span class="comment">// ture</span></span><br><span class="line">m.has(<span class="string">'sex'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><p>同Set的clear()方法， 用于清空所有成员， 没有返回值。</p><h4 id="delete-key"><a href="#delete-key" class="headerlink" title="delete(key)"></a>delete(key)</h4><p>删除某个键， 删除成功返回true, 否则返回false。</p><h3 id="Map的遍历方法"><a href="#Map的遍历方法" class="headerlink" title="Map的遍历方法"></a>Map的遍历方法</h3><p>Map的遍历方法有keys(), values(), entries(), forEach().<br>Map 的遍历顺序就是插入顺序。<br>与for…of循环组合使用很好用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span><span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'lili'</span>],</span><br><span class="line">    [<span class="string">'age'</span>, <span class="number">22</span>],</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> m.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用m.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> m) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。</p><h3 id="Map-转换为其他数据结构"><a href="#Map-转换为其他数据结构" class="headerlink" title="Map 转换为其他数据结构"></a>Map 转换为其他数据结构</h3><h4 id="Map-lt-gt-数组"><a href="#Map-lt-gt-数组" class="headerlink" title="Map&lt;==&gt;数组"></a>Map&lt;==&gt;数组</h4><p>转为数组结构，可以用展开符：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组转为Map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span><span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map转为数组</span></span><br><span class="line">[...map.keys()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.values()]</span><br><span class="line"><span class="comment">// ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line">[...map.entries()]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br></pre></td></tr></table></figure></p><h3 id="Map-lt-gt-Object"><a href="#Map-lt-gt-Object" class="headerlink" title="Map&lt;==&gt;Object"></a>Map&lt;==&gt;Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">strMapToObj</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 该方法创建的对象没有原型， 参数为null</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [k,v] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">        obj[k] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果Map的键为字符串可以无损转为对象，如果不是字符串则转化为字符串，然后转为对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">strObjToMap</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span><span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span><span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">        strMap.set(k, obj[k]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Map-lt-gt-JSON"><a href="#Map-lt-gt-JSON" class="headerlink" title="Map &lt;==&gt; JSON"></a>Map &lt;==&gt; JSON</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON -&gt; Map</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">JSONToMap</span>(<span class="params">str</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> strObjToMap(<span class="built_in">JSON</span>.parse(str))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map -&gt; JSON</span></span><br><span class="line"><span class="comment">//键名为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">strMapToJSON</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="built_in">JSON</span>.stringify(strMapToObj(strMap))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 键名为非字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="built_in">JSON</span>.stringify([...map]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag></tags></entry><entry><title>MySQL学习笔记</title><link href="/MySQL-notes.html"/><url>/MySQL-notes.html</url><content type="html"><![CDATA[<p>MySQL数据库学习笔记。<br>MySQL环境搭建可查阅资料，此处不细说。默认已搭建好MySQL环境。</p><a id="more"></a><h2 id="1-授权、登录相关"><a href="#1-授权、登录相关" class="headerlink" title="1.授权、登录相关"></a>1.授权、登录相关</h2><h3 id="启动MySQL服务常用命令"><a href="#启动MySQL服务常用命令" class="headerlink" title="启动MySQL服务常用命令:"></a>启动MySQL服务常用命令:</h3><ul><li>启动mysql服务：sudo start mysql 或者 sudo service mysql start</li><li>停止mysql服务：sudo stop mysql 或者 sudo service mysql stop</li><li>重启mysql服务： sudo restart mysql 或者 sudo service mysql restart</li><li>查看mysql数据库的版本号：mysql -V</li><li>启动mysqld服务: sudo /etc/init.d/mysql start</li><li>停止mysqld服务: sudo /etc/init.d/mysql stop</li><li>启动mysqld服务: sudo /etc/init.d/mysql restart</li></ul><h3 id="以root用户登录MySQL"><a href="#以root用户登录MySQL" class="headerlink" title="以root用户登录MySQL"></a>以root用户登录MySQL</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>然后输入密码，登录成功后输入以下命令，创建个人用户：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user mhy inentified by <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure></p><p>用户名为: <code>mhy</code>, 密码为: <code>123</code>。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>创建用户后需要进行授权， 授权命令格式:</p><p><code>grant [privilegesCode] on [dbName.tableName] to [username@host] identified by [&quot;password&quot;];</code></p><p><code>[]</code>内的项需要根据自己的情况选择。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on <span class="built_in">test</span>.* to mhy@localhost identified by <span class="string">'123'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>privilegesCode</strong>代表授予的权限，常用的权限类型有：</p><ul><li><code>all privileges</code> 所有权限</li><li><code>select</code> 读取权限</li><li><code>delete</code> 删除权限</li><li><code>update</code> 更新权限</li><li><code>create</code> 创建权限</li><li><code>drop</code> 删除数据库、数据表权限</li></ul><p><strong>dbName.tableName</strong>表示授予权限的数据库和数据表，常用的类型有以下几个：</p><ul><li><code>.</code> 授予该数据库服务器上所有的数据库的权限</li><li><code>dbName.*</code> 授予dbName数据库上所有数据表的权限</li><li><code>dbName.dbTable</code> 授予dbName数据库的dbTable数据表的权限</li></ul><p><strong>username@host</strong>表示授予权限的用户及允许该用户登录的IP地址。其中Host有以下几种选择：</p><ul><li><code>localhost</code> 只允许本地登录，不允许远程登录。</li><li><code>%</code> 允许在除本机之外的任何一台机器远程登录。</li><li><code>192.168.33.21</code> 具体的IP地址，表示允许该用户从特定的IP登录。</li></ul><p><strong>password</strong><br> 指定该用户登录时的密码。</p><p><strong>flush privileges</strong><br> 表示刷新权限变更。</p><p>运行以下命令可以删除用户：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user zhangsan@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></p><p>查看用户<code>mhy</code>的权限用以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants <span class="keyword">for</span><span class="string">'mhy'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="2-创建、修改和删除数据库-database"><a href="#2-创建、修改和删除数据库-database" class="headerlink" title="2.创建、修改和删除数据库 database"></a>2.创建、修改和删除数据库 database</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建数据库命令, dbName为数据库名字：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database dbName;</span><br></pre></td></tr></table></figure></p><h3 id="删除数据库："><a href="#删除数据库：" class="headerlink" title="删除数据库："></a>删除数据库：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database dbName;</span><br></pre></td></tr></table></figure><h3 id="查看所有数据库："><a href="#查看所有数据库：" class="headerlink" title="查看所有数据库："></a>查看所有数据库：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><p>修改数据表更多的是修改数据表的结构。使用<code>alter table</code>语句。</p><ul><li><p>删除字段用 <code>drop</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName drop 字段名;</span><br></pre></td></tr></table></figure></li><li><p>添加字段用 <code>add</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName add 字段名 数据类型 [可选项];</span><br></pre></td></tr></table></figure></li><li><p>修改字段名称和类型<br>有两种方式：<code>modify</code>和<code>change</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName modify 字段名 [char(20)]</span><br></pre></td></tr></table></figure></li></ul><p>可选项中可以是数据类型。</p><p><code>change</code>语句除了重新定义字段，还可以重命名字段：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName change 原字段名 新字段名 char(10);</span><br></pre></td></tr></table></figure></p><ul><li>修改数据表名<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName rename to newTableName;</span><br></pre></td></tr></table></figure></li></ul><p>还可以修改字段的默认值。</p><p>如果引擎是innodb的话，数据库名称不能修改，其他引擎的数据库重命名有数据丢失的风险，所以在创建数据库的时候命名切勿草率。</p><h2 id="3-创建和修改数据表-table"><a href="#3-创建和修改数据表-table" class="headerlink" title="3.创建和修改数据表 table"></a>3.创建和修改数据表 table</h2><p>创建数据表之前需要选择数据库，使用以下命令选择数据库：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use dbName;</span><br></pre></td></tr></table></figure></p><p>选择数据库之后就可以创建数据表了，创建数据表的时候需要填写的有表名、表的字段名称、每个字段的数据类型，还有其他可选项主键（PRIMARY KEY）、外键（）、自动增长（AUTO_INCREMENT）、默认值（DEFAULT）、是否允许为空（NOT NULL）等。ENGINE=InnoDB设置引擎，引擎一般会在配置文件中设置，如果要建的数据表的引擎和配置文件不一样需要在此处指明。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tableName (</span><br><span class="line">  字段1 数据类型 [其他可选项]，</span><br><span class="line">  字段2 数据类型 [其他可选项]，</span><br><span class="line">  ...</span><br><span class="line">) [ENGINE=InnoDB DEFAULT CHARSET=utf8];</span><br></pre></td></tr></table></figure></p><p><code>[]</code>内的项为可选项，最后面的<code>ENGING DEFAULT CHARSET</code>也是可选项，一般都会在配置文件中设置，不需要在创建表时进行设置。<br>创建数据表的具体实例稍后讲了mysql的数据类型和约束后在将。<br>查看数据表：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables [from dbName];</span><br></pre></td></tr></table></figure></p><p>查看表结构：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show columns from tableName;</span><br></pre></td></tr></table></figure></p><p>数据表删除的三种语句drop、delete和truncate的异同：</p><p><strong>相同点</strong>：</p><ol><li>truncate和delete只删除表数据保留表结构；</li><li>truncate和不带where子句的delete，以及drop都能删除表内的数据.</li></ol><p><strong>不同点</strong>：</p><ol><li>drop整个删除数据表，速度最快；</li><li>delete删除数据表中的数据，可以加入条件语句where，需要先查询符合条件的数据然后删除，如果不加条件语句，则清空所有数据;</li><li>truncate清空表内数据，但不删除数据表结构。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除数据表（结构、属性、索引）</span></span><br><span class="line">drop table tableName;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某一行</span></span><br><span class="line">delete from tableName  Where volumnName=values;</span><br><span class="line"><span class="comment"># 删除所有数据</span></span><br><span class="line">delete from tableName；</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">delete * from tableName</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空数据</span></span><br><span class="line">truncate table tableName;</span><br></pre></td></tr></table></figure></li></ol><p>对于有主外键关系的表，不能使用truncate而应该使用不带where子句的delete语句，由于truncate不记录在日志中，不能够激活触发器。</p><h2 id="4-SQL数据类型"><a href="#4-SQL数据类型" class="headerlink" title="4.SQL数据类型"></a>4.SQL数据类型</h2><p>SQL语句常见的数据类型有字符串、数字和日期三大类。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p><img style="width: 70%" src="https://wicdn.xiaohongchun.com/xhc-plat/1520585223512_53Wbnarmmc.png"></p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p><img style="width: 70%" src="https://wicdn.xiaohongchun.com/xhc-plat/1520585223512_yJtAzAQjAC.png"></p><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><p><img style="width: 70%" src="https://wicdn.xiaohongchun.com/xhc-plat/1520585223509_bknXEkz6P5.png"></p><p>合理选用数据类型对于提高MySQL性能具有非常重要的意义，这一块可以参考《高性能MYSQL》进行学习。</p><h2 id="5-约束"><a href="#5-约束" class="headerlink" title="5.约束"></a>5.约束</h2><p>约束主要完成对数据的检验和限制，从而保证数据库的完整性。常见的约束有以下几种：</p><ul><li>外键约束(foreign key)</li><li>主键约束(primary key)</li><li>唯一值约束(unique)</li><li>自增长约束(auto_increment)</li><li>默认值约束(default)</li><li>非空约束(not null)</li></ul><h3 id="主键约束（primary-key"><a href="#主键约束（primary-key" class="headerlink" title="主键约束（primary key)"></a>主键约束（primary key)</h3><p>主键约束列不能重复，任意两行的主键值都不能相同，也不能为空值。<br>一般每一张数据表都有一个约束，通常为id，最好不要把业务字段设为主键，因为可能会有重复的数据。<br>创建数据表的时候在需要创建主键约束的字段后面的可选项位置加入 <code>primary key</code> 即可。<br>拥有主键约束的表插入数据时，拥有主键约束的字段的数据重复或为空时会报错。<br>常见的操作：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据表时加入主键的两种方法</span></span><br><span class="line">create table tableName (</span><br><span class="line">  字段名1 数据类型 primary key,</span><br><span class="line">  字段名2 数据类型</span><br><span class="line">);</span><br><span class="line">create table tableName (</span><br><span class="line">  字段名1 数据类型,</span><br><span class="line">  字段名2 数据类型,</span><br><span class="line">  constraint 约束名 primary key(字段名1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加主键 列名columnName如果为多个时建立联合主键</span></span><br><span class="line">alter table tableName add primary key(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除主键约束</span></span><br><span class="line">alter table tableName drop primary key;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改列为主键</span></span><br><span class="line">alter table tableName modify 字段名 数据类型 primary key;</span><br></pre></td></tr></table></figure></p><p><strong>联合主键</strong>:联合多个列建立联合主键。</p><h3 id="外键约束（foreign-key）"><a href="#外键约束（foreign-key）" class="headerlink" title="外键约束（foreign key）"></a>外键约束（foreign key）</h3><p>外键约束的作用是建立两张表之间的联系，保持数据的一致性。表的外键可以是另一张表的主键或唯一索引或唯一约束。<br>外键可以有重复的, 可以是空值。实现一对一或一对多关系。<br>创建外键约束实例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建父表</span></span><br><span class="line">create table fatherTable(</span><br><span class="line">  id int primary key,</span><br><span class="line">  title varchar(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子表，建立外键有两种方式</span></span><br><span class="line"><span class="comment"># 第一种：添加关键字</span></span><br><span class="line">create table sonTable(</span><br><span class="line">  id int auto_increment,</span><br><span class="line">  name varchar(20),</span><br><span class="line">  constraint son_id primary key(id),</span><br><span class="line">  father_id int references fatherTable(id)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 第二种： 额外声明 son_id 为主键的名字，fa_tab_id为外键的名字</span></span><br><span class="line">create table sonTable(</span><br><span class="line">  id int auto_increment,</span><br><span class="line">  name varchar(20),</span><br><span class="line">  constraint son_id primary key(id),</span><br><span class="line">  father_id int,</span><br><span class="line">  constraint fa_tab_id foreign key(father_id) reference fatherTable(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>加外键约束的条件</strong>：</p><ul><li>父表和子表必须使用相同的存储引擎， 数据表的存储引擎只能为InnoDB,default-storage-engine-INNODB</li><li>外键列和参照列必须具有相似的数据类型，数字的长度或是有符号位必须相同，而字符 的长度可以不同</li><li>外键列和参照列必须创建索引，如果外键列不存在索引的话，MySQL将自动创建索引。</li></ul><p>设定参照列:FOREIGN KEY(id) PEFERENCES provinces(id)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除外键约束</span></span><br><span class="line">alter table tableName drop foreign key 外键约束名;</span><br><span class="line">(创建外键的方法没有指定约束名称，系统会默认给外键约束分配外键约束名称，命名为student_ibfk_n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加外键约束</span></span><br><span class="line">alter table tableName add foreign key 列名 references 父表(对应列名);</span><br></pre></td></tr></table></figure></p><h3 id="唯一约束（unique-key）"><a href="#唯一约束（unique-key）" class="headerlink" title="唯一约束（unique key）"></a>唯一约束（unique key）</h3><p><code>unique key</code>的用途：主要是用来防止数据插入的时候重复。<br>创建数据表时在字段后面加入<code>unique key</code>即可建立唯一约束。<br>也可以单独设置：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName modify columnName char(20) unique key;</span><br></pre></td></tr></table></figure></p><h2 id="6-插入和修改记录"><a href="#6-插入和修改记录" class="headerlink" title="6.插入和修改记录"></a>6.插入和修改记录</h2><p>建立好数据表之后就可以插入数据了。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>插入数据使用<code>insert into</code>语句，具体如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into tableName (字段1, 字段2, 字段3,...字段n) values (值1, 值2, 值3, ...值n);</span><br><span class="line"><span class="comment"># 如果数据为字符串，必须加引号。</span></span><br></pre></td></tr></table></figure></p><p>注意：以上语句插入数据的时候必须要保证一致性，即前后必须一一对应。<br>还有一种方式：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tableName (字段1=值1, 字段2=值2, ...);</span><br></pre></td></tr></table></figure></p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>update set命令用来修改表中的数据。<br>update set命令格式：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tableName <span class="built_in">set</span> 字段=新值, ... <span class="built_in">where</span> 条件;</span><br></pre></td></tr></table></figure></p><h2 id="7-查询"><a href="#7-查询" class="headerlink" title="7.查询"></a>7.查询</h2><p>数据查询使用<code>select</code>语句。<br><code>select 查询项 from tableName [where 条件]</code></p>]]></content><categories><category> 数据库 </category></categories><tags><tag> mysql </tag><tag> 数据库 </tag></tags></entry><entry><title>window对象之screen</title><link href="/window-screens.html"/><url>/window-screens.html</url><content type="html"><![CDATA[<p><code>window.screen</code>返回当前window的screen对象。screen对象实现了Screen接口，它是个特殊的对象，返回当前渲染窗口中和屏幕有关的属性。<br><a id="more"></a></p><ul><li>screen.availWidth - 可用的屏幕宽度<br>screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。</li><li>screen.availHeight - 可用的屏幕高度<br>screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。</li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">availHeight</td><td style="text-align:left">返回屏幕的高度（不包括Windows任务栏）</td></tr><tr><td style="text-align:left">availWidth</td><td style="text-align:left">返回屏幕的宽度（不包括Windows任务栏）</td></tr><tr><td style="text-align:left">colorDepth</td><td style="text-align:left">返回目标设备或缓冲器上的调色板的比特深度</td></tr><tr><td style="text-align:left">height</td><td style="text-align:left">返回屏幕的总高度</td></tr><tr><td style="text-align:left">pixelDepth</td><td style="text-align:left">返回屏幕的颜色分辨率（每象素的位数）</td></tr><tr><td style="text-align:left">width</td><td style="text-align:left">返回屏幕的总宽度</td></tr></tbody></table>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> window </tag></tags></entry><entry><title>window对象的属性和方法</title><link href="/window-property-and-function.html"/><url>/window-property-and-function.html</url><content type="html"><![CDATA[<p>在JavaScript语言中，DOM( Document Object Model) 是操作文档的API，document 是其的一个对象；而BOM是控制浏览器行为的API，window 是其的一个对象。<br><a id="more"></a><br><img style="width: 80%" src="http://pic4.zhimg.com/80/0c273417eb835e0700bbe2ea7ce4c4bb_hd.jpg"></p><p><a href="http://www.zhihu.com/question/33453164" target="_blank" rel="noopener">引用知乎上的解释</a>,整个窗口中分为几个区域，其中：</p><ol><li>DOM管辖区域：<br>E区归DOM管，是根据开发出来的网站文档（html,css,javascript）等渲染出来的页面。</li><li>BOM管辖区域<br>其余的几个区域都归BOM管。<ul><li>A区：浏览器的地址栏、标签栏、搜索栏、书签栏、菜单栏等。</li><li>B区：浏览器右键菜单。</li><li>C区：状态栏，document加载时显示http状态等信息。</li><li>D区：滚动条。<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>BOM 是浏览器对象模型，window是BOM的一个对象，window对象下有很多子对象，一起控制浏览器的行为。在浏览器中window对想为global对象。</p></blockquote></li></ul></li></ol><p><img style="width: 80%" src="http://pic3.zhimg.com/80/v2-818759383c05737f5c626d7cd634e8ee_hd.jpg"></p><p>window 对象表示一个包含DOM文档的窗口，其 document 属性指向窗口中载入的 DOM文档 。使用 document.defaultView 属性可以获取指定文档所在窗口。</p><h3 id="window-scrollbars"><a href="#window-scrollbars" class="headerlink" title="window.scrollbars"></a>window.scrollbars</h3><p>返回滚动条对象，可以检查其可见性。</p><p>window.scrollbars 有一个属性</p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> window </tag></tags></entry><entry><title>window对象之location</title><link href="/window-location.html"/><url>/window-location.html</url><content type="html"><![CDATA[<p>window.location 只读属性，返回一个 Location  对象，其中包含有关文档当前位置的信息。</p><blockquote><p>window.location : 所有字母必须小写！<br>尽管 window.location 是一个只读 Location 对象，你仍然可以赋给它一个 DOMString。这意味着您可以在大多数情况下处理 location，就像它是一个字符串一样：window.location = ‘<a href="http://www.example.com&#39;，是" target="_blank" rel="noopener">http://www.example.com&#39;，是</a> window.location.href = ‘<a href="http://www.example.com&#39;的同义词" target="_blank" rel="noopener">http://www.example.com&#39;的同义词</a> 。</p></blockquote><a id="more"></a><p>可以用location.href获取。要获得URL各个部分的值，可以这么写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.protocol; <span class="comment">// 'http'</span></span><br><span class="line">location.host; <span class="comment">// 'www.example.com'</span></span><br><span class="line">location.port; <span class="comment">// '8080'</span></span><br><span class="line">location.pathname; <span class="comment">// '/path/index.html'</span></span><br><span class="line">location.search; <span class="comment">// '?a=1&amp;b=2'</span></span><br><span class="line">location.hash; <span class="comment">// 'TOP'</span></span><br></pre></td></tr></table></figure></p><p>要加载一个新页面，可以调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.assign(url)</span><br><span class="line">location.href  = url</span><br></pre></td></tr></table></figure></p><p>如果要重新加载当前页面，调用location.reload()方法非常方便。</p><ul><li>window.location.search</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>reload()<br>重新加载页面</li><li><p>assign()<br>加载新文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- location.assign(<span class="string">'https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location'</span>)</span><br></pre></td></tr></table></figure></li><li><p>replace()<br>使用新文档替换当前文档</p></li></ul>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> window </tag></tags></entry><entry><title>window对象之navigator</title><link href="/window-navigator.html"/><url>/window-navigator.html</url><content type="html"><![CDATA[<p>从今天开始会陆续学习window对象的属性，今天先学习<code>window.navigator</code>。<br><code>window.navigator</code>返回一个navigator对象的引用,可以用它来查询一些关于运行当前脚本的应用程序的相关信。<br>在chrome浏览器中按快捷键<code>alt + ⌘</code>打开开发者工具，在console下输入<code>navigator</code>、回车，即可打印出<code>navigator</code>对象。<br><a id="more"></a><br><img src="http://wicdn.xiaohongchun.com/xhc-plat/1519441439885_WfktCB4fjm.png" alt></p><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><ul><li><strong>navigator.userAgent</strong><br>返回当前浏览器的user agent字符串。<br>该属性是<code>navigatior</code>对象用的最多的，常用于判断客户端类型<h3 id="判断浏览器类型"><a href="#判断浏览器类型" class="headerlink" title="判断浏览器类型"></a>判断浏览器类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">goPAGE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>请注意，navigator的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。很多初学者为了针对不同浏览器编写不同的代码，喜欢用if判断浏览器版本;正确的方法是充分利用JavaScript对不存在属性返回undefined的特性，直接用短路运算符||计算。</p></blockquote><p>判断浏览器类型:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">getExploreName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> userAgent = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"Opera"</span>) &gt; <span class="number">-1</span> || userAgent.indexOf(<span class="string">"OPR"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Opera'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'IE'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"Edge"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Edge'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Firefox'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Chrome"</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Safari'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Chrome'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span><span class="keyword">if</span>(!!<span class="built_in">window</span>.ActiveXObject || <span class="string">"ActiveXObject"</span><span class="keyword">in</span><span class="built_in">window</span>)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'IE&gt;=11'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">'Unkonwn'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>navigator.appName</strong><br>返回当前浏览器的正式名称,该名称可能是不”正确”的.</li><li><strong>navigator.appVersion</strong><br>返回当前浏览器的版本号,该值可能是不”正确”的.</li><li><strong>navigator.language</strong><br>返回一个字符串,表明当前浏览器的语言种类.</li><li><strong>navigator.platform</strong><br>返回一个字符串,表明当前所使用的系统平台类型.<h2 id="不常用属性"><a href="#不常用属性" class="headerlink" title="不常用属性"></a>不常用属性</h2></li><li>navigator.appCodeName<br>返回当前浏览器的内部“代码”名称,该名称可能是不”正确”的.</li><li>navigator.buildID<br>返回当前浏览器的构建标识符 (例如: “2006090803”).</li><li>navigator.connection<br>提供有关设备的网络连接的信息.</li><li>navigator.cookieEnabled<br>返回一个布尔值,表明当前浏览器是否启用了cookies.</li><li>navigator.doNotTrack<br>返回用户配置中do-not-track项的值,如果值为”yes”,则网站和应用程序不会跟踪用户.</li><li>navigator.id<br>返回 <code>id</code> 对象,你可以用它来为自己的网站添加对BrowserID的支持.</li><li>navigator.mimeTypes<br>返回当前浏览器支持的MIME类型列表.</li><li>navigator.mozBattery<br>返回一个battery 对象,你可以用它来获取自己电脑上的电池的电量情况.</li><li>navigator.mozNotification Mobile Only in Gecko 2.0</li><li>navigator.webkitNotification<br>返回一个notification 对象,你可以用它来向使用你的web应用程序的用户发送通知.</li><li>navigator.mozTelephony Mobile Only in Gecko<br>返回一个DOMTelephony 对象,你可以用它来创建和管理手机通话.</li><li>navigator.onLine<br>返回一个布尔值,表明当前浏览器是否正常联网.</li><li>navigator.oscpu<br>返回一个字符串,表明当前所使用的操作系统类型.</li><li>navigator.plugins<br>返回一个包含了浏览器中所有已安装的插件对象的数组.</li><li>navigator.product<br>返回当前浏览器的产品名称(例如: “Gecko”).</li><li>navigator.productSub<br>返回当前浏览器的构建编号(例如: “20060909”).</li><li>navigator.securitypolicy<br>返回一个空字符串. 在Netscape 4.7x中, 返回”US &amp; CA domestic policy” 或者 “Export policy”.</li><li>navigator.vendor<br>返回当前浏览器的浏览器供应商名称, (例如: “Netscape6”)</li><li>navigator.vendorSub<br>返回当前浏览器的浏览器供应商名称的版本号 (e.g. “6.1”).</li><li>navigator.webkitPointer<br>返回一个Mouse Lock API中的PointerLock对象.</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>navigator.javaEnabled<br>表明当前浏览器是否启用了对Java的支持.</li><li>navigator.mozIsLocallyAvailable<br>检测一个URI资源在脱机状态是否可用.</li><li>navigator.preference 已废弃 Gecko 2.0<br>设置一个用户配置. 该方法只能在特权代码中使用,目前已经废弃,你应该使用XPCOM Preferences API 来代替.</li><li>navigator.registerContentHandler<br>允许网站将自己注册成为一个给定MIME类型的内容的处理程序.</li><li>navigator.registerProtocolHandler<br>允许网站将自己注册成为一个给定协议的处理程序.</li><li>navigator.taintEnabled 已废弃 Gecko 1.7.8 已废弃 Gecko 9.0<br>返回false. 表明浏览器是否支持taint/untaint功能.已在JavaScript 1.2中删除.</li><li>navigator.vibrate()<br>如果设备支持震动(手机或其他),则触发设备震动.</li></ul>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> window </tag></tags></entry><entry><title>深浅拷贝方法总结</title><link href="/deep-clone-js.html"/><url>/deep-clone-js.html</url><content type="html"><![CDATA[<h2 id="一-Javascript中的深浅拷贝由来："><a href="#一-Javascript中的深浅拷贝由来：" class="headerlink" title="一.Javascript中的深浅拷贝由来："></a>一.Javascript中的深浅拷贝由来：</h2><p>javascript中数据格式分为基本类型和引用类型，5种基本数据类型Undefined、Null、Boolean、Number 和 String，变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。<br><a id="more"></a><br>存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p><p>JavaScript存储对象都是存地址的，所以浅拷贝会导致 obj1 和obj2 指向同一块内存地址。改变了其中一方的内容，都是在原来的内存上做修改会导致拷贝对象和源对象都发生改变，而深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互不影响。</p><h2 id="二-浅拷贝"><a href="#二-浅拷贝" class="headerlink" title="二.浅拷贝"></a>二.浅拷贝</h2><h3 id="1-引用复制"><a href="#1-引用复制" class="headerlink" title="1.引用复制"></a>1.引用复制</h3><h3 id="2-遍历赋值拷贝："><a href="#2-遍历赋值拷贝：" class="headerlink" title="2.遍历赋值拷贝："></a>2.遍历赋值拷贝：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">shallowClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        o[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Object-assign"><a href="#3-Object-assign" class="headerlink" title="3.Object.assign()"></a>3.Object.assign()</h3><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;<span class="attr">d</span>: <span class="string">'ai'</span>, <span class="attr">e</span>: <span class="string">'BB'</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(objc.d === o.c.d); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="4-Array-concat-和-Array-slice-方法"><a href="#4-Array-concat-和-Array-slice-方法" class="headerlink" title="4.Array.concat() 和 Array.slice()方法"></a>4.<code>Array.concat()</code> 和 <code>Array.slice()</code>方法</h3><p><code>concat()</code>和<code>sluce()</code>返回不同的数组实例，但是对于数组的对象元素，只是拷贝了指针。</p><h2 id="三-深拷贝"><a href="#三-深拷贝" class="headerlink" title="三.深拷贝"></a>三.深拷贝</h2><h3 id="1-JSON对象的parse-和stringify"><a href="#1-JSON对象的parse-和stringify" class="headerlink" title="1.JSON对象的parse()和stringify()"></a>1.<code>JSON</code>对象的<code>parse()</code>和<code>stringify()</code></h3><p><code>JSON</code>对象的<code>parse()</code>和<code>stringify()</code>方法连用可以实现深拷贝。<br><strong>可以实现深拷贝的情况：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'mhy'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    other: &#123;</span><br><span class="line">        sex: <span class="string">'male'</span>,</span><br><span class="line">        city: <span class="string">'beijing'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">p.other.city = <span class="string">'shanghai'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.other.city); <span class="comment">// 'beijing'</span></span><br></pre></td></tr></table></figure></p><p>对于一般的情况而言，该方法可以实现深拷贝。<br><strong>不能实现的情况：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'xxx'</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'this is a function'</span>)&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="built_in">console</span>.log(o.fn); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>对于<strong>正则表达式类型</strong>、<strong>函数类型</strong>等无法进行深拷贝(而且会直接丢失相应的值)。还有一点不好的地方是它会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。同时如果对象中存在循环引用的情况也无法正确处理。</p><h3 id="2-jQuery-extend"><a href="#2-jQuery-extend" class="headerlink" title="2.jQuery.extend()"></a>2.jQuery.extend()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'mhy'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    other: &#123;</span><br><span class="line">        sex: <span class="string">'male'</span>,</span><br><span class="line">        city: <span class="string">'beijing'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = $.extend(<span class="literal">true</span>, &#123;&#125;, obj)</span><br><span class="line"><span class="comment">// jQuery 的 extend() 方法可以实现深浅拷贝， 第一个参数为true时为深拷贝，否则为浅拷贝。</span></span><br></pre></td></tr></table></figure><h3 id="3-递归"><a href="#3-递归" class="headerlink" title="3.递归"></a>3.递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneObj = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str, newobj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span><span class="keyword">if</span>(<span class="built_in">window</span>.JSON)&#123;</span><br><span class="line">        str = <span class="built_in">JSON</span>.stringify(obj), <span class="comment">//系列化对象</span></span><br><span class="line">        newobj = <span class="built_in">JSON</span>.parse(str); <span class="comment">//还原</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            newobj[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ?</span><br><span class="line">            cloneObj(obj[i]) : obj[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> newobj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/" target="_blank" rel="noopener">其他库的deepClone方法</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> 深拷贝 </tag></tags></entry><entry><title>对象的方法汇总</title><link href="/functions_of_object.html"/><url>/functions_of_object.html</url><content type="html"><![CDATA[<p>Javascript语言中，对象Object是该语言重要的数据结构之一，掌握对象的属性和方法是学好该语言的必要条件。<br><a id="more"></a></p><h2 id="Object构造函数的属性"><a href="#Object构造函数的属性" class="headerlink" title="Object构造函数的属性"></a>Object构造函数的属性</h2><h3 id="Object-length"><a href="#Object-length" class="headerlink" title="Object.length"></a>Object.length</h3><p>值为1。</p><h3 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h3><p><code>Object.prototype</code>属性表示<code>Object</code>的原型对象<br>可以为所有 Object 类型的对象添加属性<br>几乎所有的 JavaScript 对象都是 Object 的实例；一个典型的对象继承了Object.prototype的属性（包括方法），尽管这些属性可能被遮蔽（也被称为覆盖）。然而，一个Object可能是故意创建的，这是不确定的（例如通过Object.create(null)），或者它可能被改变，所以这不再是准确的（例如Object.setPrototypeOf）。</p><p>改变Object原型，会通过原型链，而改变所有对象；除非这些属性和方法被其他对原型链更里层的改动所覆盖。这提供了一个非常强大的、但有潜在危险的机制，来覆盖或扩展对象行为。</p><h2 id="Object构造函数的方法"><a href="#Object构造函数的方法" class="headerlink" title="Object构造函数的方法:"></a>Object构造函数的方法:</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><h4 id="1-语法：Object-assign-target-sources"><a href="#1-语法：Object-assign-target-sources" class="headerlink" title="1.语法：Object.assign(target, ...sources)"></a>1.语法：<code>Object.assign(target, ...sources)</code></h4><p>如果目标对象的属性和源对象具有相同的键值，则后来的源的属性将覆盖早先的属性。<br><code>Object.assign</code> 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。<br>该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。</p><p>String类型和 Symbol 类型的属性都会被拷贝。<br>注意，Object.assign 不会跳过那些值为 null 或 undefined 的源对象。</p><p>针对深拷贝，需要使用其他方法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。</p><h4 id="2-复制对象-amp-合并对象"><a href="#2-复制对象-amp-合并对象" class="headerlink" title="2.复制对象 &amp; 合并对象"></a>2.复制对象 &amp; 合并对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'mhy'</span>,<span class="attr">city</span>: <span class="string">'beijing'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj, &#123;<span class="attr">city</span>: <span class="string">'tianjin'</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;); <span class="comment">//&#123;name: "mhy", city: "tianjin", age: 22&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-深拷贝问题"><a href="#3-深拷贝问题" class="headerlink" title="3.深拷贝问题"></a>3.深拷贝问题</h4><p>针对深拷贝，需要使用其他方法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br>对象的深拷贝可以使用<code>JSON.parse(JSON.stringify(obj))</code>实现， 但是该方法在拷贝时会忽略方法和原型。还有一种方式是递归。jQuery 的extend方法也可以实现深拷贝<code>$.extend(true, {}, ...)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  obj1.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  obj2.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  obj2.b.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line">  obj1 = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><br><span class="line">  obj1.a = <span class="number">4</span>;</span><br><span class="line">  obj1.b.c = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// &#123; a: 0, b: &#123; c: 0&#125;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h4 id="4-拷贝-symbol-类型的属性"><a href="#4-拷贝-symbol-类型的属性" class="headerlink" title="4.拷贝 symbol 类型的属性"></a>4.拷贝 symbol 类型的属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; [<span class="built_in">Symbol</span>(<span class="string">'foo'</span>)]: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, o1, o2);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a : 1, [Symbol("foo")]: 2 &#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj); <span class="comment">// [Symbol(foo)]</span></span><br></pre></td></tr></table></figure><h4 id="5-继承属性和不可枚举属性是不能拷贝的"><a href="#5-继承属性和不可枚举属性是不能拷贝的" class="headerlink" title="5.继承属性和不可枚举属性是不能拷贝的"></a>5.继承属性和不可枚举属性是不能拷贝的</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;, &#123; <span class="comment">// foo 是个继承属性。</span></span><br><span class="line">    bar: &#123;</span><br><span class="line">        value: <span class="number">2</span><span class="comment">// bar 是个不可枚举属性。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    baz: &#123;</span><br><span class="line">        value: <span class="number">3</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span><span class="comment">// baz 是个自身可枚举属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; baz: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>使用指定的原型对象和属性创建一个新对象。</p><h4 id="1-语法-Object-create-proto-propertiesObject"><a href="#1-语法-Object-create-proto-propertiesObject" class="headerlink" title="1.语法: Object.create(proto[, propertiesObject])"></a>1.语法: <code>Object.create(proto[, propertiesObject])</code></h4><h4 id="2-用-Object-create实现类式继承"><a href="#2-用-Object-create实现类式继承" class="headerlink" title="2.用 Object.create实现类式继承"></a>2.用 Object.create实现类式继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shape - 父类(superclass)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类的方法</span></span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x += x;</span><br><span class="line"><span class="keyword">this</span>.y += y;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'Shape moved.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle - 子类(subclass)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">// call super constructor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类续承父类</span></span><br><span class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line">Rectangle.prototype.constructor = Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为使用“.prototype =...”后,constructor会改变为“=...”的那个</span></span><br><span class="line"><span class="comment">// constructor，所以要重新指定.constructor 为自身。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Rectangle?'</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Shape?'</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> Shape); <span class="comment">// true</span></span><br><span class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Outputs, 'Shape moved.'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="keyword">this</span>.city = <span class="string">'beijing'</span>;</span><br><span class="line">2<span class="keyword">this</span>.lastName = <span class="string">'ma'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.where = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="built_in">console</span>.log(<span class="string">"where? "</span>, <span class="keyword">this</span>.city)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">2Father.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.constructor = Son</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Son()</span><br><span class="line">s.city;<span class="comment">//</span></span><br><span class="line">s.lastName; <span class="comment">//</span></span><br><span class="line">s.where(); <span class="comment">//</span></span><br></pre></td></tr></table></figure><h4 id="3-使用混入模式继承到多个对象"><a href="#3-使用混入模式继承到多个对象" class="headerlink" title="3.使用混入模式继承到多个对象"></a>3.使用混入模式继承到多个对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     SuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">     OtherSuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承一个类</span></span><br><span class="line">MyClass.prototype = <span class="built_in">Object</span>.create(SuperClass.prototype);</span><br><span class="line"><span class="comment">// 混合其它</span></span><br><span class="line"><span class="built_in">Object</span>.assign(MyClass.prototype, OtherSuperClass.prototype);</span><br><span class="line"><span class="comment">// 重新指定constructor</span></span><br><span class="line">MyClass.prototype.constructor = MyClass;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// do a thing</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p><h4 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h4><p><code>Object.defineProperty(obj, prop, descriptor)</code></p><h4 id="2-参数"><a href="#2-参数" class="headerlink" title="2.参数"></a>2.参数</h4><ul><li>2.1 obj<br>要在其上定义属性的对象。<br>prop<br>要定义或修改的属性的名称。</li><li>2.2 descriptor<br>将被定义或修改的属性描述符。</li></ul><p>在ES6中，由于 Symbol类型的特殊性，用Symbol类型的值来做对象的key与常规的定义或修改不同，而Object.defineProperty 是定义key为Symbol的属性的方法之一。</p><h3 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h3><p>在一个对象上定义新的属性或修改现有属性，并返回该对象。</p><h4 id="1-语法：-1"><a href="#1-语法：-1" class="headerlink" title="1.语法："></a>1.语法：</h4><p><code>Object.defineProperties(obj, props)</code></p><h4 id="2-参数-1"><a href="#2-参数-1" class="headerlink" title="2.参数"></a>2.参数</h4><ul><li>2.1 <strong>obj</strong></li></ul><p>在其上定义或修改属性的对象。</p><ul><li>2.2 <strong>props</strong></li></ul><blockquote><p>要定义其可枚举属性或修改的属性描述符的对象。对象中存在的属性描述符主要有两种：数据描述符和访问器描述符（更多详情，请参阅Object.defineProperty()）。描述符具有以下键：</p></blockquote><ul><li><p>configurable<br>true 当且仅当该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。<br>默认为 false</p></li><li><p>enumerable<br>true 当且仅当在枚举相应对象上的属性时该属性显现。<br>默认为 false</p></li><li>value<br>与属性关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）。<br>默认为 undefined.<br>writable<br>true当且仅当与该属性相关联的值可以用assignment operator改变时。<br>默认为 false</li><li>get<br>作为该属性的 getter 函数，如果没有 getter 则为undefined。函数返回值将被用作属性的值。<br>默认为 undefined</li><li>set<br>作为属性的 setter 函数，如果没有 setter 则为undefined。函数将仅接受参数赋值给该属性的新值。<br>默认为 undefined<br>返回值<br>传递给函数的对象。</li></ul><p><code>Object.defineProperties</code>本质上定义了obj 对象上props的可枚举属性相对应的所有属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line"><span class="string">'property1'</span>: &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">'property2'</span>: &#123;</span><br><span class="line">    value: <span class="string">'Hello'</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>返回给定对象自身可枚举属性的[key, value]数组。</p><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h3><p>冻结对象：其他代码不能删除或更改任何属性。</p><h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><p>返回对象指定的属性配置。</p><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</p><h3 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols()"></a>Object.getOwnPropertySymbols()</h3><p>返回一个数组，它包含了指定对象自身所有的符号属性。</p><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>返回指定对象的原型对象。</p><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</p><h3 id="Object-isExtensible"><a href="#Object-isExtensible" class="headerlink" title="Object.isExtensible()"></a>Object.isExtensible()</h3><p>判断对象是否可扩展。</p><h3 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen()"></a>Object.isFrozen()</h3><p>判断对象是否已经冻结。</p><h3 id="Object-isSealed"><a href="#Object-isSealed" class="headerlink" title="Object.isSealed()"></a>Object.isSealed()</h3><p>判断对象是否已经密封。</p><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>返回一个包含所有给定对象自身可枚举属性名称的数组。</p><h3 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h3><p>防止对象的任何扩展。</p><h3 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h3><p>防止其他代码删除对象的属性。</p><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>设置对象的原型（即内部[[Prototype]]属性）。</p><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>返回给定对象自身可枚举值的数组。</p><h2 id="3-Object-实例和Object-原型对象"><a href="#3-Object-实例和Object-原型对象" class="headerlink" title="3.Object 实例和Object 原型对象:"></a>3.Object 实例和Object 原型对象:</h2><p>JavaScript中的所有对象都来自Object；所有对象从Object.prototype继承方法和属性，尽管它们可能被覆盖。例如，其他构造函数的原型将覆盖constructor属性并提供自己的toString()方法。Object原型对象的更改将传播到所有对象，除非受到这些更改的属性和方法将沿原型链进一步覆盖。</p><h3 id="Object-prototype-defineGetter"><a href="#Object-prototype-defineGetter" class="headerlink" title="Object.prototype.defineGetter()"></a>Object.prototype.<strong>defineGetter</strong>()</h3><p>关联一个函数到一个属性。访问该函数时，执行该函数并返回其返回值。</p><h3 id="Object-prototype-defineSetter"><a href="#Object-prototype-defineSetter" class="headerlink" title="Object.prototype.defineSetter()"></a>Object.prototype.<strong>defineSetter</strong>()</h3><p>关联一个函数到一个属性。设置该函数时，执行该修改属性的函数。</p><h3 id="Object-prototype-lookupGetter"><a href="#Object-prototype-lookupGetter" class="headerlink" title="Object.prototype.lookupGetter()"></a>Object.prototype.<strong>lookupGetter</strong>()</h3><p>返回使用 <strong>defineGetter</strong> 定义的方法函数 。</p><h3 id="Object-prototype-lookupSetter"><a href="#Object-prototype-lookupSetter" class="headerlink" title="Object.prototype.lookupSetter()"></a>Object.prototype.<strong>lookupSetter</strong>()</h3><p>返回使用 <strong>defineSetter</strong> 定义的方法函数。</p><h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h3><p>返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</p><h3 id="Object-prototype-isPrototypeOf"><a href="#Object-prototype-isPrototypeOf" class="headerlink" title="Object.prototype.isPrototypeOf()"></a>Object.prototype.isPrototypeOf()</h3><p>返回一个布尔值，表示指定的对象是否在本对象的原型链中。</p><h3 id="Object-prototype-propertyIsEnumerable"><a href="#Object-prototype-propertyIsEnumerable" class="headerlink" title="Object.prototype.propertyIsEnumerable()"></a>Object.prototype.propertyIsEnumerable()</h3><p>判断指定属性是否可枚举，内部属性设置参见 ECMAScript [[Enumerable]] attribute 。</p><h3 id="Object-prototype-toSource"><a href="#Object-prototype-toSource" class="headerlink" title="Object.prototype.toSource()"></a>Object.prototype.toSource()</h3><p>返回字符串表示此对象的源代码形式，可以使用此字符串生成一个新的相同的对象。</p><h3 id="Object-prototype-toLocaleString"><a href="#Object-prototype-toLocaleString" class="headerlink" title="Object.prototype.toLocaleString()"></a>Object.prototype.toLocaleString()</h3><p>直接调用 toString()方法。</p><h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><p>返回对象的字符串表示。</p><h3 id="Object-prototype-unwatch"><a href="#Object-prototype-unwatch" class="headerlink" title="Object.prototype.unwatch()"></a>Object.prototype.unwatch()</h3><p>移除对象某个属性的监听。</p><h3 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf()"></a>Object.prototype.valueOf()</h3><p>返回指定对象的原始值。</p><h3 id="Object-prototype-watch"><a href="#Object-prototype-watch" class="headerlink" title="Object.prototype.watch()"></a>Object.prototype.watch()</h3><p>给对象的某个属性增加监听。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> Object </tag></tags></entry><entry><title>面向对象和继承</title><link href="/oop-and-inherit.html"/><url>/oop-and-inherit.html</url><content type="html"><![CDATA[<p>面向对象编程是目前最流行的编程方式之一。<br><a id="more"></a></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>封装 、 继承、 多态</li><li>属性 property</li><li>方法 method</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h4 id="1-工厂函数"><a href="#1-工厂函数" class="headerlink" title="1.工厂函数"></a>1.工厂函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  s = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="keyword">return</span> &#123;</span><br><span class="line">22a: <span class="number">1</span></span><br><span class="line">2&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-构造函数-constructor"><a href="#2-构造函数-constructor" class="headerlink" title="2.构造函数  constructor"></a>2.构造函数  constructor</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="keyword">this</span>.a = <span class="string">'a'</span>;</span><br><span class="line">2<span class="keyword">this</span>.b = <span class="string">'b'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象是引用类型，直接赋值只是把地址赋值，改变对象属性的时候可能两个对象都会变</span></span><br><span class="line"><span class="keyword">var</span> s3 = s2</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="keyword">this</span>.a = <span class="string">'a'</span>;</span><br><span class="line">2<span class="keyword">this</span>.b = <span class="string">'b'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s4.prototype.c = <span class="string">'c'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p  = <span class="keyword">new</span> s4()；</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> s4();</span><br><span class="line"></span><br><span class="line">p.__proto__ === s4.prototype  <span class="comment">// true</span></span><br><span class="line">p1.__proto__ === p.__proto__  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="实例共享属性和方法"><a href="#实例共享属性和方法" class="headerlink" title="实例共享属性和方法"></a>实例共享属性和方法</h3><p>用 构造函数 + 原型链  实现封装和继承<br>调用new 操作符， 开辟内存空间, 返回this</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p> parent class &amp; child class<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">2<span class="keyword">this</span>.name = name;</span><br><span class="line">2<span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, title</span>) </span>&#123;</span><br><span class="line">2<span class="keyword">this</span>.title = title;</span><br><span class="line">2<span class="comment">// call 第一个参数手动指定this，</span></span><br><span class="line">2parent.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">2child.prototype.__proto__ = parent.prototype;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">child.prototype.d = <span class="string">'d'</span>;</span><br><span class="line"><span class="keyword">new</span> child(<span class="string">'mhy'</span>, <span class="number">11</span>, <span class="string">'student'</span>);</span><br><span class="line"><span class="comment">// child.prototype = new  parent('mhy', 10);</span></span><br></pre></td></tr></table></figure></p><p>| - title : ‘student’<br>| - name : ‘mhy’<br>| - age : ‘11’<br>| - <strong>proto</strong><br>    | - -d : ‘d’<br>    | - <strong>proto</strong><br>        | -c : ‘c’<br>             | - Object…</p><p>Object.create(proto[. propertiesObject]</p><p>区别:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child.prototype = <span class="built_in">Object</span>.create(parent.prototype)</span><br><span class="line">child.prototype.__proto__ = parent.prototype;</span><br></pre></td></tr></table></figure></p><p>前者指向新的引用， 后者是在原来的引用基础上挂载新的属性</p><p>下面的例子演示了如何使用Object.create()来实现类式继承。这是一个所有版本JavaScript都支持的单继承。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shape - superclass</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// superclass method</span></span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x += x;</span><br><span class="line"><span class="keyword">this</span>.y += y;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'Shape moved.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle - subclass</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">// call super constructor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// subclass extends superclass</span></span><br><span class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line">Rectangle.prototype.constructor = Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Rectangle?'</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Shape?'</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> Shape); <span class="comment">// true</span></span><br><span class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Outputs, 'Shape moved.'`</span></span><br></pre></td></tr></table></figure></p><p>如果希望能继承到多个对象，则可以使用混入的方式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     SuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">     OtherSuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inherit one class</span></span><br><span class="line">MyClass.prototype = <span class="built_in">Object</span>.create(SuperClass.prototype);</span><br><span class="line"><span class="comment">// mixin another</span></span><br><span class="line"><span class="built_in">Object</span>.assign(MyClass.prototype, OtherSuperClass.prototype);</span><br><span class="line"><span class="comment">// re-assign constructor</span></span><br><span class="line">MyClass.prototype.constructor = MyClass;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// do a thing</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="ES6-实现继承-super-方法、-extends-指向父类的方法"><a href="#ES6-实现继承-super-方法、-extends-指向父类的方法" class="headerlink" title="ES6 实现继承 super 方法、 extends 指向父类的方法"></a>ES6 实现继承 super 方法、 extends 指向父类的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span><span class="title">A</span></span>&#123;</span><br><span class="line">2<span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">22<span class="keyword">this</span>.name = naem;</span><br><span class="line">22<span class="keyword">this</span>.age = age;</span><br><span class="line">2&#125;</span><br><span class="line">2eat() &#123;</span><br><span class="line">22<span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">2&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">B</span><span class="keyword">extends</span><span class="title">A</span></span>&#123;</span><br><span class="line">2<span class="keyword">constructor</span>(naem, age, title) &#123;</span><br><span class="line">22<span class="keyword">super</span>(name, age);</span><br><span class="line">22<span class="keyword">this</span>.title = title;</span><br><span class="line">2&#125;</span><br><span class="line">2work() &#123;</span><br><span class="line">22<span class="built_in">console</span>.log(<span class="string">'work'</span>);</span><br><span class="line">2&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> B(<span class="string">'mhy'</span>, <span class="number">12</span>, <span class="string">'student'</span>);</span><br><span class="line">c.eat();</span><br><span class="line">c.work();</span><br></pre></td></tr></table></figure><p><code>B</code> 的 <code>super()</code>指向<code>A</code>的构造函数。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> 面向对象 </tag><tag> 继承 </tag></tags></entry><entry><title>使用hexo+github搭建免费个人博客</title><link href="/hexo-for-blog.html"/><url>/hexo-for-blog.html</url><content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>（本文是刚开始学习hexo搭建博客的时候参考了很多博客记录的，内容比较分散。后来因多次在不同设备上搭建环境，总结了一些个人认为比较有用的知识点，尤其是多设备下搭建方面，记录在该项目的<a href="https://github.com/mhy-web/mhy-web.github.io/blob/hexo/README.md" target="_blank" rel="noopener">README</a>下，欢迎查阅）。</p><p>最开始搭建部分参考了<a href="http://blog.liuxianan.com/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">这篇文章</a>，记录了hexo+github搭建博客的方案，后面又新增了评论、页面访问量、https服务、主题配置、多终端配置、百度和google站长验证、 百度统计、google analytics、SEO优化等部分，搜集了很多资料，可能某些部分不是很详细但是比较全面。</p><a id="more"></a><p>使用github pages服务搭建博客的好处有：</p><blockquote><ul><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>其他优点</li></ul></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在开始一切之前，你必须已经：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git和命令行工具</li></ul><h2 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 - <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方：</p><blockquote><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</li><li>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</li></ul></blockquote><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>当然，你不绑定域名肯定也是可以的，就用默认的 <code>xxx.github.io</code>来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。</p><p>首先你要注册一个域名，域名注册以前总是推荐去阿里云，价格也不贵，毕竟是大公司，放心！</p><p>绑定域名分2种情况：带www和不带www的。</p><p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：<br><img src="http://image.liuxianan.com/201608/20160823_191336_238_8683.png" height="200" width="460" alt="图片"><br>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p><blockquote><ul><li>如果你填写的是没有www的，比如 mygit.me，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 http://&gt;- mygit.me</li><li>如果你填写的是带www的，比如 <a href="http://www.mygit.me" target="_blank" rel="noopener">www.mygit.me</a> ，那么无论是访问 <a href="http://www.mygit.me" target="_blank" rel="noopener">http://www.mygit.me</a> 还是 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，都会自动跳转到 http://&gt;- <a href="http://www.mygit.me" target="_blank" rel="noopener">www.mygit.me</a></li><li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a> 没问题，但是访问 <a href="http://mygit.me" target="_blank" rel="noopener">http://mygit.me</a> ，不会自动跳转到 &gt;- <a href="http://abc.mygit.me" target="_blank" rel="noopener">http://abc.mygit.me</a></li><li>另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</li></ul></blockquote><p><em>注：后期补充，主域名前带不带<code>www</code>在百度站长验证时时区分的，所有必须明确在所有情况下一致，如果不带<code>www</code>可以在域名解析时设置自动跳转。</em></p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment"># 查看该文件夹下有没有ssh key 文件</span></span><br></pre></td></tr></table></figure></p><p>如果没有ssh key，可以使用以下命令创建自己的key。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"邮件地址"</span></span><br></pre></td></tr></table></figure></p><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>~/.ssh/id_rsa.pub</code>文件，打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br><img src="http://image.liuxianan.com/201608/20160818_143914_495_9084.png" height="200" width="444" alt="图片"><br>将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：<code>Hi mhy! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>, 看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"用户名"</span>// 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  <span class="string">"邮箱"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p><p>这个配置展示在你每次提交的<code>git message</code>中。</p><h2 id="使用hexo写博客"><a href="#使用hexo写博客" class="headerlink" title="使用hexo写博客"></a>使用hexo写博客</h2><h3 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些markdown文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>安装之前先来说几个注意事项：</p><blockquote><ul><li>使用windows的用户，很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git &gt;- bash来执行；</li><li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所有使用时注意区分版本；</li><li>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的_config.yml；</li></ul></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>~/Workspaces/hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Workspaces/hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>hexo会自动下载一些文件到这个目录，包括<code>node_modules</code>，目录结构如下图：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy_git/</span><br><span class="line">├── public/</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   ├── CNAME</span><br><span class="line">│   ├── _data</span><br><span class="line">│   ├── _posts</span><br><span class="line">│   ├── about</span><br><span class="line">├── themes/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure></p><p>其中，<code>public</code>目录是打包后写入静态资源的目录，建议写入<code>.gitignore</code>文件不使用git进行版本管理；<code>source/_post</code>目录是存放markdown博客文章的地方；<code>theme</code>目录是存放博客主题的地方，可以安装你喜欢的多个主题，想启用哪个修改根目录下 <code>_config.yml</code>的配置选项<code>theme</code>即可，主题文件夹可以加入版本库，也可以使用<code>git modules</code>进行管理。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># 打包生成html</span></span><br><span class="line">hexo sever <span class="comment"># 启动本地开发服务</span></span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在<code>public</code>文件夹生成相关html文件。<br><code>hexo sever</code>是开启本地开发服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html。" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html。</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，可以自定义主题。</p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>选择一个好看的主题对于一个博客来说还是比较重要的。当然也可以自己写一套主题，新手建议去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题页面</a>选择一套自己喜欢的主题。<br>这里已<code>hexo-theme-yilia</code>主题为例，说一下配置过程。<br>首先下载这个主题：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Workspaces/hexo</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></p><p>修改项目根目录下的<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。<br>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下<code>public</code>的内容，然后再来重新生成和发布。</p><h3 id="上传之前"><a href="#上传之前" class="headerlink" title="上传之前"></a>上传之前</h3><p>使用git进行版本管理（不会使用git创建仓库的建议去查阅相关资料）时要注意选择正确的分支，<code>github pages</code>渲染博客时设置<code>master</code>分支为主分支, 该分支不可手动编辑，因为该分支为github pages服务的静态资源存放位置，开发编辑博客必须在其他分支，即博客项目的源代码必须在其他分支，万一弄错了分支会有大量的代码冲突。</p><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。<br>使用<code>git</code>推送<code>hexo</code>博客需要用到一个插件<code>hexo-deployer-git</code>， 先安装一下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>推送之前，<code>ssh key</code>肯定要先配置好。<br>其次，配置<code>_config.yml</code>中有关deploy的部分：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span><span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span><span class="string">git@github.com:mhy-web/mhy-web.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span><span class="string">master</span><span class="comment"># hexo会把打包后的静态资源自动推送到该分支</span></span><br></pre></td></tr></table></figure></p><p>然后可以发布博客了，执行以下命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译</span></span><br><span class="line">hexo g <span class="comment"># 是hexo generate命令的缩写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">hexo d <span class="comment"># hexo deploy命令的缩写</span></span><br></pre></td></tr></table></figure></p><p>当然了，打包之前有一些配置选项需要注意一下，可以忽略指定目录，具体使用方法可以参考官网。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">source_dir:</span><span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span><span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span><span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span><span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span><span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span><span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span><span class="string">lang</span></span><br><span class="line"><span class="comment">#跳过source目录下文件的编译, 跳过指定文件的渲染，可使用glob表达式来匹配路径。</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">-</span><span class="string">_test/*</span><span class="comment"># 两个 ** 表示该目录的所有下级目录, 但是两个**会报错，可能是主题里面的配置没有兼容</span></span><br><span class="line"><span class="bullet">-</span><span class="string">_data/*</span></span><br></pre></td></tr></table></figure></p><h3 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h3><p>常见命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span><span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span><span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span><span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure></p><p>缩写：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="comment"># == hexo new</span></span><br><span class="line">hexo g <span class="comment"># == hexo generate</span></span><br><span class="line">hexo s <span class="comment"># == hexo server</span></span><br><span class="line">hexo d <span class="comment"># == hexo deploy</span></span><br></pre></td></tr></table></figure></p><p>组合命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure></p><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。<br>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>定位到我们的hexo根目录，执行命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'my-first-blog'</span></span><br></pre></td></tr></table></figure></p><p>hexo会帮我们在_posts下生成相关md文件<br>我们只需要打开这个文件就可以开始写博客了，默认格式可以在<code>scaffolds</code>目录下设置，使用方法请查阅 官方文档。当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span><span class="string">postName</span><span class="comment">#文章页面上的显示名称，一般是中文</span></span><br><span class="line"><span class="attr">date:</span><span class="number">2013</span><span class="number">-12</span><span class="number">-02</span><span class="number">15</span><span class="string">:30:16</span><span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line"><span class="attr">categories:</span><span class="string">默认分类</span><span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span><span class="string">[tag1,tag2,tag3]</span><span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line"><span class="attr">description:</span><span class="comment"># 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span><span class="string">以下是正文</span><span class="string">--&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="首页显示摘要"><a href="#首页显示摘要" class="headerlink" title="首页显示摘要"></a>首页显示摘要</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上即可。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>可以访问我的博客来查看效果：<a href="http://mhynet.cn">http://mhynet.cn</a></p><h2 id="后期优化"><a href="#后期优化" class="headerlink" title="后期优化"></a>后期优化</h2><h3 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h3><p>阅读量统计以前使用过<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">LeanCloud</a>,<br>配置可以参考<a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="noopener">这篇教程</a>。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add post views</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">enable:</span><span class="literal">true</span></span><br><span class="line"><span class="attr">app_id:</span><span class="comment">#你的app_id</span></span><br><span class="line"><span class="attr">app_key:</span><span class="comment">##你的app_key</span></span><br></pre></td></tr></table></figure></p><p>现在使用的是卜算子统计，配置方式每个主题可能实现方式都不一样，可以参考这篇<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">教程</a>。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>查阅了一些评论相关的介绍, 最后选用的<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>。<br><a href="http://www.hl10502.com/2017/03/24/hexo-config-livere/" target="_blank" rel="noopener">配置方式</a>参考自这里。<br>评论系统的配置在主题的配置文件_config.yml中，修改livere_uid的配置值为<a href="http://www.hl10502.com/2017/03/24/hexo-config-livere/livere-get-code.png" target="_blank" rel="noopener">来必力</a>获取到的data-uid。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span><span class="string">your</span><span class="string">uid</span></span><br></pre></td></tr></table></figure></p><h3 id="部署到github-和-gitee"><a href="#部署到github-和-gitee" class="headerlink" title="部署到github 和 gitee"></a>部署到github 和 gitee</h3><p>最开始做的时候只是部署到github, 并且将自己的域名<a href="https://mhynet.cn">mhynet.cn</a>解析到GitHub上，这样可以通过自己的域名访问博客。后来因为国内访问Github慢的原因将博客备份到了Gitee,但是还有个问题，Gitee并不支持域名解析，所以无法配成成通过自己的域名来访问Gitee。这个问题还在探索中。<br>这里要记录的是配置推送到Gitee和Github的方法。<br>博客发布<code>hexo d</code>同时推送的配置是在根目录:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span><span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span></span><br><span class="line"><span class="attr">github:</span><span class="comment"># github</span></span><br><span class="line"><span class="attr">gitee:</span><span class="comment"># 码云</span></span><br><span class="line"><span class="attr">name:</span><span class="string">mhyuan</span></span><br><span class="line"><span class="attr">email:</span><span class="string">dsz9258@163.com</span></span><br><span class="line"><span class="attr">branch:</span><span class="string">master</span></span><br></pre></td></tr></table></figure></p><p>推送hexo分支的源文件需要使用git本身的功能，配置多个remote地址，这里参考了<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">廖雪峰老师的博客</a>,但是我的Github的远程库的名字还是使用的是origin，仅仅设置了Gitee的远程库名称。</p><p><em>注：我现在的博客不在使用<code>github pages</code>了，现在部署在了七牛云自己的服务器上，CDN使用的是国外的免费CDN服务商cloudflare，具体使用方法篇幅较多，这里不细说。需要注意的是，使用国内的自己的服务器建站需要备案。</em></p><h3 id="GitHub-Pages自定义域名开启HTTPS"><a href="#GitHub-Pages自定义域名开启HTTPS" class="headerlink" title="GitHub Pages自定义域名开启HTTPS"></a>GitHub Pages自定义域名开启HTTPS</h3><p>目前大部分网站都在https协议，<code>gitHub pages</code>本身是走https协议的，但是如果是自定义域名，则需要使用其他方式来配置，google搜索会发现大部分教程都是使用Cloudflare免费的CDN服务。配置过程参考了<a href="https://razeen.me/post/https-githubpages.html" target="_blank" rel="noopener">这篇文章</a>。</p><p>这里有一个问题后期需要优化一下，站内的图片有有一些是直接在网上复制的链接，可能不支持https，显示会出现问题。所以后期还有一项可以优化，使用自己的图床，现在比较主流的是七牛云，这样可以保证图片正常显示。</p><h3 id="新设备上theme同步问题"><a href="#新设备上theme同步问题" class="headerlink" title="新设备上theme同步问题"></a>新设备上<code>theme</code>同步问题</h3><p>因为<code>theme</code>是子项目, 所有无法<code>push</code>到本项目的远程仓库下, 新建一个仓库单独存储主题项目也不失为一个解决办法，但是很繁琐。<br><code>hexo 3.X</code>支持在<code>source</code>文件夹下创建<code>_data</code>文件夹, 可以存储数据。可以把主题配置文件<code>copy</code>到<code>_data</code>文件加下，如<code>next.yml</code>。这样, 在新设备上仅需要根据主题地址<code>git clone</code>下主题仓库, 然后把配置文件内容替换为<code>source/_data/</code>下对应的配置文件即可。<br>还有百度搜索、谷歌搜索的文件，之前会保存在<code>source/_data/</code>文件夹内，换了设备后复制到主题目录下的<code>source</code>文件夹内，这样每次<code>hexo g</code>的时候会自动生成。</p><p>多次在新设备上部署hexo博客后发现最重复和麻烦的是主题的配置，每次从github仓库拉下来博客项目后还要去找主题仓库。拉下来主题仓库，然后还需要改主题仓库的配置文件，谷歌和百度搜索配置等等，需要改很多东西，非常麻烦，后来学了点bash脚本<a href="https://github.com/mhy-web/mhy-web.github.io/blob/hexo/config_sync.sh" target="_blank" rel="noopener">config_sync</a>，写了个文件，每次拉取项目后执行该文件即可自动部署完成，非常快速的完成配置。</p><p><em>注：我现在的博客主题使用了git modules，先fork主题仓库到自己的github，然后就可以自己进行版本管理啦。</em></p><p>配置忽略项，该配置下的目录中的 markdown 文件不会编译成 html 文件，可以存放一些数据或者放草稿。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">2<span class="bullet">-</span><span class="string">_test/*</span><span class="comment"># 两个 ** 表示该目录的所有下级目录, 但是两个**会报错，可能是主题里面的配置没有兼容</span></span><br><span class="line">2<span class="bullet">-</span><span class="string">_data/*</span></span><br></pre></td></tr></table></figure></p><h3 id="百度统计和google-analytics"><a href="#百度统计和google-analytics" class="headerlink" title="百度统计和google analytics"></a>百度统计和google analytics</h3><p>相关配置教程可有在google搜索，有很多讲的很详细的文章。<br>google analytics和百度统计需要的两个文件备份在项目的<code>source/_data</code>文件夹下(该文件夹内的文件不会编译，可当做仓库)，新设备上复制到主题文件夹的<code>source</code>文件夹下(项目根目录的文件夹下会编译，主题目录的<code>source</code>下不会编译)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> _hmt = _hmt || [];</span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span></span><br><span class="line"><span class="actionscript">        hm.src = <span class="string">"//hm.baidu.com/hm.js?&lt;%=theme.baidu_tongji%&gt;"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line">        s.parentNode.insertBefore(hm, s);</span><br><span class="line">    &#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">async</span><span class="attr">src</span>=<span class="string">"https://www.googletagmanager.com/gtag/js?id=&lt;%= theme.google_analytics %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.dataLayer = <span class="built_in">window</span>.dataLayer || [];</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span><span class="title">gtag</span>(<span class="params"></span>)</span>&#123;dataLayer.push(<span class="built_in">arguments</span>);&#125;</span></span><br><span class="line"><span class="javascript">  gtag(<span class="string">'js'</span>, <span class="keyword">new</span><span class="built_in">Date</span>());</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  gtag(<span class="string">'config'</span>, <span class="string">'&lt;%= theme.google_analytics %&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End Google Analytics --&gt;</span></span><br></pre></td></tr></table></figure><p>*注：最开始搭建博客的时候我SEO配置这块不是很了解，这里补充一下，百度统计和google analytics的配置一般都是在主题配置下，每个主题实现都不一样。</p><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><p>SEO优化参考了<a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="noopener">这篇文章</a>, 简化了文件URL层级结构。</p><h3 id="百度推送"><a href="#百度推送" class="headerlink" title="百度推送"></a>百度推送</h3><p>这里补充一下百度推送相关的内容。<br>首先需要把你的网站添加到[百度推送(<a href="https://ziyuan.baidu.com/site/index#/)系统中，添加过程需要百度验证你的网站属于你，验证方式一般有三种方式，html文件方式、html" target="_blank" rel="noopener">https://ziyuan.baidu.com/site/index#/)系统中，添加过程需要百度验证你的网站属于你，验证方式一般有三种方式，html文件方式、html</a> 标签方式和域名解析方式，建议使用html标签方式，即在你的博客文章中添加百度或google需要的meta标签，mate标签的content的内容需要去其网站填写你的网站，然后会生成属于你自己网站的标识码。*<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"baidu-site-verification"</span><span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"google-site-verification"</span><span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a><br><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">http://www.jianshu.com/p/05289a4bc8b2</a><br><a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>]]></content><categories><category> 博客 </category></categories><tags><tag> hexo </tag><tag> github </tag><tag> github pages </tag><tag> 博客 </tag></tags></entry><entry><title>前端设计模式</title><link href="/Front-end-design-patterns.html"/><url>/Front-end-design-patterns.html</url><content type="html"><![CDATA[<p>设计模式对于提高开发效率具有非常重要的作用，根据不同的需求采用合适的设计模式可以事半功倍。</p><a id="more"></a><h2 id="1-常见设计模式"><a href="#1-常见设计模式" class="headerlink" title="1.常见设计模式"></a>1.常见设计模式</h2><ul><li>构造函数模式</li><li>工厂模式</li><li>模块模式</li><li><strong>混合模式</strong></li><li><strong>单例模式</strong></li><li><strong>发布订阅模式</strong></li></ul><h2 id="2-构造函数模式-Constructor"><a href="#2-构造函数模式-Constructor" class="headerlink" title="2.构造函数模式 Constructor"></a>2.构造函数模式 Constructor</h2><p>构造函数模式，最简单的方式，实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Person(<span class="string">"mhy"</span>, <span class="number">24</span>);</span><br><span class="line">student.sayName(); <span class="comment">// "mhy"</span></span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br></pre></td></tr></table></figure></p><p>将方法定义到原型上，可以在每次生成<code>Person</code>实例的时候实现继承，使<code>this</code>指向该对象而不是<code>window</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Person</span>(<span class="params">name, age &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    this.name = name;</span></span></span><br><span class="line"><span class="function"><span class="params">    this.age = age;</span></span></span><br><span class="line"><span class="function"><span class="params">    this.sayName = function(</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> teacher = <span class="keyword">new</span> Person(<span class="string">'wang'</span>, <span class="number">28</span>);</span><br><span class="line">teacher.sayName();</span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Person(<span class="string">'li'</span>, <span class="number">18</span>);</span><br><span class="line">student.sayName();</span><br></pre></td></tr></table></figure></p><p>上面的实现方法将<code>sayName</code>实现在this上，每次调用的时候都会定义一个<code>sayName</code>方法，如果有很多实例的话会占用更多内存。</p><p>调用的时候是否使用<code>new</code>关键词？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为函数调用</span></span><br><span class="line"><span class="keyword">var</span> p = Person(<span class="string">'m'</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> p); <span class="comment">// "undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.sayName()); <span class="comment">// "m"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 new 关键词</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">"w"</span>, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s); <span class="comment">// "object"</span></span><br><span class="line"><span class="built_in">console</span>.log(s.sayName()); <span class="comment">// "w"</span></span><br></pre></td></tr></table></figure></p><p>可以强制使用<code>new</code>关键词, 在定义<code>Person</code>的时候加入判断，如果没有使用<code>new</code>操作符则在内部使用<code>new</code>操作符生成实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="keyword">this</span><span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">new</span> Person(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-工厂模式-Factory"><a href="#3-工厂模式-Factory" class="headerlink" title="3.工厂模式 Factory"></a>3.工厂模式 Factory</h2><p>工厂模式可以定义根据参数不同的子类，提供了有个创建对象的接口。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">createPerson</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">        name: opts.name || <span class="string">'mhy'</span>,</span><br><span class="line">        sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(&#123;<span class="attr">name</span> : <span class="string">'mhy'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(&#123;<span class="attr">name</span> : <span class="string">'小李'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式，每次使用都要new一个实例</span></span><br></pre></td></tr></table></figure></p><p>根据不同的子类类型，需要定义对应的子类。<a href="http://www.cnblogs.com/TomXu/archive/2012/02/23/2353389.html" target="_blank" rel="noopener">汤姆大叔</a>的讲解非常详细，想深入研究可以参考。</p><p>以下几种情景下工厂模式特别有用：</p><p>1.对象的构建十分复杂；</p><p>2.需要依赖具体环境创建不同实例；</p><p>3.处理大量具有相同属性的小对象；</p><p>什么时候不该用工厂模式？<br>不滥用运用工厂模式，有时候仅仅只是给代码增加了不必要的复杂度，同时使得测试难以运行下去。</p><h2 id="4-模块模式"><a href="#4-模块模式" class="headerlink" title="4.模块模式"></a>4.模块模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'mhy'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        sayName: sayName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>闭包方式实现一个模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'mhy'</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        changeName: <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;</span><br><span class="line">            name = newName;</span><br><span class="line">        &#125;,</span><br><span class="line">        sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)()</span><br><span class="line">Person.sayName();</span><br><span class="line">Person.changeName(<span class="string">'mhy'</span>);</span><br><span class="line">Person.sayName();</span><br></pre></td></tr></table></figure></p><h2 id="5-混合模式"><a href="#5-混合模式" class="headerlink" title="5.混合模式"></a>5.混合模式</h2><p>使用继承的方式实现一个模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, score</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line"><span class="comment">//调用call方法，等价于 &lt;==&gt; this.name = name; this.age = age;</span></span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="comment">//Student.prototype = Object.create(Person.prototype);</span></span><br><span class="line">Student.prototype = create(Person.prototype);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">create</span>(<span class="params">parentObj</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = parentObj;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">new</span> F();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student.prototype.sayScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">"mhy"</span>, <span class="number">24</span>, <span class="number">98</span>);</span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br></pre></td></tr></table></figure></p><h2 id="6-单例模式"><a href="#6-单例模式" class="headerlink" title="6.单例模式"></a>6.单例模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> People = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> instance;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">init</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="comment">//define private methods and properties</span></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">//define public methods and properties</span></span><br><span class="line">            name: name</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="comment">//词法作用域</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        createPeople: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">                instance = init(name);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = People.createPeople(<span class="string">'mhy'</span>); <span class="comment">// &#123;name: 'mhy'&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj2 = People.createPeople(<span class="string">'小李子'</span>); <span class="comment">//&#123;name: 'mhy'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一次后，之后每次调用，输出的值为第一次初始的值</span></span><br><span class="line"><span class="comment">// 单例模式， 常用于对话框  dialog</span></span><br></pre></td></tr></table></figure><h2 id="7-发布订阅模式"><a href="#7-发布订阅模式" class="headerlink" title="7.发布订阅模式"></a>7.发布订阅模式</h2><p>发布订阅模式， 处理异步模式非常便利<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventCenter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> events = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">on</span>(<span class="params">evt, handler</span>)</span>&#123;</span><br><span class="line">        events[evt] = events[evt] || [];</span><br><span class="line">        events[evt].push(&#123;</span><br><span class="line">            handler: handler</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">fire</span>(<span class="params">evt, args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!events[evt])&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[evt].length; i ++)&#123;</span><br><span class="line">            events[evt][i].handler(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">off</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">delete</span> events[name]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        on: on,</span><br><span class="line">        fire: fire,</span><br><span class="line">        off: off</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">EventCenter.on(<span class="string">'mu_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'my_event received...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventCenter.on(<span class="string">'my_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'my_event2 received...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">EventCenter.fire(<span class="string">'my_event'</span>);</span><br></pre></td></tr></table></figure></p>]]></content><categories><category> 前端 </category></categories><tags><tag> 设计模式 </tag></tags></entry><entry><title>数组的方法汇总</title><link href="/function-of-array.html"/><url>/function-of-array.html</url><content type="html"><![CDATA[<p>数组是对象，数组有很多方法，主要包括查询(不改变自身)，修改(改变自身)和遍历三大类。<br><a id="more"></a></p><h2 id="1-不会改变自身的方法"><a href="#1-不会改变自身的方法" class="headerlink" title="1.不会改变自身的方法"></a>1.不会改变自身的方法</h2><p>下面的这些方法不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。</p><h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h3><p>返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>对象是引用类型，要实现对象的拷贝，不能采用直接赋值的方法，因为两者实际上指向同一个对象。可以使用<code>concat</code>方法或者拓展符<code>...</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [].concat([<span class="string">'11'</span>,<span class="string">'21'</span>,<span class="string">'12'</span>], arr,[<span class="string">'s'</span>,<span class="string">'d'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); [<span class="string">'11'</span>,<span class="string">'21'</span>,<span class="string">'12'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'s'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.concat(<span class="string">'d'</span>, [<span class="string">'beijing'</span>,<span class="string">'shanghai'</span>]); <span class="comment">// [1,2,3,4,'d', 'beijing', 'shanghai']</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [...arr].concat(<span class="string">'tianjing'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p>判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.includes(<span class="number">4</span>); <span class="comment">//true</span></span><br><span class="line">arr.includes(<span class="string">'s'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h3><p>连接所有数组元素组成一个字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.join(<span class="string">''</span>); <span class="comment">// "1234"</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-slice-start-end"><a href="#Array-prototype-slice-start-end" class="headerlink" title="Array.prototype.slice(start, end)"></a>Array.prototype.slice(start, end)</h3><p>抽取当前数组中的一段元素组合成一个新数组。两个参数，第一个参数为开始的下标，第二个为结束的下标；只传一个参数则从该参数下标开始截取，不传参数则截取整个数组。<br>注意，截取的数组包含的一个参数下标对应的元素，但不包括第二个参宿所指下标对应的元素, 即截取的区间为[start, end)<br>当仅参数为负数时，从数组末尾开始截取。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice(<span class="number">3</span>); <span class="comment">// [4]</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// [2]， 不包括【3】</span></span><br></pre></td></tr></table></figure></p><p><strong>该方法不改变原数组，返回新数组</strong></p><h3 id="Array-prototype-toSource"><a href="#Array-prototype-toSource" class="headerlink" title="Array.prototype.toSource()"></a>Array.prototype.toSource()</h3><p>返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 Object.prototype.toSource() 方法。<br>注意：该特性是非标准的，请尽量不要在生产环境中使用它！<br>目前大部分浏览器都不支持该方法， 仅firefox支持。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alpha = <span class="keyword">new</span><span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">alpha.toSource();   <span class="comment">//返回["a", "b", "c"]</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h3><p>返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.toString(); <span class="comment">// "1,2,3,4"</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-toLocaleString"><a href="#Array-prototype-toLocaleString" class="headerlink" title="Array.prototype.toLocaleString()"></a>Array.prototype.toLocaleString()</h3><p>返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。</p><h3 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h3><p>返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.indexOf(<span class="number">4</span>); <span class="comment">// 3</span></span><br><span class="line">arr.indexOf(<span class="string">'2'</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-lastIndexOf"><a href="#Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.lastIndexOf()"></a>Array.prototype.lastIndexOf()</h3><p>返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</p><h2 id="2-会改变自身的方法"><a href="#2-会改变自身的方法" class="headerlink" title="2.会改变自身的方法"></a>2.会改变自身的方法</h2><p>下面的这些方法会改变调用它们的对象自身的值：</p><h3 id="Array-prototype-copyWithin"><a href="#Array-prototype-copyWithin" class="headerlink" title="Array.prototype.copyWithin()"></a>Array.prototype.copyWithin()</h3><p>在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"alpha"</span>, <span class="string">"beta"</span>, <span class="string">"copy"</span>, <span class="string">"delta"</span>].copyWithin(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//["alpha", "copy", "copy", "delta"]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'alpha'</span>, <span class="string">'bravo'</span>, <span class="string">'charlie'</span>, <span class="string">'delta'</span>].copyWithin(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// results in ["alpha", "bravo", "alpha", "bravo"]</span></span><br></pre></td></tr></table></figure></p><p><strong>语法：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target)</span><br><span class="line">arr.copyWithin(target, start)</span><br><span class="line">arr.copyWithin(target, start, end)</span><br><span class="line">arr.copyWithin(目标索引, [源开始索引], [结束源索引])</span><br></pre></td></tr></table></figure></p><p><strong>target</strong></p><p>0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。</p><p><strong>start</strong></p><p>0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。<br>如果 start 被忽略，copyWithin 将会从0开始复制。</p><p><strong>end</strong></p><p>0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>如果 end 被忽略，copyWithin 将会复制到 arr.length。</p><h3 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill()"></a>Array.prototype.fill()</h3><p>将数组中指定区间的所有元素的值，都替换成某个固定的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line">arr.fill(<span class="string">'s'</span>); <span class="comment">// [], 由于length = 0, 所有返回[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [];</span><br><span class="line">arr2.length = <span class="number">3</span>;</span><br><span class="line">arr2.fill(<span class="string">'x'</span>); <span class="comment">// ['x','x','x']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr3.fill(<span class="number">0</span>); <span class="comment">// [0, 0, 0]</span></span><br></pre></td></tr></table></figure></p><p><strong>语法：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value)</span><br><span class="line">arr.fill(value, start)</span><br><span class="line">arr.fill(value, start, end)</span><br></pre></td></tr></table></figure></p><p>具体要填充的元素区间是 [start, end) , 一个半开半闭区间.</p><h3 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h3><p>删除数组的最后一个元素，并返回这个元素。</p><h3 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h3><p>在数组的末尾增加一个或多个元素，并返回数组的新长度。</p><h3 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h3><p>删除数组的第一个元素，并返回这个元素。</p><h3 id="Array-prototype-unshift"><a href="#Array-prototype-unshift" class="headerlink" title="Array.prototype.unshift()"></a>Array.prototype.unshift()</h3><p>在数组的开头增加一个或多个元素，并返回数组的新长度。<br><strong>pop 和 push 均作用于数组末尾；shift 和 unshift 做用于数组开头， 删除返回该元素， 添加返回length， 均改变原数组</strong></p><h3 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h3><p>颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</p><h3 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h3><p>对数组元素进行排序，并返回当前数组。</p><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h3><p>在任意的位置给数组添加或删除任意个元素。<br><strong>语法:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start)</span><br><span class="line"></span><br><span class="line">array.splice(start, deleteCount)</span><br><span class="line"></span><br><span class="line">array.splice(start, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure></p><p><strong>返回值</strong>： 由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。<br><strong>该方法改变原数组。</strong></p><h2 id="3-遍历方法"><a href="#3-遍历方法" class="headerlink" title="3.遍历方法"></a>3.遍历方法</h2><p>在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在每一个数组元素都分别执行完回调函数之前，数组的<code>length</code>属性会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。</p><h3 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h3><p>为数组中的每个元素执行一次回调函数。<br>没有返回值。<br><strong>语法：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback(currentValue, index, array)&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">array.forEach(callback[, thisArg])</span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-entries"><a href="#Array-prototype-entries" class="headerlink" title="Array.prototype.entries()"></a>Array.prototype.entries()</h3><p>返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.entries();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator);</span><br><span class="line"><span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value);</span><br><span class="line"><span class="comment">// [0, "a"]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value);</span><br><span class="line"><span class="comment">// [1, "b"]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value);</span><br><span class="line"><span class="comment">// [2, "c"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.entries();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> iterator) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, "a"]</span></span><br><span class="line"><span class="comment">// [1, "b"]</span></span><br><span class="line"><span class="comment">// [2, "c"]</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h3><p>如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。</p><h3 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h3><p>如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</p><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><p>将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</p><h3 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h3><p>找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。</p><h3 id="Array-prototype-findIndex"><a href="#Array-prototype-findIndex" class="headerlink" title="Array.prototype.findIndex()"></a>Array.prototype.findIndex()</h3><p>找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</p><h3 id="Array-prototype-keys"><a href="#Array-prototype-keys" class="headerlink" title="Array.prototype.keys()"></a>Array.prototype.keys()</h3><p>返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = arr.keys();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator);</span><br><span class="line"><span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">// Object &#123;value: 0, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">// Object &#123;value: 1, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><p>返回一个由回调函数的返回值组成的新数组。</p><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><p>从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum + value;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// total is 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p><p>将二维数组转化为一维<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ar flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;,</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以写成箭头函数的形式：</span></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class="line"> []</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>数组去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">et arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.sort().reduce(<span class="function">(<span class="params">init, current</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(init.length===<span class="number">0</span> || init[init.length<span class="number">-1</span>]!==current)&#123;</span><br><span class="line">        init.push(current);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> init;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-reduceRight"><a href="#Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduceRight()"></a>Array.prototype.reduceRight()</h3><p>从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</p><h3 id="Array-prototype-values"><a href="#Array-prototype-values" class="headerlink" title="Array.prototype.values()"></a>Array.prototype.values()</h3><p>返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。</p><h3 id="Array-prototype-iterator"><a href="#Array-prototype-iterator" class="headerlink" title="Array.prototype@@iterator"></a>Array.prototype<a href>@@iterator</a></h3><p>和上面的 values() 方法是同一个函数。</p><h2 id="4-通用方法"><a href="#4-通用方法" class="headerlink" title="4.通用方法"></a>4.通用方法</h2><p>在 JavaScript 中，很多的数组方法被故意设计成是通用的。也就是说，那些看起来像是数组的对象（类数组对象），即拥有一个 <code>length</code> 属性，以及对应的索引属性（也就是数字类型的属性，比如 <code>obj[5]</code> )的非数组对象也是可以调用那些数组方法的。</p><p>其中一些数组方法，比如说 <code>join</code> 方法，它们只会单纯的读取当前对象的 <code>length</code> 属性和索性属性的值，并不会尝试去改变这些属性的值。</p><p>而另外一些数组方法，比如说 <code>reverse</code> 方法，它们会尝试修改那些属性的值，因此，如果当前对象是个 <code>String</code> 对象，那么这些方法在执行时就会报错，因为字符串对象的 <code>length</code> 属性和索引属性都是只读的。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> 数组 </tag></tags></entry><entry><title>CSS3动画--转不停的骰子</title><link href="/CSS3-rotate-dice.html"/><url>/CSS3-rotate-dice.html</url><content type="html"><![CDATA[<ul><li><a href="http://mhynet.cn/HomeWorks/projects/3D_transform/index.html">最终效果</a></li><li><a href="https://github.com/mhy-web/HomeWorks/blob/master/projects/3D_transform/index.html" target="_blank" rel="noopener">参考代码</a><br>按照以下步骤就可以实现。</li></ul><h3 id="1-建立容器和6个面"><a href="#1-建立容器和6个面" class="headerlink" title="1.建立容器和6个面:"></a>1.建立容器和6个面:</h3><p>最外面的 <code>&lt;div class=&quot;wrap&quot;&gt;&lt;/div&gt;</code> 用于整个结构在页面中的布局，以及设置观察者与z=0平面的距离，使具有三维位置变换的元素产生透视效果。z&gt;0的三维元素比正常大，而z&lt;0时则比正常小，大小程度由该属性的值决定。<br><code>&lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</code>是6个面的父容器，限制6个面的大小和位置。同时，旋转动画也设置在该容器上。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box front"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box back"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">perspective</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">45deg</span>) <span class="built_in">rotateZ</span>(<span class="number">45deg</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.front</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#7FFF00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#00FFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#DC143C</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#808000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#EE82EE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#FFFF00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-容器设置旋转动画："><a href="#2-容器设置旋转动画：" class="headerlink" title="2.容器设置旋转动画："></a>2.容器设置旋转动画：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="attribute">animation</span>: rotating <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rotating&#123;</span><br><span class="line">    0%&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">rotateZ</span>(<span class="number">0deg</span>) <span class="built_in">rotateX</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">100px</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>) <span class="built_in">rotateZ</span>(<span class="number">360deg</span>) <span class="built_in">rotateX</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-各个面设置点数"><a href="#3-各个面设置点数" class="headerlink" title="3.各个面设置点数"></a>3.各个面设置点数</h3><p>按1~6的顺序给对应的面的div加入点数。完成后的html应该是这样的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box front"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box left"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box right"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box back"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box top"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"box bottom"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item-ct"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span><span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对应的样式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">right</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line"><span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.front</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:center;</span><br><span class="line"><span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"><span class="attribute">align-self</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"><span class="attribute">align-self</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line"><span class="attribute">align-self</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"><span class="attribute">align-content</span>:space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line"><span class="attribute">align-items</span>:flex-start;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"><span class="attribute">align-content</span>:space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:center;</span><br><span class="line"><span class="attribute">align-items</span>:center;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span><span class="selector-class">.item-ct</span>&#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"><span class="attribute">align-content</span>:space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line"><span class="attribute">justify-content</span>:space-between;</span><br><span class="line"><span class="attribute">align-items</span>:flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置点数部分的css布局使用的是flex，如果使用grid布局，html结构可能会更简洁一些，你可以试一下。</p><h3 id="4-给每个点数设置颜色渐变动画"><a href="#4-给每个点数设置颜色渐变动画" class="headerlink" title="4.给每个点数设置颜色渐变动画"></a>4.给每个点数设置颜色渐变动画</h3><p>这部分代码只有css：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="attribute">animation</span>: shineChange <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> shineChange &#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#4169E1</span> ;</span><br><span class="line"><span class="attribute">box-shadow</span>:inset <span class="number">0</span><span class="number">0</span><span class="number">25px</span><span class="number">#416981</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line"><span class="attribute">background-color</span>:  <span class="number">#FFA500</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span><span class="number">0</span><span class="number">70px</span><span class="number">#ddA590</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#4169E1</span> ;</span><br><span class="line"><span class="attribute">box-shadow</span>:inset <span class="number">0</span><span class="number">0</span><span class="number">25px</span><span class="number">#416981</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是使用CSS3实现旋的介绍，文中的方案使用的是固定尺寸、flex布局，还有优化的空间。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> css </tag><tag> 动画 </tag><tag> transform </tag></tags></entry><entry><title>使用wepy框架开发微信小程序</title><link href="/wechat-app-of-wepy.html"/><url>/wechat-app-of-wepy.html</url><content type="html"><![CDATA[<p>微信小程序是仅使用于微信平台.</p><ol><li>安装开发者工具<a id="more"></a>开发微信小程序之前需要安装微信开发者工具，前往微信公众平台下载<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201828" target="_blank" rel="noopener">微信开发者工具</a>，根据所使用的操作系统选择对应的版本下载安装即可使用。</li><li>新建项目</li></ol><p>使用命令行新建项目目录如： myxhc， 然后进入该目录<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myxhc</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myxhc</span><br></pre></td></tr></table></figure><p>然后使用npm或yarn全局安装 wepy-cli工具:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure></p><p>安装好wepy-cli工具且新建好项目文件夹后，在该文件夹下使用以下命令生成项目：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy <span class="keyword">new</span> myproject</span><br></pre></td></tr></table></figure></p><p>安装依赖，项目需要的依赖可以单独使用npm安装，或者先配置好package.json文件后统一安装。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p><p>开启实时编译：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy build <span class="comment">--watch</span></span><br></pre></td></tr></table></figure></p><p>现在，可以把项目导入微信开发者工具进行实时预览调试了。</p><ol start="3"><li>把项目导入开发者工具</li></ol><p><img src="http://wicdn.xiaohongchun.com/xhc-plat/1518780472339_mdFC4GFGhZ.png" style="width: 50%; margin-left: 20px;"></p><p>注意：使用wepy框架生成的项目，需要导入的是项目中的dist目录；使用原生微信小程序开发则需要导入整个项目目录。</p><p>微信开发者工具的使用说明这里不在赘述，遇到问题请查阅使用文档或者搜索相关问题寻找解决办法。</p><ol start="4"><li>wepy框架的使用</li></ol><p>wepy框架使用请查阅<a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">wepy官方文档</a><br>wepy框架和Vue很相似，如果你有Vue使用经验，学习wepy框架应该没什么难度。</p>]]></content><categories><category> 前端 </category></categories><tags><tag> 微信小程序 </tag><tag> wepy </tag></tags></entry><entry><title>this、原型、继承总结</title><link href="/this-protoype-inherit.html"/><url>/this-protoype-inherit.html</url><content type="html"><![CDATA[<h2 id="this-相关问题"><a href="#this-相关问题" class="headerlink" title="this 相关问题"></a>this 相关问题</h2><h3 id="问题1：-apply、call-、bind有什么作用，什么区别"><a href="#问题1：-apply、call-、bind有什么作用，什么区别" class="headerlink" title="问题1： apply、call 、bind有什么作用，什么区别"></a>问题1： apply、call 、bind有什么作用，什么区别</h3><a id="more"></a><ul><li><p>Function.prototype.bind:</p><p>bind，返回一个新函数，并且使函数内部的this为传入的第一个参数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fn3 = obj1.fn.bind(obj1)<span class="comment">;</span></span><br><span class="line">fn3()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>使用call和apply设置this</p><p>call apply，调用一个函数，传入函数执行上下文及参数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span>.<span class="title">call</span></span>(context, param1, param2...)</span><br><span class="line"><span class="function"><span class="keyword">fn</span>.<span class="title">apply</span></span>(context, paramArray)</span><br></pre></td></tr></table></figure><p>语法很简单，第一个参数都是希望设置的this对象，不同之处在于call方法接收参数列表，而apply接收参数数组</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f<span class="symbol">n2</span>.<span class="keyword">call</span><span class="comment">(obj1)</span>;</span><br><span class="line">f<span class="symbol">n2</span>.apply<span class="comment">(obj1)</span>;</span><br></pre></td></tr></table></figure></li><li><p>它们的不同之处：</p><ul><li><p>apply：</p><p> 最多只能有两个参数——新this对象和一个数组 argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里面。如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj，并且无法被传递任何参数。</p></li><li><p>call：</p><p> 则是直接的参数列表，主要用在js对象各方法互相调用的时候，使当前this实例指针保持一致,或在特殊情况下需要改变this指针。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。</p></li></ul><p>更简单地说，apply和call功能一样，只是传入的参数列表形式不同：如 func.call(func1,var1,var2,var3) 对应的apply写法为：func.apply(func1,[var1,var2,var3])<br>也就是说：call调用的为单个，apply调用的参数为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">sum.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">sum.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ul><p>作用　　</p><pre><code>* 调用函数</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = <span class="string">'tom'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//this指向window</span></span><br><span class="line"><span class="keyword">var</span> info = <span class="string">'jerry'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.info);   <span class="comment">//tom</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>===<span class="built_in">window</span>)  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">foo.call();</span><br><span class="line">foo.apply();</span><br><span class="line">call和apply可以改变函数中<span class="keyword">this</span>的指向　　</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      info:<span class="string">'spike'</span></span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);    <span class="comment">//这里foo函数里面的this就指向了obj</span></span><br><span class="line">foo.apply(obj);</span><br></pre></td></tr></table></figure><pre><code>* 借用别的对象的方法eg:求数组中的最大值</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">3434</span>,<span class="number">23</span>];</span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b-a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)   <span class="comment">//借用别的对象的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line">fn.call(context, param1, param2...)</span><br><span class="line">fn.apply(context, paramArray)</span><br></pre></td></tr></table></figure><h3 id="问题2：-以下代码输出什么"><a href="#问题2：-以下代码输出什么" class="headerlink" title="问题2： 以下代码输出什么?"></a>问题2： 以下代码输出什么?</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> john = &#123;</span><br><span class="line">    firstName: <span class="string">"John"</span></span><br><span class="line">&#125;</span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    alert(this.firstName + <span class="string">": hi!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">john.sayHi = <span class="function"><span class="keyword">func</span></span></span><br><span class="line"><span class="function"><span class="title">john</span>.<span class="title">sayHi</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//输出结果：join：hi！</span></span><br><span class="line"><span class="comment">//此时，this是join对象；</span></span><br></pre></td></tr></table></figure><h3 id="问题3：-下面代码输出什么，为什么"><a href="#问题3：-下面代码输出什么，为什么" class="headerlink" title="问题3： 下面代码输出什么，为什么"></a>问题3： 下面代码输出什么，为什么</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span> &#123;</span></span><br><span class="line">   alert(this)</span><br><span class="line">&#125;</span><br><span class="line">//输出： Window</span><br><span class="line">//原因：<span class="function"><span class="keyword">func</span><span class="params">()</span>等价于<span class="title">func</span>.<span class="title">call</span><span class="params">(undefined)</span>;</span></span><br><span class="line">//而undefined会被浏览器默认为全局对象window<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="问题4：下面代码输出什么"><a href="#问题4：下面代码输出什么" class="headerlink" title="问题4：下面代码输出什么"></a>问题4：下面代码输出什么</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//输出为：#document;  window;</span></span><br><span class="line"><span class="comment">//在事件处理程序中this代表事件源DOM对象</span></span><br><span class="line"><span class="comment">//(setTimeout、setInterval这两个方法执行的函数this也是全局对象)</span></span><br></pre></td></tr></table></figure><h4 id="问题5：下面代码输出什么，why"><a href="#问题5：下面代码输出什么，why" class="headerlink" title="问题5：下面代码输出什么，why"></a>问题5：下面代码输出什么，why</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var john = &#123;</span><br><span class="line">    firstName: <span class="string">"John"</span></span><br><span class="line">&#125;</span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span> &#123;</span></span><br><span class="line">    alert( this.firstName )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">(john)</span></span></span><br><span class="line">//输出： john</span><br><span class="line">//解释：<span class="built_in">call</span>（）中第一个参数表示定义的this值，即<span class="function"><span class="keyword">func</span>（）中的<span class="title">this</span>代表<span class="title">join</span>。</span></span><br></pre></td></tr></table></figure><h4 id="问题6：-以下代码有什么问题，如何修改"><a href="#问题6：-以下代码有什么问题，如何修改" class="headerlink" title="问题6： 以下代码有什么问题，如何修改"></a>问题6： 以下代码有什么问题，如何修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="built_in">module</span>= &#123;</span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this指？</span></span><br><span class="line"><span class="keyword">this</span>.showMsg();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    showMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'饥人谷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this指什么$btn</span></span><br></pre></td></tr></table></figure><p>修改后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="built_in">module</span>= &#123;</span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(_this) <span class="comment">//_this指的是module；</span></span><br><span class="line">            _this.showMsg();<span class="comment">//饥人谷</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    showMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'饥人谷'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="原型链相关问题"><a href="#原型链相关问题" class="headerlink" title="原型链相关问题"></a>原型链相关问题</h2><h4 id="问题7：有如下代码，解释Person、-prototype、proto、p、constructor之间的关联。"><a href="#问题7：有如下代码，解释Person、-prototype、proto、p、constructor之间的关联。" class="headerlink" title="问题7：有如下代码，解释Person、 prototype、proto、p、constructor之间的关联。"></a>问题7：有如下代码，解释Person、 prototype、<strong>proto</strong>、p、constructor之间的关联。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is :'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"若愚"</span>)</span><br><span class="line">p.sayName();</span><br></pre></td></tr></table></figure><p><img src="https://github.com/mhy-web/HomeWorks/tree/master/%E9%AB%98%E7%BA%A7/task2/images/prototype-0.png" alt></p><ul><li>我们通过函数定义了类<code>Person</code>，类（函数）自动获得属性prototype;</li><li><p>每个类的实例都会有一个内部属性 <code>__proto__</code>，指向类的prototype属性</p></li><li><p><code>p</code>是构造函数<code>Person</code>的一个实例，<code>p</code>的  <code>__proto__</code> 指向了Person的prototype属性，</p></li><li><code>prototype</code>是构造函数内部的原型对象，所以拥有<code>contructor</code>和<code>__proto__</code>属性，其中<code>contructor</code>属性指向构造函数<code>Person</code>，<code>__proto__</code>指向该对象的原型.</li></ul><h4 id="问题8：-上例中，对对象-p可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。"><a href="#问题8：-上例中，对对象-p可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。" class="headerlink" title="问题8： 上例中，对对象 p可以这样调用 p.toString()。toString是哪里来的? 画出原型图?并解释什么是原型链。"></a>问题8： 上例中，对对象 p可以这样调用 p.toString()。toString是哪里来的? 画出原型图?并解释什么是原型链。</h4><ul><li><p>p.toString()方法是继承构造函数Object的原型对象里定义的toString方法，首先p会找自己的toString方法，如果没有找到，<br>会沿着<code>__proto__</code> 属性继续到构造函数Person的prototype里找toString方法，<br>如果还未找到，再继续往Person.prototype的<code>__proto__</code>即Object.prototype找toString方法，最后找到toString()方法。</p></li><li><p>原型链：由于原型对象本身也是对象，而每个javascript对象都有一个原型对象，每个对象都有一个隐藏的<strong>proto</strong>属性，<br>原型对象也有自己的原型，而它自己的原型对象又可以有自己的原型，这样就组成了一条链，这个就是原型链。<br>在访问对象的属性时，如果在对象本身中没有找到，则会去原型链中查找，如果找到，直接返回值，如果整个链都遍历且没有找到<br>属性，则返回undefined。原型链一般实现为一个链表，这样就可以按照一定的顺序来查找。</p></li></ul><p><img src="https://github.com/mhy-web/HomeWorks/tree/master/%E9%AB%98%E7%BA%A7/task2/images/prototype.png" alt></p><h4 id="问题9：对String做扩展，实现如下方式获取字符串中频率最高的字符"><a href="#问题9：对String做扩展，实现如下方式获取字符串中频率最高的字符" class="headerlink" title="问题9：对String做扩展，实现如下方式获取字符串中频率最高的字符"></a>问题9：对String做扩展，实现如下方式获取字符串中频率最高的字符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'ahbbccdeddddfg'</span>;</span><br><span class="line"><span class="keyword">var</span> ch = str.getMostOften();</span><br><span class="line"><span class="built_in">console</span>.log(ch); <span class="comment">//d , 因为d 出现了5次</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="built_in">String</span>.prototype.getMostOften = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,k;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        k = <span class="keyword">this</span>[i];</span><br><span class="line"><span class="keyword">if</span>(obj[k])&#123;</span><br><span class="line">            obj[k]++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj[k] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>,key;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj[k]&gt;max)&#123;</span><br><span class="line">            max = obj[k];</span><br><span class="line">            key = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="built_in">String</span>.prototype.getMostOften = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>.split(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">allLetters,letter</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(allLetters[letter])&#123;</span><br><span class="line">            allLetters[letter]++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            allLetters[letter] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> allLetters;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> result)&#123;</span><br><span class="line"><span class="keyword">if</span> (result[key]&gt;max)&#123;</span><br><span class="line">            max = result[key];</span><br><span class="line">            k = key</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ahbbccdeddddfg'</span>;</span><br><span class="line"><span class="keyword">var</span> ch = str.getMostOften();</span><br><span class="line"><span class="built_in">console</span>.log(ch); <span class="comment">//d</span></span><br></pre></td></tr></table></figure><h4 id="问题10：-instanceOf有什么作用？内部逻辑是如何实现的？"><a href="#问题10：-instanceOf有什么作用？内部逻辑是如何实现的？" class="headerlink" title="问题10： instanceOf有什么作用？内部逻辑是如何实现的？"></a>问题10： instanceOf有什么作用？内部逻辑是如何实现的？</h4><ul><li>instanceOf：判断一个对象是否为另一个对象的实例</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">isInstanceOf</span><span class="params">(obj,fn)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> oldProto = obj.__proto__;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(oldProto === fn.prototype)&#123; <span class="comment">//prototype是小写的！</span></span><br><span class="line"><span class="keyword">return</span><span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            oldProto = oldProto.__proto__;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(oldProto)&#123;</span><br><span class="line"><span class="keyword">return</span><span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承相关问题"><a href="#继承相关问题" class="headerlink" title="继承相关问题"></a>继承相关问题</h2><h4 id="问题11：继承有什么作用"><a href="#问题11：继承有什么作用" class="headerlink" title="问题11：继承有什么作用?"></a>问题11：继承有什么作用?</h4><p><strong>继承是指一个对象直接使用另一对象的属性和方法。</strong><br>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，<br>以及该对象的原型的原型，依此层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。这就意味着，JS对象可以使用所有<br>其原型的所有方法，如果我们在原型上添加新的方法，那么实例也会拥有该方法，能够大大减少冗余代码。</p><h4 id="问题12：-下面两种写法有什么区别"><a href="#问题12：-下面两种写法有什么区别" class="headerlink" title="问题12： 下面两种写法有什么区别?"></a>问题12： 下面两种写法有什么区别?</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">People</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'饥人谷'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'若愚'</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure><p>区别:</p><p>方法一是将printName作为构造函数的方法，实例在进行调用的时候是调用的自身的方法，较为消耗内存。<br>方法二是将printName作为构造函数原型的方法，所有实例共享这个方法。</p><h4 id="问题13：-Object-create-有什么作用？兼容性如何？"><a href="#问题13：-Object-create-有什么作用？兼容性如何？" class="headerlink" title="问题13： Object.create 有什么作用？兼容性如何？"></a>问题13： Object.create 有什么作用？兼容性如何？</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.sayName = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span><span class="constructor">Male(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, age);</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype = <span class="keyword">new</span><span class="constructor">Person()</span>;</span><br><span class="line"><span class="comment">//该方法同下，代替不兼容Object.create()的使用场景</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype.constructor = Male;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype.sayAge = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">    console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line">var p1 = <span class="keyword">new</span><span class="constructor">Male('<span class="params">hunger</span>', 20, '<span class="params">nan</span>')</span>;</span><br><span class="line">p1.say<span class="constructor">Name()</span>;<span class="comment">//hunger</span></span><br><span class="line">p1.say<span class="constructor">Age()</span>;<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>兼容性：</p><p><img src="https://github.com/mhy-web/HomeWorks/tree/master/%E9%AB%98%E7%BA%A7/task2/images/兼容性.jpg" alt></p><h4 id="问题14：-hasOwnProperty有什么作用？-如何使用？"><a href="#问题14：-hasOwnProperty有什么作用？-如何使用？" class="headerlink" title="问题14： hasOwnProperty有什么作用？ 如何使用？"></a>问题14： hasOwnProperty有什么作用？ 如何使用？</h4><p>hasOwnPerperty是Object.prototype的一个方法，可以判断一个对象是否包含自定义属性而不是原型链上的属性，<br>hasOwnProperty是JavaScript中唯一一个处理属性但是不查找原型链的函数<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.has<span class="constructor">OwnProperty('<span class="params">name</span>')</span>; <span class="comment">// true</span></span><br><span class="line">m.has<span class="constructor">OwnProperty('<span class="params">printName</span>')</span>; <span class="comment">// false</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype.has<span class="constructor">OwnProperty('<span class="params">printAge</span>')</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h4 id="问题15：如下代码中call的作用是什么"><a href="#问题15：如下代码中call的作用是什么" class="headerlink" title="问题15：如下代码中call的作用是什么?"></a>问题15：如下代码中call的作用是什么?</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="constructor">Person(<span class="params">name</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span><span class="constructor">Male(<span class="params">name</span>, <span class="params">sex</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, sex);    <span class="comment">//这里的 call 有什么作用</span></span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题16：-补全代码，实现继承"><a href="#问题16：-补全代码，实现继承" class="headerlink" title="问题16： 补全代码，实现继承"></a>问题16： 补全代码，实现继承</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="constructor">Person(<span class="params">name</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line"><span class="comment">// todo ...</span></span><br><span class="line">    this.name = name;</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.getName = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line"><span class="comment">// todo ...</span></span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span><span class="constructor">Male(<span class="params">name</span>, <span class="params">sex</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"><span class="comment">//todo ...</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this,name, sex);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo ...</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype.constructor = Male;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Male</span>.</span></span>prototype.getAge = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line"><span class="comment">//todo ...</span></span><br><span class="line">    console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var ruoyu = <span class="keyword">new</span><span class="constructor">Male('若愚', '男', 27)</span>;</span><br><span class="line">ruoyu.print<span class="constructor">Name()</span>;<span class="comment">//若愚</span></span><br></pre></td></tr></table></figure>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> 继承 </tag><tag> this </tag><tag> 原型 </tag></tags></entry><entry><title>前端模块化常用规范</title><link href="/FE-module.html"/><url>/FE-module.html</url><content type="html"><![CDATA[<p>JavaScript在发展初期，仅仅用于实现简单的页面交互逻辑。如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着web2.0时代的到来，Ajax技术得到广泛应用，jQuery等前端库层出不穷，前端代码日益膨胀。随着vue、react和angular三大框架以及nodejs的广泛应用，模块化和工程化已成为前端开发中不可缺少的重要角色。</p><a id="more"></a><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>JavaScript在设计时没有提供模块化的功能，开发者需要模拟出类似的功能，来隔离、组织复杂的JavaScript代码，称为模块化。<br>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，各行其是就都乱套了。<br>前端模块化发展经历了几个阶段，今天有ADM、CMD、CmmonJS以及ES Module等模块化规范来辅助开发大型前端应用。</p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>我们先从CommonJS谈起，因为在网页端没有模块化编程只是页面JavaScript逻辑复杂，但也可以工作下去，在服务器端却一定要有模块，所以虽然JavaScript在web端发展这么多年，第一个流行的模块化规范却由服务器端的JavaScript应用带来，CommonJS规范是由NodeJS发扬光大，这标志着JavaScript模块化编程正式登上舞台。</p><ol><li>定义模块 根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性</li><li>模块输出： 模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象</li><li>加载模块： 加载模块使用require方法，该方法读取一个文件并执行，返回文件内部的module.exports对象</li></ol><p>看个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块定义 myModel.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Byron'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">printName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">printFullName</span>(<span class="params">firstName</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(firstName + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    printName: printName,</span><br><span class="line">    printFullName: printFullName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameModule = <span class="built_in">require</span>(<span class="string">'./myModel.js'</span>);</span><br><span class="line"></span><br><span class="line">nameModule.printName();</span><br></pre></td></tr></table></figure></p><p>不同的实现对require时的路径有不同要求，一般情况可以省略js拓展名，可以使用相对路径，也可以使用绝对路径，甚至可以省略路径直接使用模块名（前提是该模块是系统内置模块）</p><h3 id="尴尬的浏览器"><a href="#尴尬的浏览器" class="headerlink" title="尴尬的浏览器"></a>尴尬的浏览器</h3><p>仔细看上面的代码，会发现require是同步的。模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。</p><p>这在服务器端实现很简单，也很自然，然而， 想在浏览器端实现问题却很多。</p><p>浏览器端，加载JavaScript最佳、最容易的方式是在document中插入script 标签。但脚本标签天生异步，传统CommonJS模块在浏览器环境中无法正常加载。</p><p>解决思路之一是，开发一个服务器端组件，对模块代码作静态分析，将模块与它的依赖列表一起返回给浏览器端。 这很好使，但需要服务器安装额外的组件，并因此要调整一系列底层架构。</p><p>另一种解决思路是，用一套标准模板来封装模块定义，但是对于模块应该怎么定义和怎么加载，又产生的分歧：</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD， 即Asynchronous Module Definition，中文名是异步模块定义的意思。它是一个在浏览器端模块化开发的规范</p><p>由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎RequireJS，实际上AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出</p><p>requireJS主要解决两个问题</p><ol><li>多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器<ol start="2"><li>js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长</li></ol></li></ol><p>看一个使用requireJS的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块 myModule.js</span></span><br><span class="line">define([<span class="string">'dependency'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Byron'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">printName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        printName: printName</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'myModule'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">my</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　 my.printName();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>语法</strong></p><p>requireJS定义了一个函数 define，它是全局变量，用来定义模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure></p><ol><li>id：可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名）</li><li>dependencies：是一个当前模块依赖的模块名称数组</li><li>factory：工厂方法，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值</li></ol><p>在页面上使用require函数加载模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([dependencies], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>require()函数接受两个参数</p><ol><li>第一个参数是一个数组，表示所依赖的模块</li><li>第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块</li></ol><p>require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD 即Common Module Definition通用模块定义，CMD规范是国内发展出来的，就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS要解决的问题和requireJS一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同<br><strong>语法</strong></p><p>Sea.js 推崇一个模块一个文件，遵循统一的写法<br><strong>define</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, deps?, factory)</span><br></pre></td></tr></table></figure></p><p>因为CMD推崇</p><ol><li>一个文件一个模块，所以经常就用文件名作为模块id</li><li>CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写</li></ol><p>factory有三个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span></span><br></pre></td></tr></table></figure></p><p><strong>require</strong></p><p>require 是 factory 函数的第一个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(id)</span><br></pre></td></tr></table></figure></p><p>require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口</p><p><strong>exports</strong></p><p>exports 是一个对象，用来向外提供模块接口</p><p><strong>module</strong></p><p>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</p><p><strong>demo</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块  myModule.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>)</span><br><span class="line">  $(<span class="string">'div'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.use([<span class="string">'myModule.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">my</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="AMD与CMD区别"><a href="#AMD与CMD区别" class="headerlink" title="AMD与CMD区别"></a>AMD与CMD区别</h2><p>关于这两个的区别网上可以搜出一堆文章，简单总结一下</p><p>最明显的区别就是在模块定义时对依赖的处理不同</p><ol><li>AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块</li><li>CMD推崇就近依赖，只有在用到某个模块的时候再去require</li></ol><p>这种区别各有优劣，只是语法上的差距，而且requireJS和SeaJS都支持对方的写法</p><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同</p><p>很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略</p><p>为什么我们说两个的区别是依赖模块执行时机不同，为什么很多人认为ADM是异步的，CMD是同步的（除了名字的原因）</p><p>同样都是异步加载模块，AMD在加载模块完成后就会执行该模块，所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行</p><p>CMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的</p><p>这也是很多人说AMD用户体验好，因为没有延迟，依赖模块提前执行了，CMD性能好，因为只有用户需要的时候才执行的原因.</p><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>ES Module伴随着ES6的发展，已被广泛应用于前端应用中。</p><h3 id="export-语句"><a href="#export-语句" class="headerlink" title="export 语句"></a>export 语句</h3><p>ES Module使用<code>export</code>语句导出模块，<code>export</code>语句有很多种灵活的用法，这里列出几种简单的用法仅做参考。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申明时直接导出变量</span></span><br><span class="line"><span class="keyword">export</span><span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">export</span><span class="keyword">var</span> year = <span class="number">2012</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先申明，后导出变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">2012</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name, year &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="keyword">export</span><span class="function"><span class="keyword">function</span><span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象</span></span><br><span class="line"><span class="keyword">export</span><span class="keyword">var</span> setting = &#123;</span><br><span class="line">  env: <span class="string">'production'</span>,</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  url: <span class="string">'https://mhynet.cn'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span><span class="string">'fs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span><span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Setting <span class="keyword">from</span><span class="string">'setting'</span></span><br></pre></td></tr></table></figure><h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span><span class="keyword">default</span> &#123;</span><br><span class="line">  env: <span class="string">'production'</span>,</span><br><span class="line">  debug: <span class="literal">false</span>,</span><br><span class="line">  url: <span class="string">'https://mhynet.cn'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">default</span><span class="function"><span class="keyword">function</span><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'export default'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="export-与-import-的复合写法"><a href="#export-与-import-的复合写法" class="headerlink" title="export 与 import 的复合写法"></a>export 与 import 的复合写法</h3><p>在一个模块中，先输入再输出，可以使用该写法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span><span class="string">'my_module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span><span class="string">'my_module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</span><br></pre></td></tr></table></figure></p><p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程（一）：模块的写法</a><br><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="noopener">Javascript模块化编程（二）：AMD规范</a><br><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">Module 的语法</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> 模块化 </tag><tag> 工程化 </tag><tag> 前端 </tag></tags></entry><entry><title>【转】javascript的self和this使用小结</title><link href="/self-and-this-in-js.html"/><url>/self-and-this-in-js.html</url><content type="html"><![CDATA[<p>一、self<br>这个非常简单。我们知道，打开任何一个网页，浏览器会首先创建一个窗口，这个窗口就是一个window对象，也是js运行所依附的全局环境对象和全局作用域对象。self 指窗口本身，它返回的对象跟window对象是一模一样的。也正因为如此，window对象的常用方法和函数都可以用self代替window。举个例子，常见的写法如“self.close();”，把它放在<a>标记中：“<a href="javascript:self.close();" target="_blank" rel="noopener">关闭窗口</a>”，单击“关闭窗口”链接，当前页面关闭。</a></p><a id="more"></a><p>二、this关键字<br>在讲this之前，看下面的一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.textValue = <span class="string">'this的dom测试'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.element= <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.textValue;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.element.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.element.style.cursor = <span class="string">"pointer"</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.element.attachEvent(<span class="string">'onclick'</span>, <span class="keyword">this</span>.ToString);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  thisTest.prototype.RenderDom = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.element);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  thisTest.prototype.ToString = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="actionscript">      alert(<span class="string">"单击我："</span>+<span class="keyword">this</span>.textValue);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> test= <span class="keyword">new</span> thisTest();</span></span><br><span class="line">  test.RenderDom();</span><br><span class="line"><span class="actionscript"><span class="comment">//test.ToString();</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本来的目的是想在body中添加一个span元素，对于这个span元素，制定了它的字体颜色，悬浮在它上面的鼠标样式和单击触发事件。问题就出现在它的单击事件上（弹出”单击我:undefined”）。也许有人会说你丫傻呀，写这么多sb代码还不就是为了实现下面这个东东吗？<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span <span class="attribute">style</span>=<span class="string">'cursor:pointer;color:blue;'</span><span class="attribute">onclick</span>=<span class="string">"alert(this.innerHTML)"</span>&gt;this的dom测试&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>你看多简单直观，而且还不容易出错？！kao，我晕。我正要讲的是您正在使用的this.innerHTML中的this呀。<br>1、this到底指什么？<br>我们熟悉的c#有this关键字，它的主要作用就是指代当前对象实例（参数传递和索引器都要用到this）。在javascript中，this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）。<br>2、常见使用方式<br>（1）、直接在dom元素中使用<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"btnTest"</span><span class="attribute">type</span>=<span class="string">"button"</span><span class="attribute">value</span>=<span class="string">"提交"</span><span class="attribute">onclick</span>=<span class="string">"alert(this.value))"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>分析：对于dom元素的一个onclick（或其他如onblur等）属性，它为所属的html元素所拥有，直接在它触发的函数里写this，this应该指向该html元素。<br>（2）、给dom元素注册js函数<br>a、不正确的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="keyword">this</span>.value); <span class="comment">// 弹出undefined, this在这里指向??</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnTest"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"提交"</span><span class="attr">onclick</span>=<span class="string">"thisTest()"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 分析：onclick事件直接调用thisTest函数，程序就会弹出undefined。因为thisTest函数是在window对象中定义的，<br>所以thisTest的拥有者（作用域）是window，thisTest的this也是window。而window是没有value属性的，所以就报错了。<br>b、正确的方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnTest"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="keyword">this</span>.value);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"btnTest"</span>).onclick=thisTest; <span class="comment">//给button的onclick事件注册一个函数</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>分析：在前面的示例中，thisTest函数定义在全局作用域（这里就是window对象），所以this指代的是当前的window对象。而通过document.getElementById(“btnTest”).onclick=thisTest;这样的形式，其实是将btnTest的onclick属性设置为thisTest函数的一个副本，在btnTest的onclick属性的函数作用域内，this归btnTest所有，this也就指向了btnTest。其实如果有多个dom元素要注册该事件，我们可以利用不同的dom元素id，用下面的方式实现：<br>document.getElementById(“domID”).onclick=thisTest; //给button的onclick事件注册一个函数。<br>因为多个不同的HTML元素虽然创建了不同的函数副本，但每个副本的拥有者都是相对应的HTML元素，各自的this也都指向它们的拥有者，不会造成混乱。<br>为了验证上述说法，我们改进一下代码，让button直接弹出它们对应的触发函数：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input<span class="built_in"> id</span>=<span class="string">"btnTest1"</span> type=<span class="string">"button"</span><span class="keyword">value</span>=<span class="string">"提交1"</span> onclick=<span class="string">"thisTest()"</span> /&gt;</span><br><span class="line">&lt;input<span class="built_in"> id</span>=<span class="string">"btnTest2"</span> type=<span class="string">"button"</span><span class="keyword">value</span>=<span class="string">"提交2"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">function thisTest()</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">this.<span class="keyword">value</span>=<span class="string">"提交中"</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">var btn=document.getElementById("btnTest1");</span></span><br><span class="line"><span class="xml">alert(btn.onclick); //第一个按钮函数</span></span><br><span class="line"></span><br><span class="line"><span class="xml">var btnOther=document.getElementById("btnTest2");</span></span><br><span class="line"><span class="xml">btnOther.onclick=thisTest;</span></span><br><span class="line"><span class="xml">alert(btnOther.onclick); //第二个按钮函数</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>其弹出的结果是：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">onclick</span><span class="params">()</span></span>&#123;</span><br><span class="line">  thisTest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value=<span class="string">"提交中"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面的结果你一定理解的更透彻了。<br>By the way，每新建一个函数的副本，程序就会为这个函数副本分配一定的内存。而实际应用中，大多数函数并不一定会被调用，于是这部分内存就被白白浪费了。所以我们通常都这么写：<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> id="btnTest1" <span class="keyword">type</span>="button" <span class="keyword">value</span>="提交1" onclick="thisTest(this)" /&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> id="btnTest2" <span class="keyword">type</span>="button" <span class="keyword">value</span>="提交2" onclick="thisTest(this)" /&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> id="btnTest3" <span class="keyword">type</span>="button" <span class="keyword">value</span>="提交3" onclick="thisTest(this)" /&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> id="btnTest4" <span class="keyword">type</span>="button" <span class="keyword">value</span>="提交4" onclick="thisTest(this)" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="keyword">type</span>="text/javascript"&gt;</span><br><span class="line"><span class="keyword">function</span> thisTest(obj)&#123;</span><br><span class="line">  alert(obj.<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这是因为我们使用了函数引用的方式，程序就只会给函数的本体分配内存，而引用只分配指针。这样写一个函数，调用的地方给它分配一个（指针）引用，这样效率就高很多。当然，如果你觉得这样注册事件不能兼容多种浏览器，可以写下面的注册事件的通用脚本：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js事件 添加 EventUtil.addEvent(dom元素,事件名称,事件触发的函数名) 移除EventUtil.removeEvent(dom元素,事件名称,事件触发的函数名)</span></span><br><span class="line">var EventUtil = <span class="keyword">new</span> event<span class="constructor">Manager()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js事件通用管理器 dom元素 添加或者移除事件</span></span><br><span class="line"><span class="keyword">function</span> event<span class="constructor">Manager()</span> &#123;</span><br><span class="line"><span class="comment">//添加事件</span></span><br><span class="line"><span class="comment">//oDomElement:dom元素,如按钮,文本,document等; ****** oEventType:事件名称(如:click,如果是ie浏览器,自动将click转换为onclick);****** oFunc:事件触发的函数名</span></span><br><span class="line">    this.addEvent = <span class="keyword">function</span>(oDomElement, oEventType, oFunc) &#123;</span><br><span class="line"><span class="comment">//ie</span></span><br><span class="line"><span class="keyword">if</span> (oDomElement.attachEvent) &#123;</span><br><span class="line">            oDomElement.attach<span class="constructor">Event(<span class="string">"on"</span> + <span class="params">oEventType</span>, <span class="params">oFunc</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//ff,opera,safari等</span></span><br><span class="line"><span class="keyword">else</span><span class="keyword">if</span> (oDomElement.addEventListener) &#123;</span><br><span class="line">            oDomElement.add<span class="constructor">EventListener(<span class="params">oEventType</span>, <span class="params">oFunc</span>, <span class="params">false</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            oDomElement<span class="literal">["<span class="identifier">on</span>" + <span class="identifier">oEventType</span>]</span> = oFunc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.removeEvent = <span class="keyword">function</span>(oDomElement, oEventType, oFunc) &#123;</span><br><span class="line"><span class="comment">//ie</span></span><br><span class="line"><span class="keyword">if</span> (oDomElement.detachEvent) &#123;</span><br><span class="line">            oDomElement.detach<span class="constructor">Event(<span class="string">"on"</span> + <span class="params">oEventType</span>, <span class="params">oFunc</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//ff,opera,safari等</span></span><br><span class="line"><span class="keyword">else</span><span class="keyword">if</span> (oDomElement.removeEventListener) &#123;</span><br><span class="line">            oDomElement.remove<span class="constructor">EventListener(<span class="params">oEventType</span>, <span class="params">oFunc</span>, <span class="params">false</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            oDomElement<span class="literal">["<span class="identifier">on</span>" + <span class="identifier">oEventType</span>]</span> = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 正像注释写的那样，要注册dom元素事件，用EventUtil.addEvent(dom元素,事件名称,事件触发的函数名)即可， 移除时可以这样写：EventUtil.removeEvent(dom元素,事件名称,事件触发的函数名)。这是题外话，不说了。<br>(3)、类定义中使用this关键字<br>这个其实再常见不过，看示例：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> tmpName = <span class="string">'jeff wong'</span>;</span><br><span class="line"><span class="keyword">this</span>.userName= <span class="string">'jeff wong'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test= <span class="keyword">new</span> thisTest();</span><br><span class="line">alert(test.userName==test.tmpName);<span class="comment">//false</span></span><br><span class="line">alert(test.userName); <span class="comment">//jeff wong</span></span><br><span class="line">alert(test.tmpName); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p> 分析一下结果，其实这里的this和c#里的是类似的。<br>（4）、为脚本对象添加原形方法<br>理解这里的前提是你必须了解js里的原型概念（说道这里，kao，我还真的需要面壁一下）：js中对象的prototype属性，是用来返回对象类型原型的引用的。所有js内部对象都有只读的prototype属性，可以向其原型中动态添加功能(属性和方法)，<br>但该对象不能被赋予不同的原型。但是对于用户定义的对象可以被赋给新的原型。看个简单的示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js的内部对象String,向其原型中动态添加功能(属性和方法)</span></span><br><span class="line"><span class="comment">//去掉字符串两端的空白字符</span></span><br><span class="line"><span class="built_in">String</span>.prototype.Trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.replace(<span class="regexp">/(^\s+)|(\s+$)/g</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> tmpName = <span class="string">'jeff wong'</span>;</span><br><span class="line"><span class="keyword">this</span>.userName= <span class="string">'      jeff wong  '</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//给用户定义的对象添加原型方法</span></span><br><span class="line">thisTest.prototype.ToString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.userName); <span class="comment">//jeff wong(*有空格*)</span></span><br><span class="line">      alert(<span class="keyword">this</span>.userName.Trim()); <span class="comment">//jeff wong (*无空格*)</span></span><br><span class="line"><span class="comment">//alert(tmpName); //脚本错误,tmpName未定义</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test= <span class="keyword">new</span> thisTest();</span><br><span class="line">test.ToString(); <span class="comment">//调用原型的ToString()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">myTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName= <span class="string">'  test '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1=<span class="keyword">new</span> myTest();</span><br><span class="line"><span class="comment">//test1.ToString(); //这里暂时不支持调用ToString()方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户定义的对象被赋给新的原型</span></span><br><span class="line">myTest.prototype = <span class="keyword">new</span> thisTest();</span><br><span class="line">test1.ToString(); <span class="comment">//调用原型的ToString()</span></span><br></pre></td></tr></table></figure></p><p>测试结果显示，这里的this指代的是被添加原形（方法或属性）的类的实例，和（3）中的定义基本相似。<br>（5）、在函数的内部函数中使用this关键字<br>这个你要是理解作用域和闭包，问题就迎刃而解。看最典型的示例：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">thisTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName= <span class="string">'outer userName'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">innerThisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> userName=<span class="string">"inner userName"</span>;</span><br><span class="line">        alert(userName); <span class="comment">//inner userName</span></span><br><span class="line">        alert(<span class="keyword">this</span>.userName); <span class="comment">//outer userName</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">return</span> innerThisTest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">thisTest()();</span><br></pre></td></tr></table></figure></p><p>分析：thisTest()调用内部的innerThisTest函数，形成一个闭包。innerThisTest执行时，第一次弹出innerUserName，是因为innerThisTest函数作用域内有一个变量叫userName，所以直接弹出当前作用域下变量的指定值；第二次弹出outer  userName是因为innerThisTest作用域内没有userName属性（示例中的this.userName）,所以它向上一级作用域中找userName属性，这次在thisTest中找到（示例中的this.userName= ‘outer userName’;），所以弹出对应值。<br>（6）通过Function的call和apply函数指定特定的this<br>这个指定来指定去，this就有可能造成“你中有我，我中有你”的局面，不想把自己弄晕了的话，了解一下就可以了。改变this指定对象对于代码维护也是一件很不好的事情。贴出旧文中的示例代码结束吧：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">myFuncOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.p = <span class="string">"myFuncOne-"</span>;</span><br><span class="line"><span class="keyword">this</span>.A = <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.p + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">myFuncTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.p = <span class="string">"myFuncTwo-"</span>;</span><br><span class="line"><span class="keyword">this</span>.B = <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.p + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> myFuncOne();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> myFuncTwo();</span><br><span class="line">    obj1.A(<span class="string">"testA"</span>);                       <span class="comment">//显示myFuncOne-testA</span></span><br><span class="line">    obj2.B(<span class="string">"testB"</span>);                        <span class="comment">//显示myFuncTwo-testB</span></span><br><span class="line">    obj1.A.apply(obj2, [<span class="string">"testA"</span>]);          <span class="comment">//显示myFuncTwo-testA,其中[ testA”]是仅有一个元素的数组</span></span><br><span class="line">    obj2.B.apply(obj1, [<span class="string">"testB"</span>]);          <span class="comment">//显示myFuncOne-testB,其中[ testB”]是仅有一个元素的数组</span></span><br><span class="line">    obj1.A.call(obj2, <span class="string">"testA"</span>);             <span class="comment">//显示myFuncTwo-testA</span></span><br><span class="line">    obj2.B.call(obj1, <span class="string">"testB"</span>);             <span class="comment">//显示myFuncOne-testB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结：到这里，对于开篇中的span弹出undefined的问题你是不是已经豁然开朗？如果你还在懵懂中，给个可有可无的提示：当前的这个span元素有没有textValue属性啊！？<br>三、void<br>1、定义<br>javascript中void是一个操作符，该操作符指定要计算一个表达式但是不返回值。<br>2、语法<br>void 操作符用法格式如下：<br>    （1）. javascript:void (expression)<br>    （2）. javascript:void expression<br>注意：expression是一个要计算的js标准的表达式。表达式外侧的圆括号是可选的，但是写上去你可以一眼就知道括弧内的是一个表达式（这和typeof后面的表达式语法是一样的）。<br>3、实例代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="title">voidTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (alert(<span class="string">"it is a void test"</span>)); <span class="comment">//执行函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oTestNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">void</span> (oTestNum++); <span class="comment">//整数自加</span></span><br><span class="line">    alert(oTestNum);</span><br><span class="line"></span><br><span class="line">    oTestNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">void</span> (oTestNum += <span class="string">" void test"</span>); <span class="comment">//整数加字符串</span></span><br><span class="line">    alert(oTestNum);</span><br><span class="line">&#125;</span><br><span class="line">voidTest();</span><br></pre></td></tr></table></figure></p><p>4、在a元素下使用void(0)<br>（1）适用情况<br>在网页中，我们经常看到html里的a标签不需要它导航到某一个页面时，href属性设置的写法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span><span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span><span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：第一种“#”的写法（其实#可以是多个，通常都是1个），当a元素所在的链接在浏览器一屏以下时，会导致页面回滚到顶部；所以当我们需要a标签不导航到其他页面，不需要网页位置的回滚，都会采取void(0)那种写法。<br>（2）ie6下void(0)造成的诡异问题<br>这个问题网上有很多讨论，个人认为<a href="http://www.cnblogs.com/litao229/archive/2009/06/23/1509379.html" target="_blank" rel="noopener">“落叶满长沙”</a>总结的很有代表性，这里就不再赘述了。</p><p>本文摘自 <a href="http://www.cnblogs.com/reommmm/archive/2010/01/20/1652469.html" target="_blank" rel="noopener">javascript的self和this使用小结</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> this </tag><tag> self </tag></tags></entry><entry><title>事件处理程序</title><link href="/event-of-javascript.html"/><url>/event-of-javascript.html</url><content type="html"><![CDATA[<p>JavaScript和HTML的交互是通过事件实现的。JavaScript采用异步事件驱动编程模型，当文档、浏览器、元素或与之相关对象发生特定事情时，浏览器会产生事件。如果JavaScript关注特定类型事件，那么它可以注册当这类事件发生时要调用的句柄<br><a id="more"></a></p><pre><code>事件是某个行为或者触发，比如点击、鼠标移动当用户点击鼠标时当网页已加载时当图像已加载时当鼠标移动到元素上时当用户触发按键时...</code></pre><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件流描述的是从页面中接收事件的顺序，比如有两个嵌套的div，点击了内层的div，这时候是内层的div先触发click事件还是外层先触发？目前主要有三种模型</p><blockquote><ul><li>IE的事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的元素</li><li>Netscape的事件捕获：不太具体的节点更早接收事件，而最具体的元素最后接收事件，和事件冒泡相反</li><li>DOM事件流：DOM2级事件规定事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，<br>然后是实际目标接收事件，最后是冒泡阶段</li></ul></blockquote><p>这种分歧在日常生活中也很常见，举个例子，某个地方出了抢劫事件，我们有多种处理方式</p><pre><code>村里先发现，报告给乡里，乡里报告到县城，县城报告给市里市里先知道这事儿，然后交代给县城怎么处理，县城交给到乡里处理，乡里交给村里处理</code></pre><p>Opera、Firefox、Chrome、Safari都支持DOM事件流，IE不支持事件流，只支持事件冒泡</p><p>如有以下html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"Content-type"</span><span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Click Here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>点击div区域</p><table><thead><tr><th><img src="http://7xpvnv.com2.z0.glb.qiniucdn.com/4bc08396-78b0-48e3-a8bb-f846e86e9d73" alt></th><th><img src="http://7xpvnv.com2.z0.glb.qiniucdn.com/0faaa7bb-5dcf-4f3c-93ff-62b134d987dd" alt></th><th><img src="http://7xpvnv.com2.z0.glb.qiniucdn.com/8ddedb2e-f55e-4872-bd36-79c44b71d3f1" alt></th></tr></thead><tbody><tr><td>事件冒泡模型</td><td>事件捕获模型</td><td>DOM事件流</td></tr></tbody></table><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>我们也称之为事件侦听器（listener），事件就是用户或浏览器自身执行的某种动作。比如click、load、mouseover等，都是事件类型（俗称事件名称），而响应某个事件的方法就叫做事件处理程序或者事件监听器</p><p>也就是我们需要提前定义好某些事件发生了该怎么处理，这个过程叫做绑定事件处理程序，了解了这些，我们看看如何给元素添加事件处理程序<br>HTML内联方式</p><p>元素支持的每个事件都可以使用一个相应事件处理程序同名的HTML属性指定。这个属性的值应该是可以执行的JavaScript代码，我们可以为一个button添加click事件处理程序</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span><span class="keyword">type</span>="button" <span class="keyword">value</span>="Click Here" onclick="alert('Clicked!');" /&gt;</span><br></pre></td></tr></table></figure><p>在HTML事件处理程序中可以包含要执行的具体动作，也可以调用在页面其它地方定义的脚本,刚才的例子可以写成这样</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span><span class="keyword">type</span>="button" <span class="keyword">value</span>="Click Here" onclick="showMessage();" /&gt;</span><br></pre></td></tr></table></figure><p>在HTML中指定事件处理程序书写很方便，但是有两个缺点。</p><blockquote><ul><li>存在加载顺序问题，如果事件处理程序在html代码之后加载，用户可能在事件处理程序还未加载完成时就点击按钮之类的触发事件，存在时间差问题</li><li>这样书写html代码和JavaScript代码紧密耦合，维护不方便</li></ul></blockquote><h3 id="JavaScript指定事件处理程序"><a href="#JavaScript指定事件处理程序" class="headerlink" title="JavaScript指定事件处理程序"></a>JavaScript指定事件处理程序</h3><p>通过JavaScript指定事件处理程序就是把一个方法赋值给一个元素的事件处理程序属性。</p><p>每个元素都有自己的事件处理程序属性，这些属性名称通常为小写，如onclick等，将这些属性的值设置为一个函数，就可以指定事件处理程序，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"><span class="actionscript">    btnClick.onclick = <span class="function"><span class="keyword">function</span><span class="title">showMessage</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样处理，事件处理程序被认为是元素的方法，事件处理程序在元素的作用域下运行，this就是当前元素，所以点击button结果是：btnClick</p><p>这样还有一个好处，我们可以删除事件处理程序，只需把元素的onclick属性赋为null即可</p><h3 id="DOM2事件处理程序"><a href="#DOM2事件处理程序" class="headerlink" title="DOM2事件处理程序"></a>DOM2事件处理程序</h3><p>DOM2级事件定义了两个方法用于处理指定和删除事件处理程序的操作：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">addEventListener</span></span><br><span class="line"><span class="keyword">removeEventListener</span></span><br></pre></td></tr></table></figure></p><p>所有的DOM节点都包含这两个方法，并且它们都接受三个参数：</p><blockquote><ul><li>事件类型</li><li>事件处理方法</li><li>布尔参数，如果是true表示在捕获阶段调用事件处理程序，如果是false，则是在事件冒泡阶段处理</li></ul></blockquote><p>刚才的例子我们可以这样写<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"><span class="actionscript">    btnClick.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面代码为button添加了click事件的处理程序，在冒泡阶段触发，与上一种方法一样，这个程序也是在元素的作用域下运行，不过有一个好处，我们可以为click事件添加多个处理程序<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btnClick.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btnClick.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello!'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样两个事件处理程序会在用户点击button后按照添加顺序依次执行。</p><p>通过addEventListener添加的事件处理程序只能通过removeEventListener移除，移除时参数与添加的时候相同，这就意味着刚才我们添加的匿名函数无法移除，因为匿名函数虽然方法体一样，但是句柄却不相同，所以当我们有移除事件处理程序的时候可以这样写<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btnClick.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    btnClick.removeEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="IE兼容性"><a href="#IE兼容性" class="headerlink" title="IE兼容性"></a>IE兼容性</h2><p>下面就是老生常谈的IE兼容性问题了。。。</p><p>IE并不支持addEventListener和removeEventListener方法，而是实现了两个类似的方法<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">attachEvent</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">detachEvent</span></span><br></pre></td></tr></table></figure></p><p>这两个方法都接收两个相同的参数</p><blockquote><ul><li>事件处理程序名称</li><li>事件处理程序方法</li></ul></blockquote><p>由于IE指支持事件冒泡，所以添加的程序会被添加到冒泡阶段，使用attachEvent添加事件处理程序可以如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btnClick.attachEvent(<span class="string">'onclick'</span>, handler);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果是undefined，很奇怪，一会儿我们会介绍到</p><p>使用attachEvent添加的事件处理程序可以通过detachEvent移除，条件也是相同的参数，匿名函数不能被移除。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span><span class="attr">id</span>=<span class="string">"btnClick"</span><span class="attr">type</span>=<span class="string">"button"</span><span class="attr">value</span>=<span class="string">"Click Here"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btnClick.attachEvent(<span class="string">'onclick'</span>, handler);</span></span><br><span class="line"><span class="actionscript">    btnClick.detachEvent(<span class="string">'onclick'</span>, handler);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="跨浏览器的事件处理程序"><a href="#跨浏览器的事件处理程序" class="headerlink" title="跨浏览器的事件处理程序"></a>跨浏览器的事件处理程序</h2><p>前面内容我们可以看到，在不同的浏览器下，添加和移除事件处理程序方式不相同，要想写出跨浏览器的事件处理程序，首先我们要了解不同的浏览器下处理事件处理程序的区别</p><p>在添加事件处理程序事addEventListener和attachEvent主要有几个区别</p><blockquote><ul><li>参数个数不相同，这个最直观，addEventListener有三个参数，attachEvent只有两个，attachEvent添加的事件处理程序只能发生在冒泡阶段，addEventListener第三个参数可以决定添加的事件处理程序是在捕获阶段还是冒泡阶段处理（我们一般为了浏览器兼容性都设置为冒泡阶段）</li><li>第一个参数意义不同，addEventListener第一个参数是事件类型（比如click，load），而attachEvent第一个参数指明的是事件处理函数名称（onclick，onload）</li><li>事件处理程序的作用域不相同，addEventListener的作用域是元素本身，this是指的触发元素，而attachEvent事件处理程序会在全局变量内运行，this是window，所以刚才例子才会返回undefined，而不是元素id</li><li>为一个事件添加多个事件处理程序时，执行顺序不同，addEventListener添加会按照添加顺序执行，而attachEvent添加多个事件处理程序时顺序无规律(添加的方法少的时候大多是按添加顺序的反顺序执行的，但是添加的多了就无规律了)，所以添加多个的时候，不依赖执行顺序的还好，若是依赖于函数执行顺序，最好自己处理，不要指望浏览器</li></ul></blockquote><p>了解了这四点区别后我们可以尝试写一个浏览器兼容性比较好的添加事件处理程序方法</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addEvent(<span class="keyword">node</span><span class="title">, type</span>, handler) &#123;</span><br><span class="line">    if (!<span class="keyword">node</span><span class="title">) return</span><span class="literal">false</span>;</span><br><span class="line">    if (<span class="keyword">node</span>.<span class="title">addEventListener</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">addEventListener</span>(<span class="keyword">type</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (<span class="keyword">node</span>.<span class="title">attachEvent</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">attachEvent</span>('on' + <span class="keyword">type</span>, handler, );</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，首先我们解决了第一个问题参数个数不同，现在三个参数，采用事件冒泡阶段触发</p><p>第二个问题也得以解决，如果是IE，我们给type添加上on</p><p>第四个问题目前还没有解决方案，需要用户自己注意，一般情况下，大家也不会添加很多事件处理程序</p><p>试试这个方法感觉很不错，但是我们没有解决第三个问题，由于处理程序作用域不同，如果handler内有this之类操作，那么就会出错。在IE下，实际上大多数函数都会有this操作<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addEvent(<span class="keyword">node</span><span class="title">, type</span>, handler) &#123;</span><br><span class="line">    if (!<span class="keyword">node</span><span class="title">) return</span><span class="literal">false</span>;</span><br><span class="line">    if (<span class="keyword">node</span>.<span class="title">addEventListener</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">addEventListener</span>(<span class="keyword">type</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (<span class="keyword">node</span>.<span class="title">attachEvent</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">attachEvent</span>('on' + <span class="keyword">type</span>, function() &#123; handler.apply(<span class="keyword">node</span><span class="title">); &#125;);</span></span><br><span class="line"><span class="title">        return</span><span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样处理就可以解决this的问题了，但是新的问题又来了，我们这样等于添加了一个匿名的事件处理程序，无法用detachEvent取消事件处理程序，有很多解决方案，我们可以借鉴大师的处理方式，jQuery创始人John Resig是这样做的<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function addEvent(<span class="keyword">node</span><span class="title">, type</span>, handler) &#123;</span><br><span class="line">    if (!<span class="keyword">node</span><span class="title">) return</span><span class="literal">false</span>;</span><br><span class="line">    if (<span class="keyword">node</span>.<span class="title">addEventListener</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">addEventListener</span>(<span class="keyword">type</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (<span class="keyword">node</span>.<span class="title">attachEvent</span>) &#123;</span><br><span class="line"><span class="keyword">node</span><span class="title">['e</span>' + <span class="keyword">type</span> + handler] = handler;</span><br><span class="line"><span class="keyword">node</span><span class="title">[type</span> + handler] = function() &#123;</span><br><span class="line"><span class="keyword">node</span><span class="title">['e</span>' + <span class="keyword">type</span> + handler](window.event);</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">attachEvent</span>('on' + <span class="keyword">type</span>, <span class="keyword">node</span><span class="title">[type</span> + handler]);</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>在取消事件处理程序的时候</strong><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function removeEvent(<span class="keyword">node</span><span class="title">, type</span>, handler) &#123;</span><br><span class="line">    if (!<span class="keyword">node</span><span class="title">) return</span><span class="literal">false</span>;</span><br><span class="line">    if (<span class="keyword">node</span>.<span class="title">removeEventListener</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">removeEventListener</span>(<span class="keyword">type</span>, handler, <span class="literal">false</span>);</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (<span class="keyword">node</span>.<span class="title">detachEvent</span>) &#123;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">detachEvent</span>('on' + <span class="keyword">type</span>, <span class="keyword">node</span><span class="title">[type</span> + handler]);</span><br><span class="line"><span class="keyword">node</span><span class="title">[type</span> + handler] = null;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>John Resig很巧妙地利用了闭包，看起来很不错。</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在触发DOM上的某个事件的时候会产生一个事件对象event，这个对象包含着所有与事件有关的信息，包括产生事件的元素、事件类型等相关信息。所有浏览器都支持event对象，但支持方式不同。</p><h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><p>兼容DOM的浏览器会产生一个event对象传入事件处理程序中。应用一下刚才我们写的addEvent方法<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var btnClick = document.get<span class="constructor">ElementById('<span class="params">btnClick</span>')</span>;</span><br><span class="line">  add<span class="constructor">Event(<span class="params">btnClick</span>, '<span class="params">click</span>', <span class="params">handler</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>点击button的时候我们可以看到弹出内容是click的弹窗</p><p>event对象包含与创建它的特定事件有关的属性和方法，触发事件的类型不同，可用的属性和方法也不同，但是所有事件都会包含</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>bubbles</td><td>Boolean</td><td>只读</td><td>事件是否冒泡</td></tr><tr><td>cancelable</td><td>Boolean</td><td>只读</td><td>是否可以取消事件的默认行为</td></tr><tr><td>currentTarget</td><td>Element</td><td>只读</td><td>事件处理程序当前处理元素</td></tr><tr><td>detail</td><td>Integer</td><td>只读</td><td>与事件相关细节信息</td></tr><tr><td>eventPhase</td><td>Integer</td><td>只读</td><td>事件处理程序阶段：1 捕获阶段，2 处于目标阶段，3 冒泡阶段</td></tr><tr><td>preventDefault()</td><td>Function</td><td>只读</td><td>取消事件默认行为</td></tr><tr><td>stopPropagation()</td><td>Function</td><td>只读</td><td>取消事件进一步捕获或冒泡</td></tr><tr><td>target</td><td>Element</td><td>只读</td><td>事件的目标元素</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件类型</td></tr><tr><td>view</td><td>AbstractView</td><td>只读</td><td>与事件关联的抽象视图，等同于发生事件的window对象</td></tr></tbody></table><p>在事件处理程序内部，this始终等同于currentTarget，而target是事件的实际目标。</p><p>要阻止事件的默认行为，可以使用preventDefault()方法，前提是cancelable值为true，比如我们可以阻止链接导航这一默认行为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>stopPropagation()方法可以停止事件在DOM层次的传播，即取消进一步的事件捕获或冒泡。我们可以在button的事件处理程序中调用stopPropagation()从而避免注册在body上的事件发生<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(e.type);</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">'Clicked body'</span>)&#125;);</span><br><span class="line"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span><br><span class="line">addEvent(btnClick, <span class="string">'click'</span>, handler);</span><br></pre></td></tr></table></figure></p><p>若是注释掉e.stopPropagation(); 在点击button的时候，由于事件冒泡，body的click事件也会触发，但是调用这句后，事件会停止传播<br>IE中的事件对象</p><p>访问IE中的event对象有几种不同的方式，取决于指定事件处理程序的方法。直接为DOM元素添加事件处理程序时，event对象作为window对象的一个属性存在<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">window</span>.event;</span><br><span class="line">    alert(e.type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span><br><span class="line">btnClick.onclick = handler;</span><br></pre></td></tr></table></figure></p><p>我们通过window.event取得了event对象，并检测到了其类型，可是如果事件处理程序是通过attachEvent添加的，那么就会有一个event对象被传入事件处理程序中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(e.type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btnClick = <span class="built_in">document</span>.getElementById(<span class="string">'btnClick'</span>);</span><br><span class="line">attachEvent(btnClick, handler);</span><br></pre></td></tr></table></figure></p><p>当然这时候也可以通过window对象访问event，方便起见，我们一般会传入event对象，IE中所有的事件都包含以下属性方法</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>读/写</th><th>说明</th></tr></thead><tbody><tr><td>cancelBubble</td><td>Boolean</td><td>读/写</td><td>默认为false，设置为true后可以取消事件冒泡</td></tr><tr><td>returnValue</td><td>Boolean</td><td>读/写</td><td>默认为true，设为false可以取消事件默认行为</td></tr><tr><td>srcElement</td><td>Element</td><td>只读</td><td>事件的目标元素</td></tr><tr><td>type</td><td>String  只读</td><td>被触发的事件类型</td></tr></tbody></table><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><p>虽然DOM和IE的event对象不同，但基于它们的相似性，我们还是可以写出跨浏览器的事件对象方案<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="title">getEvent</span>(e) &#123;</span><br><span class="line"><span class="keyword">return</span><span class="type">e</span> || window.event;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span><span class="title">getTarget</span>(e) &#123;</span><br><span class="line"><span class="keyword">return</span><span class="type">e.target</span> || e.scrElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span><span class="title">preventDefault</span>(e) &#123;</span><br><span class="line">    if (e.preventDefault)</span><br><span class="line">        e.preventDefault();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        e.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span><span class="title">stopPropagation</span>(e) &#123;</span><br><span class="line">    if (e.stopPropagation)</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常用HTML事件"><a href="#常用HTML事件" class="headerlink" title="常用HTML事件"></a>常用HTML事件</h3><p>有一些HTML事件我们会经常用到，这些事件不一定与用户操作有关，这里只是简单提及，详细用法大家就得百度谷歌了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span>：当页面完全加载后在<span class="keyword">window</span>上触发，当图像加载完成后在img元素上触发，或当嵌入内容加载完成时，在<span class="keyword">object</span>元素上触发</span><br><span class="line"></span><br><span class="line">unload：页面完全卸载后在<span class="keyword">window</span>上触发，或嵌入内容卸载后在<span class="keyword">object</span>元素触发</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>：用户选择文本框中的字符时触发</span><br><span class="line"></span><br><span class="line"><span class="keyword">change</span>：文本框焦点变化后其值改变时触发</span><br><span class="line"></span><br><span class="line">submit：用户提交表单的时候触发</span><br><span class="line"></span><br><span class="line"><span class="keyword">resize</span>：窗口或框架大小变化的时候在<span class="keyword">window</span>上触发</span><br><span class="line"></span><br><span class="line"><span class="keyword">scroll</span>：用户滚动带滚动条的元素时，在该元素上触发</span><br><span class="line"></span><br><span class="line">focus：页面或元素获得焦点时在<span class="keyword">window</span>及相应元素上触发</span><br><span class="line"></span><br><span class="line">blur：页面或元素失去焦点时在<span class="keyword">window</span>及相应元素上触发</span><br><span class="line"></span><br><span class="line">beforeunload：页面卸载前在<span class="keyword">window</span>上触发</span><br><span class="line"></span><br><span class="line">mousewheel：不算HTML的，当用户通过鼠标滚轮与页面交互，在垂直方向滚动页面时触发</span><br></pre></td></tr></table></figure></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> DOM </tag><tag> 事件 </tag></tags></entry><entry><title>【转】REM和EM</title><link href="/REM-vs-EM.html"/><url>/REM-vs-EM.html</url><content type="html"><![CDATA[<p>网页字体排版的最佳实践之一就是使用相对单位，如rem和em.</p><p>问题是，你应该使用哪一个呢?一直以来，rem支持者和em支持者之间都存在着争辩，认为应该使用自己支持的那个。<br><a id="more"></a><br>在这篇文章中，你会找到我如何在rem和em之间做抉择.你也将了解rem和em到底是什么以及如何使用它们来构建模块化组件。</p><h2 id="什么是EM？"><a href="#什么是EM？" class="headerlink" title="什么是EM？"></a>什么是EM？</h2><blockquote><p>EM 是字体排印的一个单位，等同于当前指定的point-size。-维基百科</p></blockquote><p>此语句在网页上并不能说得过去，因为我们不使用point-size.如果我们用point-size取代font-size的话，这句话就完全行得通。</p><p><strong>意思就是，如果存在一个选择器的font-size属性的值为 20px,那么1em=20px</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span> &#125; <span class="comment">/* 1em = 20px */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125; <span class="comment">/* 1em = 16px */</span></span><br></pre></td></tr></table></figure></p><p> 值，但这种情况的发生，纯粹是因为继承。**</p><p>em单位可以被用来声明字体的大小。实际上，最佳做法是使用相对单位，如用em指定font-size。</p><p>考虑如下代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">2em</span> &#125;</span><br></pre></td></tr></table></figure></p><p>这里h1选择器的真正大小是多少呢？</p><p>我们要根据<code>&lt;h1&gt;</code>的父元素来计算font-size。它的父元素是<code>&lt;html&gt;</code>,并且它的font-size被设置为16px。</p><p>通过这种方式，我们可以计算出h1的值为32px,或者说2 * 16px.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span> &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">2em</span> &#125; <span class="comment">/* 16px * 2 = 32px */</span></span><br></pre></td></tr></table></figure></p><p>虽然也可以实现，但是这并不被认为是一个好主意，通过在<code>&lt;html&gt;</code>中设置font-size的像素值将影响用户浏览器所设置的值。</p><p>取而代之，你可以使用percentage值，或者完全摒弃font-size。</p><p>注意:如果你完全摒弃font-size,它的值将被默认为100%.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">100%</span> &#125; <span class="comment">/*这里的意思是默认值为16px*/</span></span><br></pre></td></tr></table></figure></p><p>对于大多数的用户(和浏览器)，font-size的值为100%，就会默认为16px，除非用户通过浏览器设置来改变font-size的默认值。但是很少有人这么做。</p><p>好了，让我们回到em。</p><p>em也可以用来指定除了font-size的其它属性值。margin和padding属性也经常用em设置大小。</p><p>这里是很多人开始对em的值产生困惑的地方。</p><p>考虑下面的代码。<code>&lt;h1&gt;</code>和<code>&lt;p&gt;</code>元素的margin-bottom的值应该是多少？(假设<code>&lt;html&gt;</code>的font-size被设置为100%).<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">2em</span>; <span class="comment">/* 1em = 16px */</span></span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1em</span>; <span class="comment">/* 1em = 32px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1em</span>; <span class="comment">/* 1em = 16px */</span></span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1em</span>; <span class="comment">/* 1em = 16px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你是不是很吃惊两种状况下的margin-bottom的1em值不同？</p><p>这种现象的发生在于1em等同于它当前的font-size。因为<code>&lt;h1&gt;</code>中的font-size被设置为了2em。其他用在<code>&lt;h1&gt;</code>内的em来计算的属性，就为1em = 32px。</p><p>在不同的代码中，1em就会有不同的取值，这就是经常迷惑人们的地方。如果你也是刚刚接触em，你也会产生迷惑。</p><p>不管怎么说，这就是em.接下来，让我们认识rem。</p><h2 id="什么是REM？"><a href="#什么是REM？" class="headerlink" title="什么是REM？"></a>什么是REM？</h2><blockquote><p><strong>rem指根em。它的产生是为了帮助人们解决em所带来的计算问题。</strong></p></blockquote><blockquote><p><strong>它是字体排版的一个单位，等同于根font-size。这意味着1rem等同于<code>&lt;html&gt;</code>中的font-size。</strong></p></blockquote><p>考虑相同的用rem表示的代码。现在margin-bottom计算出来的值为多少呢？<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1rem</span>; <span class="comment">/* 1rem = 16px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">1rem</span>; <span class="comment">/* 1rem = 16px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正如您看到的，无论您在哪里设置它，1rem的取值均为16px。</p><p>这是十分可靠的，很容易去理解。</p><p>这就是rem。一旦你知道了什么是em，就很容易去理解，你是不是也同意这个观点？</p><p>现在让我们步入这篇文章的正题，rem 还是 em?</p><h2 id="REMs-or-EMs"><a href="#REMs-or-EMs" class="headerlink" title="REMs or EMs?"></a>REMs or EMs?</h2><p>这是极具争议的问题。</p><p><strong>一些开发人员完全避免使用rem,声称使用rem会使他们的组件缺少模块化。另外一些人则什么都使用rem,因为喜欢rem所带来的便捷。</strong></p><p>奇怪的是，在我的职业生涯中，我掉进了在不同的地方是使用rem或者em的陷阱中。我喜欢em帮助我完成模块化组件，但是讨厌它所带来的代码复杂性。我喜欢rem计算的便捷，但是讨厌他是我模块化组件的阻碍。</p><p>事实证明。rem 和 em 均有各自的优缺点。应给根据实际情况来判断其使用方式。</p><p>这里我有两个简单的规则：</p><ul><li>如果这个属性根据它的font-size进行测量，则使用em(当有属性需要用它的字体大小(font-size)进行大小声明时，这时em就相当有用。)</li><li>其他的一切事物均使用rem.</li></ul><blockquote><p><strong>有一个比较普遍的误解，认为 em 单位是相对于父元素的字体大小。 事实上，根据W3标准 ，它们是相对于使用em单位的元素的字体大小。父元素的字体大小可以影响 em</strong><br><em>(默认情况下浏览器通常有字体大小 16px，但这可以被用户更改为从 9px 到 72px的任何值。)</em></p></blockquote><hr><blockquote><ul><li>根 html 元素将继承浏览器中设置的字体大小，除非显式设置固定值去覆盖。</li><li>所以 html 元素的字体大小虽然是直接确定 rem 值，但字体大小可能首先来自浏览器设置。</li><li>因此浏览器的字体大小设置可以影响每个使用 rem 单元以及每个通过 em 单位继承的值。</li></ul></blockquote><hr><blockquote><ul><li>rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位。</li><li>em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小，除非显式重写与一个具体单位。</li></ul></blockquote><blockquote><ul><li>rem 和 em 单位是由浏览器基于你的设计中的字体大小计算得到的像素值。</li><li>em 单位基于使用他们的元素的字体大小。</li><li>rem 单位基于 html 元素的字体大小。</li><li>em 单位可能受任何继承的父元素字体大小影响</li><li>rem 单位可以从浏览器字体设置中继承字体大小。</li><li>使用 em 单位应根据组件的字体大小而不是根元素的字体大小。</li><li>在不需要使用em单位，并且需要根据浏览器的字体大小设置缩放的情况下使用rem。</li><li>使用rem单位，除非你确定你需要 em 单位，包括对字体大小。</li><li>媒体查询中使用 rem 单位</li><li>不要在多列布局中使用 em 或 rem ,改用%。</li><li>不要使用 em 或 rem，如果缩放会不可避免地导致要打破布局元素。</li><li>更多区别及配合使用请看原文实例。</li></ul></blockquote><hr><blockquote><p><a href="http://www.w3cplus.com/css/rem-vs-em.html" target="_blank" rel="noopener">本文参考自这里</a></p></blockquote><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><blockquote><p><a href="http://www.w3cplus.com/css/when-to-use-em-vs-rem.html" target="_blank" rel="noopener">何时使用 Em 与 Rem</a></p></blockquote>]]></content><categories><category> 前端 </category></categories><tags><tag> css </tag><tag> rem </tag><tag> em </tag></tags></entry><entry><title>【转】jQuery之.extend()方法使用</title><link href="/jquery-extend-use.html"/><url>/jquery-extend-use.html</url><content type="html"><![CDATA[<p>jQuery 的 API 手册中，extend 方法挂载在 jQuery 和 jQuery.fn 两个不同的对象上，但在 jQuery 内部代码实现的是相同的，只是功能各不相同。</p><a id="more"></a><p>先看看官方给出的解释：</p><blockquote><ul><li>jQuery.extend Merge the contents of two or more objects together into the first object. 把两个或者多个对象合并到第一个对象当中；</li><li>jQuery.fn.extend Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. 把对象挂载到 jQuery 的 prototype 上以扩展一个新的 jQuery 实例方法 。</li></ul></blockquote><p>虽然官方对 jQuery.extend 的扩展方法功能只字未提，但是它也同样具有扩展 jQuery 类方法 的功能。</p><ol><li>合并对象</li></ol><p>首先，我先来介绍一下 extend 函数在 合并对象 方面的用法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend(target [, object1] [, objectN])</span><br></pre></td></tr></table></figure></p><p>合并 object1 … objectN 到 target 对象，如果只有一个参数，则该 target 对象会被合并到 jQuery 对象中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'Jerry'</span>,</span><br><span class="line">    sex: <span class="string">'boy'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.extend(obj1, obj2); <span class="comment">// &#123;name: "Jerry", age: 21, sex: "boy"&#125;</span></span><br><span class="line"></span><br><span class="line">obj1 <span class="comment">// &#123;name: "Jerry", age: 21, sex: "boy"&#125;</span></span><br><span class="line">obj2 <span class="comment">// &#123;name: "Jerry", sex: "boy"&#125;</span></span><br></pre></td></tr></table></figure></p><p>上述代码展示的是将 obj2 对象合并到 obj1 对象中，这种方法会 改变 obj1 对象的结构。如果你 不想改变 合并目标对象的结构，你可以这么做。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'Jerry'</span>,</span><br><span class="line">    sex: <span class="string">'boy'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.extend(&#123;&#125;, obj1, obj2); <span class="comment">// &#123; name: "Jerry", age: 21, sex: "boy" &#125;</span></span><br><span class="line"></span><br><span class="line">obj1 <span class="comment">// &#123; name: "Tom", age: 21 &#125;</span></span><br><span class="line">obj2 <span class="comment">// &#123; name: "Jerry", sex: "boy" &#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>深浅拷贝</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend([deep], target, object1 [, objectN])</span><br></pre></td></tr></table></figure><p>和上面的讲述的不同的是，该方法多了一个类型为 boolean 的 [deep] 传参，当其为 true 时，将 object1 , objectN 深度复制 后合并到 target 中。</p><p>首先，我们理解一下什么叫做 深度复制 。看看其和 浅度复制 有什么区别。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    location: &#123;</span><br><span class="line">        city: <span class="string">"Boston"</span>,</span><br><span class="line">        county: <span class="string">"USA"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    last: <span class="string">"Resig"</span>,</span><br><span class="line">    location: &#123;</span><br><span class="line">        state: <span class="string">"MA"</span>,</span><br><span class="line">        county: <span class="string">"China"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.extend(<span class="literal">false</span>, &#123;&#125;, obj1, obj2); <span class="comment">// &#123; name: "John", last: "Resig", location: &#123; state: "MA", county: "China" &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">$.extend(<span class="literal">true</span>, &#123;&#125;, obj1, obj2); <span class="comment">// &#123; name: "John", last: "Resig", location: &#123; city: "Boston", state: "MA", county: "China" &#125;&#125;</span></span><br></pre></td></tr></table></figure></p><p>由此可见，执行 深度复制 会递归遍历每个对象中含有复杂对象（如：数组、函数、json对象等）的属性值进行复制，而且 浅度复制 便不会这么做。</p><ol start="3"><li>方法扩展</li></ol><p>上述的 extend 方法中的 target 参数是可以省略的。如果省略了，则该方法就只能传入一个 object 参数，该方法功能是将该 object 合并到调用 extend 方法的对象中。</p><p>我们通常会使用这种方式来对 jQuer进行一些方法上的扩展。</p><p>jQurey 提供了两种方法扩张方式，分别为jQuery.fn.extend(object)和jQuery.extend(object).</p><p>想要搞清楚两种扩展方式之间的区别的话，先要了解什么是jQuery.fn.</p><p>本猿参考了 jQuery 的源码，发现其中玄机：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;　　　</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>jQuery.fn = jQuery.prototype这句代码明确指出jQuery.fn指代的就是 jQuery 的原型。</p><p>其次，我们要引入两个概念 类方法 和 实例方法 。</p><ul><li>类方法 是直接可以使用类引用，不需要实例化就可以使用的方法。一般在项目中 类方法 都是被设置为工具类使用；</li><li>实例方法 必须先创建实例，然后才能通过实例调用该 实例方法 。<br> jQuery可以看做是这个封装得非常好的类，而我们可以使用jQuery选择器来创建 jQuery 的实例。比如：使 id 选择器$(‘#btn’)来创建一个实例。</li></ul><ol start="4"><li>区别</li></ol><p>jQuery.extend(object)相当于对 类方法 的扩展。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend(&#123;</span><br><span class="line"><span class="comment">/* 返回两个元素中较小的值 */</span></span><br><span class="line">    min: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">/* 返回两个元素中较大的值 */</span></span><br><span class="line">    max: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">jQuery.min(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 2</span></span><br><span class="line">jQuery.max(<span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>jQuery.fn.extend(object)是对jQuery.prototype上的扩展。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend = jQuery.prototype.extend</span><br></pre></td></tr></table></figure></p><p>这种方式相当对 实例方法 的扩展。</p><h4 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h4><p>开发一个简单的小功能，使用该方法可以使选定元素内的文字变红。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">    setRed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.tip'</span>).setRed();</span><br></pre></td></tr></table></figure></p><p><code>$(&quot;.tip&quot;)</code>创建了一个jQuery实例，通过它可以调用成员方法setRed.</p><p>上述代码可以实现预想的扩展，但最好返回this 以满足 jQuery 链式操作 的需要。</p><p>改良之后，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">    red: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> $(<span class="keyword">this</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>本文摘自：<a href="https://segmentfault.com/a/1190000004082170" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004082170</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> jquery </tag></tags></entry><entry><title>javascript正则表达式</title><link href="/javascript-regexp-note.html"/><url>/javascript-regexp-note.html</url><content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/rubylouvre/archive/2010/03/09/1681222.html" target="_blank" rel="noopener">转载地址</a></p><p>网上正则表达式的教程够多了，但由于javascript的历史比较悠久，也比较古老，因此有许多特性是不支持的。我们先从最简单地说起，文章所演示的正则基本都是perl方式。</p><a id="more"></a><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>( [ { \ ^ $ | ) ? * + .</p><h2 id="预定义的特殊字符"><a href="#预定义的特殊字符" class="headerlink" title="预定义的特殊字符"></a>预定义的特殊字符</h2><table><thead><tr><th>字符</th><th>正则</th><th>描述</th></tr></thead><tbody><tr><td>\t</td><td>/\t/</td><td>制表符</td></tr><tr><td>\n</td><td>/\n/</td><td>制表符</td></tr><tr><td>\r</td><td>/\r/</td><td>回车符</td></tr><tr><td>\f</td><td>/\f/</td><td>换页符</td></tr><tr><td>\a</td><td>/\a/</td><td>alert字符</td></tr><tr><td>\e</td><td>/\e/</td><td>escape字符</td></tr><tr><td>\cX</td><td>/\cX/</td><td>与X相对应的控制字符</td></tr><tr><td>\b</td><td>/\b/</td><td>与回退字符</td></tr><tr><td>\v</td><td>/\v/</td><td>垂直制表符</td></tr><tr><td>\0</td><td>/\0/</td><td>空字符</td></tr></tbody></table><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>简单类</p><p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[]这个整体对应一个字符。如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="regexp">/ruby/</span>.test(<span class="string">"ruby"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(<span class="string">"a"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(<span class="string">"b"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(<span class="string">"c"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="string">"a bat ,a Cat,a fAt bat ,a faT cat"</span>.match(<span class="regexp">/[bcf]at/gi</span>));<span class="comment">//bat,Cat,fAt,bat,faT,cat</span></span><br></pre></td></tr></table></figure></p><p>使用方括号 [ ] 包含一系列字符，能够匹配其中任意一个字符。用 [^ ] 包含一系列字符，则能够匹配其中字符之外的任意一个字符。</p><p>负向类</p><p>也是在那个括号里做文章，前面加个元字符进行取反，表示匹配不能为括号里面的字符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(<span class="string">"a"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(<span class="string">"b"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(<span class="string">"6"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(<span class="string">"gg"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>范围类</p><p>还是在那个中括号里面做文章。有时匹配的东西过多，而且类型又相同，全部输入太麻烦，我们可以用它。特征就是在中间加了个横线。</p><p>组合类</p><p>还是在那个中括号里面做文章。允许用中括号匹配不同类型的单个字符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="regexp">/[a-f]/</span>.test(<span class="string">"b"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[a-f]/</span>.test(<span class="string">"k"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/[a-z]/</span>.test(<span class="string">"h"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[A-Z]/</span>.test(<span class="string">"gg"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/[^H-Y]/</span>.test(<span class="string">"G"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[0-9]/</span>.test(<span class="string">"8"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[^7-9]/</span>.test(<span class="string">"6"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(<span class="string">"a"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(<span class="string">"3"</span>))<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"\n\</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(a))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(<span class="string">"r"</span>))<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>预定义类</p><p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。<br>| 字符  | 等同于              | 描述             |<br>|—–|——————|—————-|<br>| .   | [^\n\r]          | 除了换行和回车之外的任意字符 |<br>| \d  | [0-9]            | 数字字符           |<br>| \D  | [^0-9]           | 非数字字符          |<br>| \s  | [ \t\n\x0B\f\r]  | 空白字符           |<br>| \S  | [^ \t\n\x0B\f\r] | 非空白字符          |<br>| \w  | [a-zA-Z_0-9]     | 单词字符(所有的字母)    |<br>| \W  | [^a-zA-Z_0-9]    | 非单词字符          |</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="regexp">/\d/</span>.test(<span class="string">"3"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/\d/</span>.test(<span class="string">"w"</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/\D/</span>.test(<span class="string">"w"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/\w/</span>.test(<span class="string">"w"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/\w/</span>.test(<span class="string">"司"</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/\W/</span>.test(<span class="string">"徒"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/\s/</span>.test(<span class="string">" "</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/\S/</span>.test(<span class="string">" "</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/\S/</span>.test(<span class="string">"正"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/./</span>.test(<span class="string">"美"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/./</span>.test(<span class="string">"  "</span>))<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"\n\</span></span><br><span class="line"><span class="string">      "</span></span><br><span class="line">alert(<span class="regexp">/./</span>.test(a))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>由于元字符与特殊字符或字符类或者它们的组合（中括号）甚至它们的马甲（预定义类）都是一对一进行匹配。我们要匹配“司徒正美这个词”，最简单都要/…./，如果长到50多个字符岂不是要死人。因此我们逼切需要一个简单的操作，来处理这数量关系。</p><p>简单量词<br>| 代码    | 类型   | 描述            |         |<br>|——-|——|—————|———|<br>| ?     | 软性量词 |               | 出现零次或一次 |<br>| *     | 软性量词 | 出现零次或多次(任意次)  |         |<br>| +     | 软性量词 | 出现一次或多次（至道一次） |         |<br>| {n}   | 硬性量词 | 对应零次或者n次      |         |<br>| {n,m} | 软性量词 | 至少出现n次但不超过m次  |         |<br>| {n,}  | 软性量词 | 至少出现n次(+的升级版) |         |</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="regexp">/..../</span>.test(<span class="string">"司徒正美"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/司徒正美/</span>.test(<span class="string">"司徒正美"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[\u4e00-\u9fa5]&#123;4&#125;/</span>.test(<span class="string">"司徒正美"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[\u4e00-\u9fa5]&#123;4&#125;/</span>.test(<span class="string">"司徒正美55"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.test(<span class="string">"正则表达式"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.test(<span class="string">"正则表达式&amp;*@@"</span>))<span class="comment">//false</span></span><br><span class="line">alert(<span class="regexp">/\d&#123;6&#125;/</span>.test(<span class="string">"123456"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(<span class="string">"rr"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(<span class="string">"ru"</span>))<span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(<span class="string">"ry"</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>/[\u4e00-\u9fa5]/用于匹配单个汉字。</p><p><strong>贪婪量词</strong>，惰性量词与支配性量词</p><p>贪婪量词，上面提到的所有简单量词。就像成语中说的巴蛇吞象那样，一口吞下整个字符串，发现吞不下（匹配不了），再从后面一点点吐出来（去掉最后一个字符，再看这时这个整个字符串是否匹配，不断这样重复直到长度为零）</p><p>隋性量词，在简单量词后加问号。由于太懒了，先吃了前面第一个字符，如果不饱再捏起多添加一个（发现不匹配，就读下第二个，与最初的组成一个有两个字符串的字符串再尝试匹配，如果再不匹配，再吃一个组成拥有三个字符的字符串……）。其工作方式与贪婪量词相反。</p><p>支配性量词，在简单量词后加加号。上面两种都有个不断尝试的过程，而支配性量词却只尝试一次，不合口味就算了。就像一个出身高贵居支配地位的公主。但你也可以说它是最懒量词。由于javascript不支持，所以它连出场的机会也没有了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/.*bbb/g</span>;<span class="comment">//贪婪</span></span><br><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/.*?bbb/g</span>;<span class="comment">//惰性</span></span><br><span class="line"><span class="comment">//  var re3 = /.*+bbb/g;//支配性,javascript不支持，IE与所有最新的标准浏览器都报错</span></span><br><span class="line">alert(re1.test(<span class="string">"abbbaabbbaaabbbb1234"</span>)+<span class="string">""</span>);<span class="comment">//true</span></span><br><span class="line">alert(re1.exec(<span class="string">"abbbaabbbaaabbbb1234"</span>)+<span class="string">""</span>);<span class="comment">//null</span></span><br><span class="line">alert(<span class="string">"abbbaabbbaaabbbb1234"</span>.match(re1)+<span class="string">""</span>);<span class="comment">//abbbaabbbaaabbbb</span></span><br><span class="line"></span><br><span class="line">alert(re2.test(<span class="string">"abbbaabbbaaabbbb1234"</span>)+<span class="string">""</span>);<span class="comment">//true</span></span><br><span class="line">alert(re2.exec(<span class="string">"abbbaabbbaaabbbb1234"</span>)+<span class="string">""</span>);<span class="comment">//aabbb</span></span><br><span class="line">alert(<span class="string">"abbbaabbbaaabbbb1234"</span>.match(re2)+<span class="string">""</span>);<span class="comment">//abbb,aabbb,aaabbb</span></span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>到目前为止，我们只能一个字符de匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，中括号表示范围内选择，大括号表示重复次数。小括号允许我们重复多个字符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分组+量词</span></span><br><span class="line">alert(<span class="regexp">/(dog)&#123;2&#125;/</span>.test(<span class="string">"dogdog"</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//分组+范围</span></span><br><span class="line">alert(<span class="string">"baddad"</span>.match(<span class="regexp">/([bd]ad?)*/</span>))<span class="comment">//baddad,dad</span></span><br><span class="line"><span class="comment">//分组+分组</span></span><br><span class="line">alert(<span class="string">"mon and dad"</span>.match(<span class="regexp">/(mon( and dad)?)/</span>))<span class="comment">//mon and dad,mon and dad, and dad</span></span><br></pre></td></tr></table></figure></p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>反向引用标识由正则表达式中的匹配组捕获的子字符串。每个反向引用都由一个编号或名称来标识，并通过“\编号”表示法进行引用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#990000"</span>;</span><br><span class="line">/#(\d+)/.test(color);</span><br><span class="line">alert(<span class="built_in">RegExp</span>.$<span class="number">1</span>);<span class="comment">//990000</span></span><br><span class="line"></span><br><span class="line">alert(<span class="regexp">/(dog)\1/</span>.test(<span class="string">"dogdog"</span>))<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">"1234 5678"</span>;</span><br><span class="line"><span class="keyword">var</span> newNum = num.replace(<span class="regexp">/(\d&#123;4&#125;) (\d&#123;4&#125;)/</span>,<span class="string">"$2 $1"</span>);</span><br><span class="line">alert(newNum)</span><br></pre></td></tr></table></figure></p><h2 id="候选"><a href="#候选" class="headerlink" title="候选"></a>候选</h2><p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(red|black|yellow)!!/</span>;</span><br><span class="line">alert(reg.test(<span class="string">"red!!"</span>))<span class="comment">//true</span></span><br><span class="line">alert(reg.test(<span class="string">"black!!"</span>))<span class="comment">//true</span></span><br><span class="line">alert(reg.test(<span class="string">"yellow!!"</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h2 id="非捕获性分组"><a href="#非捕获性分组" class="headerlink" title="非捕获性分组"></a>非捕获性分组</h2><p>并不是所有分组都能创建反向引用，有一种特别的分组称之为非捕获性分组，它是不会创建反向引用。反之，就是捕获性分组。要创建一个非捕获性分组，只要在分组的左括号的后面紧跟一个问号与冒号就行了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"#990000"</span>;</span><br><span class="line">/#(?:\d+)/.test(color);</span><br><span class="line">alert(<span class="built_in">RegExp</span>.$<span class="number">1</span>);<span class="comment">//""</span></span><br></pre></td></tr></table></figure></p><p>题目，移除所有标签，只留下innerText!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;p&gt;&lt;a href='http://www.cnblogs.com/rubylouvre/'&gt;Ruby Louvre&lt;/a&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> text = html.replace(<span class="regexp">/&lt;(?:.|\s)*?&gt;/g</span>, <span class="string">""</span>);</span><br><span class="line">alert(text)</span><br></pre></td></tr></table></figure></p><p>注意：javascript不存在命名分组<br><strong>前瞻</strong></p><p>继续在分组内做文章。前瞻与后瞻其实都属于零宽断言，但javascript不支持后瞻。</p><p><em>零宽断言</em><br>| 正则       | 名称   | 描述              |<br>|———-|——|—————–|<br>| (?=exp)  | 正向前瞻 | 匹配exp前面的位置      |<br>| (?!exp)  | 负向前瞻 | 匹配后面不是exp的位置    |<br>| (?&lt;=exp) | 正向后瞻 | 匹配exp后面的位置不支持   |<br>| (?&lt;!exp) | 负向后瞻 | 匹配前面不是exp的位置不支持 |</p><p>正向前瞻用来检查接下来的出现的是不是某个特定的字符集。而负向前瞻则是检查接下来的不应该出现的特定字符串集。零宽断言是不会被捕获的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"bedroom"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"bedding"</span>;</span><br><span class="line"><span class="keyword">var</span> reBed = <span class="regexp">/(bed(?=room))/</span><span class="comment">//在我们捕获bed这个字符串时，抢先去看接下来的字符串是不是room</span></span><br><span class="line">alert(reBed.test(str1));<span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">RegExp</span>.$<span class="number">1</span>)<span class="comment">//bed</span></span><br><span class="line">alert(<span class="built_in">RegExp</span>.$<span class="number">2</span> === <span class="string">""</span>)<span class="comment">//true</span></span><br><span class="line">alert(reBed.test(str2))<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"bedroom"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"bedding"</span>;</span><br><span class="line"><span class="keyword">var</span> reBed = <span class="regexp">/(bed(?!room))/</span><span class="comment">//要来它后面不能是room</span></span><br><span class="line">alert(reBed.test(str1))<span class="comment">//false</span></span><br><span class="line">alert(reBed.test(str2))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>题目，移除hr以外的所有标签，只留下innerText!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;p&gt;&lt;a href='http://www.cnblogs.com/rubylouvre/'&gt;Ruby Louvre&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">var</span> text = html.replace(<span class="regexp">/&lt;(?!hr)(?:.|\s)*?&gt;/ig</span>,<span class="string">""</span>)</span><br><span class="line">alert(text)<span class="comment">//Ruby Louvre&lt;hr/&gt;by 司徒正美</span></span><br></pre></td></tr></table></figure></p><p><strong>边界</strong></p><p>一个要与字符类合用的东西。<br>| 正则  | 名称    | 描述                 |<br>|—–|——-|——————–|<br>| ^   | 开头    | 注意不能紧跟于左中括号的后面     |<br>| $   | 结尾    |                    |<br>| \b  | 单词边界  | 指[a-zA-Z_0-9]之外的字符 |<br>| \B  | 非单词边界 |                    |</p><p>题目，设计一个字符串原型方法，实现首字母大写！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"ruby"</span>;</span><br><span class="line"><span class="built_in">String</span>.prototype.capitalize =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="keyword">this</span>.replace(<span class="regexp">/^\w/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">alert(a.capitalize())<span class="comment">//Ruby</span></span><br></pre></td></tr></table></figure></p><p>单词边界举例。要匹配的东西的前端或未端不能为英文字母阿拉伯字数字或下横线。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"12w-eefd&amp;efrew"</span>;</span><br><span class="line">alert(str.match(<span class="regexp">/\b\w+\b/g</span>))<span class="comment">//12w,eefd,efrew</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>实例属性</th><th>描述</th></tr></thead><tbody><tr><td>global</td><td>是当前表达式模式首次匹配内容的开始位置，从0开始计数。其初始值为-1，每次成功匹配时，index属性都会随之改变。</td></tr><tr><td>ignoreCase</td><td>返回创建RegExp对象实例时指定的ignoreCase标志（i）的状态。如果创建RegExp对象实例时设置了i标志，该属性返回True，否则返回False，默认值为False。</td></tr><tr><td>lastIndex</td><td>是当前表达式模式首次匹配内容中最后一个字符的下一个位置，从0开始计数，常被作为继续搜索时的起始位置，初始值为-1， 表示从起始位置开始搜索，每次成功匹配时，lastIndex属性值都会随之改变。(只有使用exec()或test()方法才会填入，否则为0)</td></tr><tr><td>multiLine</td><td>返回创建RegExp对象实例时指定的multiLine标志（m）的状态。如果创建RegExp对象实例时设置了m标志，该属性返回True，否则返回False，默认值为False。</td></tr><tr><td>source</td><td>返回创建RegExp对象实例时指定的表达式文本字符串。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"JS's Louvre"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line">alert(reg.exec(str));<span class="comment">//J</span></span><br><span class="line">alert(reg.lastIndex);<span class="comment">//1</span></span><br><span class="line">alert(reg.exec(str));<span class="comment">//S</span></span><br><span class="line">alert(reg.lastIndex);<span class="comment">//2</span></span><br><span class="line">alert(reg.exec(str));<span class="comment">//s</span></span><br><span class="line">alert(reg.lastIndex);<span class="comment">//4</span></span><br><span class="line">alert(reg.exec(str));<span class="comment">//L</span></span><br><span class="line">alert(reg.lastIndex);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> 正则表达式 </tag></tags></entry><entry><title>DOM操作总结</title><link href="/DOM-operate-note.html"/><url>/DOM-operate-note.html</url><content type="html"><![CDATA[<p>文档对象模型 (DOM) 是HTML和XML文档的编程接口。它给文档（结构树）提供了一个结构化的表述并且定义了一种方式—程序可以对结构树进行访问，以改变文档的结构，样式和内容。</p><p>DOM 提供了一种表述形式将文档作为一个结构化的节点组以及包含属性和方法的对象。从本质上说，它将web 页面和脚本或编程语言连接起来了。</p><a id="more"></a><p><img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="DOM"></p><p>要改变页面的某个东西，JavaScript就需要获得对HTML文档中所有元素进行访问的入口。这个入口，连同对 HTML 元素进行添加、移动、改变或移除的方法和属性，都是通过DOM来获得的</p><h2 id="document-对象"><a href="#document-对象" class="headerlink" title="document 对象"></a>document 对象</h2><p>每个载入浏览器的HTML文档都会成为document对象。document对象包含了文档的基本信息，我们可以通过JavaScript对HTML页面中的所有元素进行访问、修改。</p><h3 id="document对象常用属性"><a href="#document对象常用属性" class="headerlink" title="document对象常用属性"></a>document对象常用属性</h3><p>document对象有很多属性来描述文档信息，介绍几个常用的</p><p><strong>doctype</strong></p><p>在书写HTML文档的时候第一句一般都是doctype声明，可以通过document对象获取，没有则返回null<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.doctype; // <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">document.doctype.name; // "html"</span><br></pre></td></tr></table></figure></p><p><strong>head、body</strong><br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.head<span class="comment">;</span></span><br><span class="line">document.body<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>通过这两个属性何以分别获取文档的head，body节点</p><p><strong>activeElement</strong><br>activeElement属性返回当前文档中获得焦点的那个元素。</p><p>用户通常可以使用tab键移动焦点，使用空格键激活焦点，比如如果焦点在一个链接上，此时按一下空格键，就会跳转到该链接<br>documentURI、domain、lastModified</p><pre><code>- documentURI属性返回当前文档的网址- domain属性返回文档域名- lastModified返回当前文档的最后修改时间</code></pre><p><strong>location</strong></p><p>location属性返回一个只读对象，提供了当前文档的URL信息<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定当前网址为http://user:passwd@www.example.com:4097/path/a.html?x=111#part1</span></span><br><span class="line"></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.href</span><span class="comment">// "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.protocol</span><span class="comment">// "http:"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.host</span><span class="comment">// "www.example.com:4097"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.hostname</span><span class="comment">// "www.example.com"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.port</span><span class="comment">// "4097"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.pathname</span><span class="comment">// "/path/a.html"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.search</span><span class="comment">// "?x=111"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.hash</span><span class="comment">// "#part1"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.user</span><span class="comment">// "user"</span></span><br><span class="line">document<span class="selector-class">.location</span><span class="selector-class">.password</span><span class="comment">// "passed"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到另一个网址</span></span><br><span class="line">document<span class="selector-class">.location</span>.assign(<span class="string">'http://www.google.com'</span>)</span><br><span class="line"><span class="comment">// 优先从服务器重新加载</span></span><br><span class="line">document<span class="selector-class">.location</span>.reload(true)</span><br><span class="line"><span class="comment">// 优先从本地缓存重新加载（默认值）</span></span><br><span class="line">document<span class="selector-class">.location</span>.reload(false)</span><br><span class="line"><span class="comment">// 跳转到另一个网址，但当前文档不保留在history对象中，</span></span><br><span class="line"><span class="comment">// 即无法用后退按钮，回到当前文档</span></span><br><span class="line">document<span class="selector-class">.location</span>.assign(<span class="string">'http://www.google.com'</span>)</span><br><span class="line"><span class="comment">// 将location对象转为字符串，等价于document.location.href</span></span><br><span class="line">document<span class="selector-class">.location</span>.toString()</span><br></pre></td></tr></table></figure></p><p>虽然location属性返回的对象是只读的，但是可以将URL赋值给这个属性，网页就会自动跳转到指定网址。</p><p>document.location = ‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">http://www.example.com&#39;</a>;<br>// 等价于<br>document.location.href = ‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">http://www.example.com&#39;</a>;</p><p><strong>title、characterSet</strong></p><pre><code>title属性返回当前文档的标题，该属性是可写的characterSet属性返回渲染当前文档的字符集</code></pre><p><strong>readyState</strong></p><p>readyState属性返回当前文档的状态，共有三种可能的值</p><pre><code>loading：加载HTML代码阶段，尚未完成解析interactive：加载外部资源阶段complete：全部加载完成</code></pre><p><strong>compatMode</strong></p><p>compatMode属性返回浏览器处理文档的模式，可能的值为</p><pre><code>BackCompat：向后兼容模式，也就是没有添加DOCTYPECSS1Compat：严格模式，添加了DOCTYPE</code></pre><p><strong>cookie</strong></p><p>cookie是存储在客户端的文本，后续在客户端存储章节会介绍到</p><p><strong>innerText</strong></p><p>innerText是一个可写属性，返回元素内包含的文本内容，在多层次的时候会按照元素由浅到深的顺序拼接其内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        123</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>456<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>外层div的innerText返回内容是  <code>&quot;123456&quot;</code></p><p><strong>innerHTML、outerHTML</strong><br>innerHTML属性作用和innerText类似，但是不是返回元素的文本内容，而是返回元素的HTML结构，在写入的时候也会自动构建DOM<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        123</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>456<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>外层div的innerHTML返回内容是 <code>&quot;&lt;p&gt;123&lt;span&gt;456&lt;/span&gt;&lt;/p&gt;&quot;</code><br>outerHTML 返回内容还包括本身</p><h3 id="document对象常用方法"><a href="#document对象常用方法" class="headerlink" title="document对象常用方法"></a>document对象常用方法</h3><p><strong>open()、close()</strong><br>document.open方法用于新建一个文档，供write方法写入内容。它实际上等于清除当前文档，重新写入内容<br>document.close方法用于关闭open方法所新建的文档。一旦关闭，write方法就无法写入内容了。<br><strong>write()</strong><br>document.write方法用于向当前文档写入内容。只要当前文档还没有用close方法关闭，它所写入的内容就会追加在已有内容的后面。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.open()<span class="comment">;</span></span><br><span class="line">document.write(<span class="string">"hello"</span>)<span class="comment">;</span></span><br><span class="line">document.write(<span class="string">"world"</span>)<span class="comment">;</span></span><br><span class="line">document.close()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果页面已经渲染完成再调用write方法，它会先调用open方法，擦除当前文档所有内容，然后再写入。<br>如果在页面渲染过程中调用write方法，并不会调用open方法。<br>需要注意的是，虽然调用close方法之后，无法再用write方法写入内容，但这时当前页面的其他DOM节点还是会继续加载。<br>除了某些特殊情况，应该尽量避免使用document.write这个方法。</p></blockquote><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。</p><p>Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点，DOM提供了一系列的方法可以进行元素的增、删、改、查操作</p><p><strong>Element有几个重要属性</strong></p><blockquote><ul><li>nodeName：元素标签名，还有个类似的tagName</li><li>nodeType：元素类型</li><li>className：类名</li><li>id：元素id</li><li>children：子元素列表（HTMLCollection）</li><li>childNodes：子元素列表（NodeList）</li><li>firstChild：第一个子元素</li><li>lastChild：最后一个子元素</li><li>nextSibling：下一个兄弟元素</li><li>previousSibling：上一个兄弟元素</li><li>parentNode、parentElement：父元素</li></ul></blockquote><p><strong>查询元素</strong></p><ul><li>getElementById()</li></ul><p>getElementById方法返回匹配指定ID属性的元素节点。如果没有发现匹配的节点，则返回null。这也是获取一个元素最快的方法<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure></p><ul><li>getElementsByClassName()</li></ul><p>getElementsByClassName方法返回一个类似数组的对象（HTMLCollection类型的对象），包括了所有class名字符合指定条件的元素（搜索范围包括本身），元素的变化实时反映在返回结果中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(names);</span><br><span class="line"></span><br><span class="line">getElementsByClassName方法的参数，可以是多个空格分隔的<span class="class"><span class="keyword">class</span>名字，返回同时具有这些节点的元素。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'red test'</span>);</span><br></pre></td></tr></table></figure></p><ul><li>getElementsByTagName()</li></ul><p>getElementsByTagName方法返回所有指定标签的元素（搜索范围包括本身）。返回值是一个HTMLCollection对象，也就是说，搜索结果是一个动态集合，任何元素的变化都会实时反映在返回的集合中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure></p><p>上面代码返回当前文档的所有p元素节点。注意，getElementsByTagName方法会将参数转为小写后，再进行搜索。</p><ul><li>getElementsByName()</li></ul><p>getElementsByName方法用于选择拥有name属性的HTML元素，比如form、img、frame、embed和object，返回一个NodeList格式的对象，不会实时反映元素的变化。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 假定有一个表单是&lt;form name=<span class="string">"x"</span>&gt;&lt;<span class="string">/form</span>&gt;</span><br><span class="line">var forms = document.getElementsByName<span class="params">("x")</span>;</span><br><span class="line">forms[0]<span class="string">.tagName</span><span class="string">//</span><span class="string">"FORM"</span></span><br></pre></td></tr></table></figure></p><p>注意，在IE浏览器使用这个方法，会将没有name属性、但有同名id属性的元素也返回，所以name和id属性最好设为不一样的值。</p><ul><li>querySelector()</li></ul><p>querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el1 = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">".myclass"</span>);</span><br><span class="line"><span class="keyword">var</span> el2 = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'#myParent &gt; [ng-click]'</span>);</span><br></pre></td></tr></table></figure></p><p>querySelector方法无法选中CSS伪元素。</p><ul><li>querySelectorAll()</li></ul><p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elementList</span> = document.querySelectorAll(selectors)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>querySelectorAll方法的参数，可以是逗号分隔的多个CSS选择器，返回所有匹配其中一个选择器的元素。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> matches = <span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">"div.note, div.alert"</span>);</span><br></pre></td></tr></table></figure></p><p>上面代码返回class属性是note或alert的div元素。</p><ul><li>elementFromPoint()</li></ul><p>elementFromPoint方法返回位于页面指定位置的元素。<br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = document.elementFromPoint(<span class="symbol">x</span>, <span class="symbol">y</span>);</span><br></pre></td></tr></table></figure></p><p>上面代码中，elementFromPoint方法的参数x和y，分别是相对于当前窗口左上角的横坐标和纵坐标，单位是CSS像素。</p><p>elementFromPoint方法返回位于这个位置的DOM元素，如果该元素不可返回（比如文本框的滚动条），则返回它的父元素（比如文本框）。如果坐标值无意义（比如负值），则返回null。</p><p><strong>创建元素</strong></p><ul><li>createElement()</li></ul><p>createElement方法用来生成HTML元素节点。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Div</span> = document.createElement(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p><p>createElement方法的参数为元素的标签名，即元素节点的tagName属性。如果传入大写的标签名，会被转为小写。如果参数带有尖括号（即&lt;和&gt;）或者是null，会报错。</p><ul><li>createTextNode()</li></ul><p>createTextNode方法用来生成文本节点，参数为所要生成的文本节点的内容。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Div</span> = document.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Content</span> = document.createTextNode(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure></p><p>上面代码新建一个div节点和一个文本节点</p><ul><li>createDocumentFragment()</li></ul><p>createDocumentFragment方法生成一个DocumentFragment对象。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docFragment = <span class="built_in">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure></p><p>DocumentFragment对象是一个存在于内存的DOM片段，但是不属于当前文档，常常用来生成较复杂的DOM结构，然后插入当前文档。这样做的好处在于，因为DocumentFragment不属于当前文档，对它的任何改动，都不会引发网页的重新渲染，比直接修改当前文档的DOM有更好的性能表现。<br>修改元素</p><ul><li>appendChild()</li></ul><p><strong>在元素末尾添加元素</strong><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Div</span> = document.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Content</span> = document.createTextNode(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="keyword">new</span><span class="type">Div</span>.appendChild(<span class="keyword">new</span><span class="type">Content</span>);</span><br></pre></td></tr></table></figure></p><ul><li>insertBefore()</li></ul><p>在某个元素之前插入元素<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Div</span> = document.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span><span class="keyword">new</span><span class="type">Content</span> = document.createTextNode(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="keyword">new</span><span class="type">Div</span>.insertBefore(<span class="keyword">new</span><span class="type">Content</span>, <span class="keyword">new</span><span class="type">Div</span>.firstChild);</span><br></pre></td></tr></table></figure></p><ul><li>replaceChild()</li></ul><p>replaceChild()接受两个参数：要插入的元素和要替换的元素<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span><span class="type">Div</span>.replaceChild(<span class="keyword">new</span><span class="type">Element</span>, oldElement);</span><br></pre></td></tr></table></figure></p><p><strong>删除元素</strong></p><p>删除元素使用removeChild()方法即可<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.remove<span class="constructor">Child(<span class="params">childNode</span>)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>clone元素</strong></p><p>cloneNode()方法用于克隆元素，方法有一个布尔值参数，传入true的时候会深复制，也就是会复制元素及其子元素（IE还会复制其事件），false的时候只复制元素本身<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span>.<span class="title">cloneNode</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p><strong>属性操作</strong></p><ul><li>getAttribute()</li></ul><p>getAttribute()用于获取元素的attribute值<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span>.<span class="title">getAttribute</span>('id');</span><br></pre></td></tr></table></figure></p><ul><li>createAttribute()</li></ul><p>createAttribute()方法生成一个新的属性对象节点，并返回它。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">attribute</span> = document.createAttribute(name)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>createAttribute方法的参数name，是属性的名称。</p><ul><li>setAttribute()</li></ul><p>setAttribute()方法用于设置元素属性<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">node</span><span class="title">= document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">node</span>.<span class="title">setAttribute</span>(<span class="string">"my_attrib"</span>, <span class="string">"newVal"</span>);</span><br></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">node</span><span class="title">= document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">var a = document.createAttribute(<span class="string">"my_attrib"</span>);</span><br><span class="line">a.value = <span class="string">"newVal"</span>;</span><br><span class="line"><span class="keyword">node</span>.<span class="title">setAttributeNode</span>(a);</span><br></pre></td></tr></table></figure></p><ul><li>romoveAttribute()</li></ul><p>removeAttribute()用于删除元素属性<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span>.<span class="title">removeAttribute</span>('id');</span><br></pre></td></tr></table></figure></p><ul><li>element.attributes</li></ul><p>当然上面的方法做的事情也可以通过类操作数组属性element.attributes来实现</p><h3 id="常见使用方式"><a href="#常见使用方式" class="headerlink" title="常见使用方式"></a>常见使用方式</h3><p><strong>修改样式</strong></p><p>可修改元素的 style 属性，修改结果直接反映到页面元素<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'p'</span>).style.color = <span class="string">'red'</span></span><br><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">'.box'</span>).style.backgroundColor = <span class="string">'#ccc'</span></span><br></pre></td></tr></table></figure></p><p><strong>获取样式 getComputedStyle</strong></p><p>使用getComputedStyle获取元素计算后的样式，不要通过 node.style.属性 获取<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">node</span><span class="title">= document</span>.querySelector('p')</span><br><span class="line">var color = window.getComputedStyle(<span class="keyword">node</span><span class="title">).color</span></span><br><span class="line">console.log(color)</span><br></pre></td></tr></table></figure></p><p><strong>class 操作</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> nodeBox = document.querySelector(<span class="string">'.box'</span>)</span><br><span class="line">console.log( nodeBox<span class="selector-class">.classList</span> )</span><br><span class="line">nodeBox<span class="selector-class">.classList</span>.add(<span class="string">'active'</span>)   <span class="comment">//新增 class</span></span><br><span class="line">nodeBox<span class="selector-class">.classList</span>.remove(<span class="string">'active'</span>)  <span class="comment">//删除 class</span></span><br><span class="line">nodeBox<span class="selector-class">.classList</span>.toggle(<span class="string">'active'</span>)   <span class="comment">//新增/删除切换</span></span><br><span class="line">node<span class="selector-class">.classList</span>.contains(<span class="string">'active'</span>)   <span class="comment">// 判断是否拥有 class</span></span><br></pre></td></tr></table></figure></p><p>样式的改变尽量使用 class 的新增删除来实现</p><p><strong>页面宽高</strong></p><p><img src="https://ww1.sinaimg.cn/large/005M7QYPly1fj8v93smtqj30bf06vgm6.jpg" alt="element.clientHeight"></p><p><img src="https://ww1.sinaimg.cn/large/005M7QYPly1fj8v8kad8yj30bf06vaan.jpg" alt="element.offsetHeight"><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document<span class="selector-class">.body</span>.clientHeight</span><br><span class="line">document<span class="selector-class">.body</span>.offsetHeight</span><br><span class="line"></span><br><span class="line">docuemnt<span class="selector-class">.body</span><span class="selector-class">.style</span><span class="selector-class">.border</span> = <span class="string">"10px solid red"</span></span><br><span class="line">docuemnt<span class="selector-class">.body</span><span class="selector-class">.clientHeight</span><span class="comment">//变小了</span></span><br><span class="line">document<span class="selector-class">.body</span>.offsetHeight</span><br></pre></td></tr></table></figure></p><p><strong>element.scrollHeight</strong> 元素滚动内容的总长度。如果元素没出现滚动条， scrollHeight等于 clientHeight<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">document</span><span class="selector-class">.body</span><span class="selector-class">.scrollHeight</span></span><br></pre></td></tr></table></figure></p><p><strong>element.scrollTop</strong> 滚动的高度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">document</span><span class="selector-class">.body</span><span class="selector-class">.scrollTop</span></span><br></pre></td></tr></table></figure></p><p><strong>window.innerHeight</strong> 窗口的高度<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerHeigh</span><br></pre></td></tr></table></figure></p><p>问题1：如何判断一个元素是否出现在窗口视野中</p><p>问题2：如果判断页面滚动到底部</p><h2 id="HTMLCollection和NodeList"><a href="#HTMLCollection和NodeList" class="headerlink" title="HTMLCollection和NodeList"></a>HTMLCollection和NodeList</h2><p>我们知道Element对象表示元素，那么多个元素的集合一般有两种数据类型</p><p>NodeList 对象代表一个有顺序的节点列表，HTMLCollection 是一个接口，表示 HTML 元素的集合，它提供了可以遍历列表的方法和属性</p><p>以下方法获取的为HTMLCollection对象</p><blockquote><p>document.images //所有img元素<br>document.links //所有带href属性的a元素和area元素<br>document.anchors //所有带name属性的a元素<br>document.forms //所有form元素<br>document.scripts //所有script元素<br>document.applets //所有applet元素<br>document.embeds //所有embed元素<br>document.plugins //document.与embeds相同<br>document.getElementById(“table”).children<br>document.getElementById(“table”).tBodies<br>document.getElementById(“table”).rows<br>document.getElementById(“row”).cells<br>document.getElementById(“Map”).areas<br>document.getElementById(“f2”).elements //HTMLFormControlsCollection extends HTMLCollection<br>document.getElementById(“s”).options //HTMLOptionsCollection extends HTMLCollection</p></blockquote><p>以下方法获取的为NodeList对象</p><blockquote><p>document.getElementsByName(“name1”)<br>document.getElementsByClassName(“class1”)<br>document.getElementsByTagName(“a”)<br>document.querySelectorAll(“a”)<br>document.getElementById(“table”).childNodes<br>document.styleSheets //StyleSheetList，与NodeList类似</p></blockquote><p>HTMLCollection与NodeList有很大部分相似性</p><blockquote><ul><li>都是类数组对象，都有length属性，可以通过for循环迭代</li><li>都是只读的</li><li>都是实时的，即文档的更改会立即反映到相关对象上面(有一个例外，document.querySelectorAll返回的NodeList不是实时的)</li><li>都有item()方法，可以通过item(index)或item(“id”)获取元素</li></ul></blockquote><p>不同点在于</p><blockquote><ul><li>HTMLCollection对象具有namedItem()方法，可以传递id或name获得元素</li></ul></blockquote><blockquote><ul><li>HTMLCollection的item()方法和通过属性获取元素(document.forms.f1)可以支持id和name，而NodeList对象只支持id</li></ul></blockquote>]]></content><categories><category> 前端 </category></categories><tags><tag> javascript </tag><tag> DOM </tag></tags></entry><entry><title>meta标签总结与属性使用介绍</title><link href="/html5-meta-properties.html"/><url>/html5-meta-properties.html</url><content type="html"><![CDATA[<p>英文版w3school中,meta的解释为“元数据”，元数据在Google就有详细解释。</p><blockquote><p>The <code>&lt;meta&gt;</code> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.</p></blockquote><p>不难看出，其中的关键是metadata，中文名叫元数据，是用于描述数据的数据。它不会显示在页面上，但是机器却可以识别。这么一来meta标签的作用方式就很好理解了。<br><a id="more"></a></p><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><blockquote><ul><li>Meta elements are typically used to specify page description, keywords, author of the document, last modified, and other metadata.</li><li>The metadata can be used by browsers (how to display content or reload page), search engines (keywords), or other web services</li></ul></blockquote><p>这句话对meta标签用处的介绍，简洁明了。<br>翻译过来就是：meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>meta标签共有两个属性，分别是http-equiv属性和name属性。</p><h4 id="1-name属性"><a href="#1-name属性" class="headerlink" title="1. name属性"></a>1. name属性</h4><p>name属性主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为content，content中的内容是对name填入类型的具体描述，便于搜索引擎抓取。<br>meta标签中name属性语法格式是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"参数"</span><span class="attr">content</span>=<span class="string">"具体的描述"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中name属性共有以下几种参数。(A-C为常用属性)</p><h4 id="A-keywords-关键字"><a href="#A-keywords-关键字" class="headerlink" title="A. keywords(关键字)"></a>A. keywords(关键字)</h4><p>说明：用于告诉搜索引擎，你网页的关键字。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"keywords"</span><span class="attr">content</span>=<span class="string">"博客，前端"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="B-description-网站内容的描述"><a href="#B-description-网站内容的描述" class="headerlink" title="B. description(网站内容的描述)"></a>B. description(网站内容的描述)</h4><p>说明：用于告诉搜索引擎，你网站的主要内容。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"description"</span><span class="attr">content</span>=<span class="string">"这是我的博客"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="C-viewport-移动端的窗口"><a href="#C-viewport-移动端的窗口" class="headerlink" title="C. viewport(移动端的窗口)"></a>C. viewport(移动端的窗口)</h5><p>说明：这个概念较为复杂,这个属性常用于设计移动端网页。在用bootstrap,AmazeUI等框架时候都有用过viewport。</p><p>举例（常用范例）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"viewport"</span><span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="D-robots-定义搜索引擎爬虫的索引方式"><a href="#D-robots-定义搜索引擎爬虫的索引方式" class="headerlink" title="D. robots(定义搜索引擎爬虫的索引方式)"></a>D. robots(定义搜索引擎爬虫的索引方式)</h5><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。<br>content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p><p>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"robots"</span><span class="attr">content</span>=<span class="string">"none"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>具体参数如下：</p><ol><li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li><li>noindex : 搜索引擎不索引此网页。</li><li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li><li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li><li>index : 搜索引擎索引此网页。</li><li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li><li>author(作者)</li></ol><p>说明：用于标注网页作者<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"author"</span><span class="attr">content</span>=<span class="string">"mhy, dsz9258@163.com"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="F-generator-网页制作软件"><a href="#F-generator-网页制作软件" class="headerlink" title="F. generator(网页制作软件)"></a>F. generator(网页制作软件)</h5><p>说明：用于标明网页是什么软件做的<br>举例: (不知道能不能这样写)：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"generator"</span><span class="attr">content</span>=<span class="string">"Sublime Text3"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="G-copyright-版权"><a href="#G-copyright-版权" class="headerlink" title="G. copyright(版权)"></a>G. copyright(版权)</h5><p>说明：用于标注版权信息<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代表该网站为mhy个人版权所有。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"copyright"</span><span class="attr">content</span>=<span class="string">"mhy"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="H-revisit-after-搜索引擎爬虫重访时间"><a href="#H-revisit-after-搜索引擎爬虫重访时间" class="headerlink" title="H. revisit-after(搜索引擎爬虫重访时间)"></a>H. revisit-after(搜索引擎爬虫重访时间)</h5><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"revisit-after"</span><span class="attr">content</span>=<span class="string">"7 days"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="I-renderer-双核浏览器渲染方式"><a href="#I-renderer-双核浏览器渲染方式" class="headerlink" title="I. renderer(双核浏览器渲染方式)"></a>I. renderer(双核浏览器渲染方式)</h5><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认webkit内核 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"renderer"</span><span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认IE兼容模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"renderer"</span><span class="attr">content</span>=<span class="string">"ie-comp"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认IE标准模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"renderer"</span><span class="attr">content</span>=<span class="string">"ie-stand"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="2-http-equiv属性"><a href="#2-http-equiv属性" class="headerlink" title="2. http-equiv属性"></a>2. http-equiv属性</h4><p>介绍之前，先说个小插曲。看文档和博客关于http-equiv的介绍时，有这么一句。</p><blockquote><p>http-equiv顾名思义，相当于http的文件头作用。</p></blockquote><p>一开始看到这句话的时候，我是迷糊的。因为我看各类技术名词，都会习惯性的去记住它的英文全称。equiv的全称是”equivalent”，意思是相等，相当于。然后我脑子里出现了大大的迷惑：“HTTP相等？”</p><p>后来还准备去Segmentfault提问来着。结果在写问题的时候，突然反应出equivalent还有相当于的意思。意思就是相当于http的作用。至于文件头是哪儿出来的，估计是从其作用来分析的。我认为顾名思义并不能得出”相当于http的文件头作用”这个论断。</p><p>这个我所认为的http-equiv意思的简介。<br><strong>相当于HTTP的作用，比如说定义些HTTP参数啥的。</strong></p><p>meta标签中http-equiv属性语法格式是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"参数"</span><span class="attr">content</span>=<span class="string">"具体的描述"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中http-equiv属性主要有以下几种参数：</p><h5 id="A-content-Type-设定网页字符集-推荐使用HTML5的方式"><a href="#A-content-Type-设定网页字符集-推荐使用HTML5的方式" class="headerlink" title="A. content-Type(设定网页字符集)(推荐使用HTML5的方式)"></a>A. content-Type(设定网页字符集)(推荐使用HTML5的方式)</h5><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 旧的HTML，不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"content-Type"</span><span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- HTML5设定网页字符集的方式，推荐使用UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="B-X-UA-Compatible-浏览器采取何种版本渲染当前页面"><a href="#B-X-UA-Compatible-浏览器采取何种版本渲染当前页面" class="headerlink" title="B. X-UA-Compatible(浏览器采取何种版本渲染当前页面)"></a>B. X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h5><p>说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定IE和Chrome使用最新版本渲染当前页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span><span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="C-cache-control-指定请求和响应遵循的缓存机制"><a href="#C-cache-control-指定请求和响应遵循的缓存机制" class="headerlink" title="C. cache-control(指定请求和响应遵循的缓存机制)"></a>C. cache-control(指定请求和响应遵循的缓存机制)</h5><p>用法1.</p><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间。这一段内容我在网上找了很久，但都没有找到满意的。<br>最后终于在Google Developers中发现了我想要的答案。</p><p>举例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"cache-control"</span><span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>共有以下几种用法：</p><blockquote><ul><li>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</li><li>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</li><li>public: 缓存所有响应，但并非必须。因为max-age也可以做到相同效果</li><li>private: 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）</li><li>maxage: 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。</li></ul></blockquote><p><em>用法2.(禁止百度自动转码)</em></p><p>说明：用于禁止当前页面在移动端浏览时，被百度自动转码。虽然百度的本意是好的，但是转码效果很多时候却不尽人意。所以可以在head中加入例子中的那句话，就可以避免百度自动转码了。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span><span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="D-expires-网页到期时间"><a href="#D-expires-网页到期时间" class="headerlink" title="D. expires(网页到期时间)"></a>D. expires(网页到期时间)</h5><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。<br>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"expires"</span><span class="attr">content</span>=<span class="string">"Sunday 26 October 2016 01:00 GMT"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="E-refresh-自动刷新并指向某页面"><a href="#E-refresh-自动刷新并指向某页面" class="headerlink" title="E. refresh(自动刷新并指向某页面)"></a>E. refresh(自动刷新并指向某页面)</h5><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。<br>举例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 意思是2秒后跳转向我的博客 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"refresh"</span><span class="attr">content</span>=<span class="string">"2；URL=http://www.lxxyx.win/"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="F-Set-Cookie-cookie设定"><a href="#F-Set-Cookie-cookie设定" class="headerlink" title="F. Set-Cookie(cookie设定)"></a>F. Set-Cookie(cookie设定)</h5><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span><span class="attr">content</span>=<span class="string">"name, date"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体范例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span><span class="attr">content</span>=<span class="string">"User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="移动设备通用meta标签"><a href="#移动设备通用meta标签" class="headerlink" title="移动设备通用meta标签"></a>移动设备通用<code>meta</code>标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">content</span>=<span class="string">"telephone=no"</span><span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>设定是否将网页中的手机号码显示为拨号的超链接，iphone上默认为yes。该属性设置为yes时，使用手机设备打开页面后点击页面上的手机号码可以拨打电话。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"viewport"</span><span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>viewport属性用于设置移动端页面是否可以缩放，具体配置项有以下几个:</p><ul><li>width: viewport的宽度</li><li>height: viewport的高度</li><li>initial-scale: 初始的缩放比例</li><li>minimum-scale: 允许用户缩放到的最小比例</li><li>maxmum-scale: 允许用户缩放的最大比例</li><li>user-scalable: 用户是否可以手动缩放</li><li>viewport-fit: 处理iphone X 刘海部位的白条，设置该meta属性可以把网页拓展至整个屏幕（或者给body设置background-color）</li></ul><p><img src="https://wicdn.xiaohongchun.com/xhc-plat/1527061942559_dmi4aB2KwH.png" height="200"></p><h3 id="IOS设备的私有属性"><a href="#IOS设备的私有属性" class="headerlink" title="IOS设备的私有属性"></a>IOS设备的私有属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span><span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span><span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span><span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这两个会让网页内容以应用程序风格显示，并使状态栏透明。</p><p><a href="https://segmentfault.com/a/1190000004279791" target="_blank" rel="noopener">参考1</a><br><a href="http://blog.jayself.com/2014/03/22/meta/" target="_blank" rel="noopener">参考2</a></p>]]></content><categories><category> 前端 </category></categories><tags><tag> html5 </tag><tag> meta </tag></tags></entry></search>
